
testFreeRtos_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009198  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080092a8  080092a8  000192a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800943c  0800943c  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  0800943c  0800943c  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800943c  0800943c  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800943c  0800943c  0001943c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009440  08009440  00019440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08009444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cc8  20000194  080095d8  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e5c  080095d8  00022e5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020621  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049de  00000000  00000000  000407de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be0  00000000  00000000  000451c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f8  00000000  00000000  00046da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000063cf  00000000  00000000  00048798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e824  00000000  00000000  0004eb67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083307  00000000  00000000  0006d38b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0692  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000781c  00000000  00000000  000f06e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000194 	.word	0x20000194
 800012c:	00000000 	.word	0x00000000
 8000130:	08009290 	.word	0x08009290

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000198 	.word	0x20000198
 800014c:	08009290 	.word	0x08009290

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fc44 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f848 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f972 	bl	8000444 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f91c 	bl	800039c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000164:	f000 f944 	bl	80003f0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000168:	f000 f89a 	bl	80002a0 <MX_I2C1_Init>
  MX_TIM1_Init();
 800016c:	f000 f8c6 	bl	80002fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000170:	f005 fd40 	bl	8005bf4 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of tmr_1 */
  tmr_1Handle = osTimerNew(tmr_1_cb, osTimerPeriodic, NULL, &tmr_1_attributes);
 8000174:	4b11      	ldr	r3, [pc, #68]	; (80001bc <main+0x6c>)
 8000176:	2200      	movs	r2, #0
 8000178:	2101      	movs	r1, #1
 800017a:	4811      	ldr	r0, [pc, #68]	; (80001c0 <main+0x70>)
 800017c:	f005 fe8e 	bl	8005e9c <osTimerNew>
 8000180:	4603      	mov	r3, r0
 8000182:	4a10      	ldr	r2, [pc, #64]	; (80001c4 <main+0x74>)
 8000184:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000186:	4a10      	ldr	r2, [pc, #64]	; (80001c8 <main+0x78>)
 8000188:	2100      	movs	r1, #0
 800018a:	4810      	ldr	r0, [pc, #64]	; (80001cc <main+0x7c>)
 800018c:	f005 fd98 	bl	8005cc0 <osThreadNew>
 8000190:	4603      	mov	r3, r0
 8000192:	4a0f      	ldr	r2, [pc, #60]	; (80001d0 <main+0x80>)
 8000194:	6013      	str	r3, [r2, #0]

  /* creation of tsk_screen */
  tsk_screenHandle = osThreadNew(tsk_screen_fn, NULL, &tsk_screen_attributes);
 8000196:	4a0f      	ldr	r2, [pc, #60]	; (80001d4 <main+0x84>)
 8000198:	2100      	movs	r1, #0
 800019a:	480f      	ldr	r0, [pc, #60]	; (80001d8 <main+0x88>)
 800019c:	f005 fd90 	bl	8005cc0 <osThreadNew>
 80001a0:	4603      	mov	r3, r0
 80001a2:	4a0e      	ldr	r2, [pc, #56]	; (80001dc <main+0x8c>)
 80001a4:	6013      	str	r3, [r2, #0]

  /* creation of tsk_sensors */
  tsk_sensorsHandle = osThreadNew(tsk_sensors_fn, NULL, &tsk_sensors_attributes);
 80001a6:	4a0e      	ldr	r2, [pc, #56]	; (80001e0 <main+0x90>)
 80001a8:	2100      	movs	r1, #0
 80001aa:	480e      	ldr	r0, [pc, #56]	; (80001e4 <main+0x94>)
 80001ac:	f005 fd88 	bl	8005cc0 <osThreadNew>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4a0d      	ldr	r2, [pc, #52]	; (80001e8 <main+0x98>)
 80001b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001b6:	f005 fd4f 	bl	8005c58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ba:	e7fe      	b.n	80001ba <main+0x6a>
 80001bc:	080093b4 	.word	0x080093b4
 80001c0:	08000599 	.word	0x08000599
 80001c4:	200002d0 	.word	0x200002d0
 80001c8:	08009348 	.word	0x08009348
 80001cc:	08000555 	.word	0x08000555
 80001d0:	200002c4 	.word	0x200002c4
 80001d4:	0800936c 	.word	0x0800936c
 80001d8:	08000579 	.word	0x08000579
 80001dc:	200002c8 	.word	0x200002c8
 80001e0:	08009390 	.word	0x08009390
 80001e4:	08000589 	.word	0x08000589
 80001e8:	200002cc 	.word	0x200002cc

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b094      	sub	sp, #80	; 0x50
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f008 ff82 	bl	8009104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021c:	2301      	movs	r3, #1
 800021e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000224:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000236:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000238:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800023c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fe96 	bl	8001f74 <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800024e:	f000 f9bf 	bl	80005d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2302      	movs	r3, #2
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000262:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	2102      	movs	r1, #2
 800026e:	4618      	mov	r0, r3
 8000270:	f002 f902 	bl	8002478 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800027a:	f000 f9a9 	bl	80005d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800027e:	2310      	movs	r3, #16
 8000280:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f002 fabd 	bl	8002808 <HAL_RCCEx_PeriphCLKConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000294:	f000 f99c 	bl	80005d0 <Error_Handler>
  }
}
 8000298:	bf00      	nop
 800029a:	3750      	adds	r7, #80	; 0x50
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <MX_I2C1_Init+0x50>)
 80002a6:	4a13      	ldr	r2, [pc, #76]	; (80002f4 <MX_I2C1_Init+0x54>)
 80002a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80002aa:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <MX_I2C1_Init+0x50>)
 80002ac:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <MX_I2C1_Init+0x58>)
 80002ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002b0:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <MX_I2C1_Init+0x50>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <MX_I2C1_Init+0x50>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <MX_I2C1_Init+0x50>)
 80002be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c4:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <MX_I2C1_Init+0x50>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <MX_I2C1_Init+0x50>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002d0:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <MX_I2C1_Init+0x50>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002d6:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <MX_I2C1_Init+0x50>)
 80002d8:	2200      	movs	r2, #0
 80002da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <MX_I2C1_Init+0x50>)
 80002de:	f000 fe45 	bl	8000f6c <HAL_I2C_Init>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002e8:	f000 f972 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200001b0 	.word	0x200001b0
 80002f4:	40005400 	.word	0x40005400
 80002f8:	00061a80 	.word	0x00061a80

080002fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000302:	f107 0308 	add.w	r3, r7, #8
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000310:	463b      	mov	r3, r7
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000318:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <MX_TIM1_Init+0x98>)
 800031a:	4a1f      	ldr	r2, [pc, #124]	; (8000398 <MX_TIM1_Init+0x9c>)
 800031c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800031e:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <MX_TIM1_Init+0x98>)
 8000320:	2247      	movs	r2, #71	; 0x47
 8000322:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_TIM1_Init+0x98>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_TIM1_Init+0x98>)
 800032c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000330:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000332:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_TIM1_Init+0x98>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000338:	4b16      	ldr	r3, [pc, #88]	; (8000394 <MX_TIM1_Init+0x98>)
 800033a:	2200      	movs	r2, #0
 800033c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800033e:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_TIM1_Init+0x98>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000344:	4813      	ldr	r0, [pc, #76]	; (8000394 <MX_TIM1_Init+0x98>)
 8000346:	f002 fb15 	bl	8002974 <HAL_TIM_Base_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000350:	f000 f93e 	bl	80005d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000358:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800035a:	f107 0308 	add.w	r3, r7, #8
 800035e:	4619      	mov	r1, r3
 8000360:	480c      	ldr	r0, [pc, #48]	; (8000394 <MX_TIM1_Init+0x98>)
 8000362:	f002 fc5d 	bl	8002c20 <HAL_TIM_ConfigClockSource>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800036c:	f000 f930 	bl	80005d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000378:	463b      	mov	r3, r7
 800037a:	4619      	mov	r1, r3
 800037c:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_TIM1_Init+0x98>)
 800037e:	f002 fe2f 	bl	8002fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000388:	f000 f922 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800038c:	bf00      	nop
 800038e:	3718      	adds	r7, #24
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000204 	.word	0x20000204
 8000398:	40012c00 	.word	0x40012c00

0800039c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003a2:	4a12      	ldr	r2, [pc, #72]	; (80003ec <MX_USART1_UART_Init+0x50>)
 80003a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003c2:	220c      	movs	r2, #12
 80003c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003d2:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003d4:	f002 fe5a 	bl	800308c <HAL_UART_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003de:	f000 f8f7 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000244 	.word	0x20000244
 80003ec:	40013800 	.word	0x40013800

080003f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <MX_USART3_UART_Init+0x4c>)
 80003f6:	4a12      	ldr	r2, [pc, #72]	; (8000440 <MX_USART3_UART_Init+0x50>)
 80003f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80003fa:	4b10      	ldr	r3, [pc, #64]	; (800043c <MX_USART3_UART_Init+0x4c>)
 80003fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000400:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_USART3_UART_Init+0x4c>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_USART3_UART_Init+0x4c>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <MX_USART3_UART_Init+0x4c>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <MX_USART3_UART_Init+0x4c>)
 8000416:	220c      	movs	r2, #12
 8000418:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_USART3_UART_Init+0x4c>)
 800041c:	2200      	movs	r2, #0
 800041e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <MX_USART3_UART_Init+0x4c>)
 8000422:	2200      	movs	r2, #0
 8000424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <MX_USART3_UART_Init+0x4c>)
 8000428:	f002 fe30 	bl	800308c <HAL_UART_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000432:	f000 f8cd 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000284 	.word	0x20000284
 8000440:	40004800 	.word	0x40004800

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 0310 	add.w	r3, r7, #16
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000458:	4b3a      	ldr	r3, [pc, #232]	; (8000544 <MX_GPIO_Init+0x100>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a39      	ldr	r2, [pc, #228]	; (8000544 <MX_GPIO_Init+0x100>)
 800045e:	f043 0310 	orr.w	r3, r3, #16
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b37      	ldr	r3, [pc, #220]	; (8000544 <MX_GPIO_Init+0x100>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0310 	and.w	r3, r3, #16
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000470:	4b34      	ldr	r3, [pc, #208]	; (8000544 <MX_GPIO_Init+0x100>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a33      	ldr	r2, [pc, #204]	; (8000544 <MX_GPIO_Init+0x100>)
 8000476:	f043 0320 	orr.w	r3, r3, #32
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b31      	ldr	r3, [pc, #196]	; (8000544 <MX_GPIO_Init+0x100>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0320 	and.w	r3, r3, #32
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000488:	4b2e      	ldr	r3, [pc, #184]	; (8000544 <MX_GPIO_Init+0x100>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a2d      	ldr	r2, [pc, #180]	; (8000544 <MX_GPIO_Init+0x100>)
 800048e:	f043 0308 	orr.w	r3, r3, #8
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b2b      	ldr	r3, [pc, #172]	; (8000544 <MX_GPIO_Init+0x100>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0308 	and.w	r3, r3, #8
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	4b28      	ldr	r3, [pc, #160]	; (8000544 <MX_GPIO_Init+0x100>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a27      	ldr	r2, [pc, #156]	; (8000544 <MX_GPIO_Init+0x100>)
 80004a6:	f043 0304 	orr.w	r3, r3, #4
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b25      	ldr	r3, [pc, #148]	; (8000544 <MX_GPIO_Init+0x100>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0304 	and.w	r3, r3, #4
 80004b4:	603b      	str	r3, [r7, #0]
 80004b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004be:	4822      	ldr	r0, [pc, #136]	; (8000548 <MX_GPIO_Init+0x104>)
 80004c0:	f000 fd24 	bl	8000f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SONAR2_TRIG_Pin|SONAR1_TRIG_Pin, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2128      	movs	r1, #40	; 0x28
 80004c8:	4820      	ldr	r0, [pc, #128]	; (800054c <MX_GPIO_Init+0x108>)
 80004ca:	f000 fd1f 	bl	8000f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	2302      	movs	r3, #2
 80004de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	4619      	mov	r1, r3
 80004e6:	4818      	ldr	r0, [pc, #96]	; (8000548 <MX_GPIO_Init+0x104>)
 80004e8:	f000 fb8c 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SONAR2_ECHO_Pin */
  GPIO_InitStruct.Pin = SONAR2_ECHO_Pin;
 80004ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SONAR2_ECHO_GPIO_Port, &GPIO_InitStruct);
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	4619      	mov	r1, r3
 8000500:	4813      	ldr	r0, [pc, #76]	; (8000550 <MX_GPIO_Init+0x10c>)
 8000502:	f000 fb7f 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SONAR2_TRIG_Pin SONAR1_TRIG_Pin */
  GPIO_InitStruct.Pin = SONAR2_TRIG_Pin|SONAR1_TRIG_Pin;
 8000506:	2328      	movs	r3, #40	; 0x28
 8000508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2302      	movs	r3, #2
 8000514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	4619      	mov	r1, r3
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <MX_GPIO_Init+0x108>)
 800051e:	f000 fb71 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SONAR1_ECHO_Pin */
  GPIO_InitStruct.Pin = SONAR1_ECHO_Pin;
 8000522:	2310      	movs	r3, #16
 8000524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SONAR1_ECHO_GPIO_Port, &GPIO_InitStruct);
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	4619      	mov	r1, r3
 8000534:	4805      	ldr	r0, [pc, #20]	; (800054c <MX_GPIO_Init+0x108>)
 8000536:	f000 fb65 	bl	8000c04 <HAL_GPIO_Init>

}
 800053a:	bf00      	nop
 800053c:	3720      	adds	r7, #32
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000
 8000548:	40011000 	.word	0x40011000
 800054c:	40010c00 	.word	0x40010c00
 8000550:	40010800 	.word	0x40010800

08000554 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800055c:	f008 f996 	bl	800888c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000564:	4803      	ldr	r0, [pc, #12]	; (8000574 <StartDefaultTask+0x20>)
 8000566:	f000 fce9 	bl	8000f3c <HAL_GPIO_TogglePin>
	  osDelay(100);
 800056a:	2064      	movs	r0, #100	; 0x64
 800056c:	f005 fc52 	bl	8005e14 <osDelay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000570:	e7f6      	b.n	8000560 <StartDefaultTask+0xc>
 8000572:	bf00      	nop
 8000574:	40011000 	.word	0x40011000

08000578 <tsk_screen_fn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tsk_screen_fn */
void tsk_screen_fn(void *argument)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tsk_screen_fn */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000580:	2001      	movs	r0, #1
 8000582:	f005 fc47 	bl	8005e14 <osDelay>
 8000586:	e7fb      	b.n	8000580 <tsk_screen_fn+0x8>

08000588 <tsk_sensors_fn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tsk_sensors_fn */
void tsk_sensors_fn(void *argument)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tsk_sensors_fn */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f005 fc3f 	bl	8005e14 <osDelay>
 8000596:	e7fb      	b.n	8000590 <tsk_sensors_fn+0x8>

08000598 <tmr_1_cb>:
  /* USER CODE END tsk_sensors_fn */
}

/* tmr_1_cb function */
void tmr_1_cb(void *argument)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tmr_1_cb */

  /* USER CODE END tmr_1_cb */
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
	...

080005ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d101      	bne.n	80005c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005be:	f000 fa25 	bl	8000a0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40000800 	.word	0x40000800

080005d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d4:	b672      	cpsid	i
}
 80005d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <Error_Handler+0x8>
	...

080005dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <HAL_MspInit+0x68>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <HAL_MspInit+0x68>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_MspInit+0x68>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_MspInit+0x68>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a11      	ldr	r2, [pc, #68]	; (8000644 <HAL_MspInit+0x68>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_MspInit+0x68>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	210f      	movs	r1, #15
 8000616:	f06f 0001 	mvn.w	r0, #1
 800061a:	f000 fac8 	bl	8000bae <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HAL_MspInit+0x6c>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_MspInit+0x6c>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000
 8000648:	40010000 	.word	0x40010000

0800064c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a15      	ldr	r2, [pc, #84]	; (80006bc <HAL_I2C_MspInit+0x70>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d123      	bne.n	80006b4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <HAL_I2C_MspInit+0x74>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <HAL_I2C_MspInit+0x74>)
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <HAL_I2C_MspInit+0x74>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0308 	and.w	r3, r3, #8
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000684:	23c0      	movs	r3, #192	; 0xc0
 8000686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000688:	2312      	movs	r3, #18
 800068a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <HAL_I2C_MspInit+0x78>)
 8000698:	f000 fab4 	bl	8000c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HAL_I2C_MspInit+0x74>)
 800069e:	69db      	ldr	r3, [r3, #28]
 80006a0:	4a07      	ldr	r2, [pc, #28]	; (80006c0 <HAL_I2C_MspInit+0x74>)
 80006a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a6:	61d3      	str	r3, [r2, #28]
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_I2C_MspInit+0x74>)
 80006aa:	69db      	ldr	r3, [r3, #28]
 80006ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006b4:	bf00      	nop
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40005400 	.word	0x40005400
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010c00 	.word	0x40010c00

080006c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a09      	ldr	r2, [pc, #36]	; (80006fc <HAL_TIM_Base_MspInit+0x34>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d10b      	bne.n	80006f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_TIM_Base_MspInit+0x38>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_TIM_Base_MspInit+0x38>)
 80006e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_TIM_Base_MspInit+0x38>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	40012c00 	.word	0x40012c00
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0318 	add.w	r3, r7, #24
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a38      	ldr	r2, [pc, #224]	; (8000800 <HAL_UART_MspInit+0xfc>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d132      	bne.n	800078a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000724:	4b37      	ldr	r3, [pc, #220]	; (8000804 <HAL_UART_MspInit+0x100>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a36      	ldr	r2, [pc, #216]	; (8000804 <HAL_UART_MspInit+0x100>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b34      	ldr	r3, [pc, #208]	; (8000804 <HAL_UART_MspInit+0x100>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b31      	ldr	r3, [pc, #196]	; (8000804 <HAL_UART_MspInit+0x100>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a30      	ldr	r2, [pc, #192]	; (8000804 <HAL_UART_MspInit+0x100>)
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b2e      	ldr	r3, [pc, #184]	; (8000804 <HAL_UART_MspInit+0x100>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0304 	and.w	r3, r3, #4
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8000754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075e:	2303      	movs	r3, #3
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 0318 	add.w	r3, r7, #24
 8000766:	4619      	mov	r1, r3
 8000768:	4827      	ldr	r0, [pc, #156]	; (8000808 <HAL_UART_MspInit+0x104>)
 800076a:	f000 fa4b 	bl	8000c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_Pin;
 800076e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	4619      	mov	r1, r3
 8000782:	4821      	ldr	r0, [pc, #132]	; (8000808 <HAL_UART_MspInit+0x104>)
 8000784:	f000 fa3e 	bl	8000c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000788:	e036      	b.n	80007f8 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a1f      	ldr	r2, [pc, #124]	; (800080c <HAL_UART_MspInit+0x108>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d131      	bne.n	80007f8 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <HAL_UART_MspInit+0x100>)
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	4a1a      	ldr	r2, [pc, #104]	; (8000804 <HAL_UART_MspInit+0x100>)
 800079a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800079e:	61d3      	str	r3, [r2, #28]
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <HAL_UART_MspInit+0x100>)
 80007a2:	69db      	ldr	r3, [r3, #28]
 80007a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_UART_MspInit+0x100>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a14      	ldr	r2, [pc, #80]	; (8000804 <HAL_UART_MspInit+0x100>)
 80007b2:	f043 0308 	orr.w	r3, r3, #8
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_UART_MspInit+0x100>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0308 	and.w	r3, r3, #8
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f107 0318 	add.w	r3, r7, #24
 80007d6:	4619      	mov	r1, r3
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <HAL_UART_MspInit+0x10c>)
 80007da:	f000 fa13 	bl	8000c04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ec:	f107 0318 	add.w	r3, r7, #24
 80007f0:	4619      	mov	r1, r3
 80007f2:	4807      	ldr	r0, [pc, #28]	; (8000810 <HAL_UART_MspInit+0x10c>)
 80007f4:	f000 fa06 	bl	8000c04 <HAL_GPIO_Init>
}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40013800 	.word	0x40013800
 8000804:	40021000 	.word	0x40021000
 8000808:	40010800 	.word	0x40010800
 800080c:	40004800 	.word	0x40004800
 8000810:	40010c00 	.word	0x40010c00

08000814 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000824:	2200      	movs	r2, #0
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	201e      	movs	r0, #30
 800082a:	f000 f9c0 	bl	8000bae <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800082e:	201e      	movs	r0, #30
 8000830:	f000 f9d9 	bl	8000be6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <HAL_InitTick+0xa0>)
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	4a1e      	ldr	r2, [pc, #120]	; (80008b4 <HAL_InitTick+0xa0>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	61d3      	str	r3, [r2, #28]
 8000840:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <HAL_InitTick+0xa0>)
 8000842:	69db      	ldr	r3, [r3, #28]
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800084c:	f107 0210 	add.w	r2, r7, #16
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4611      	mov	r1, r2
 8000856:	4618      	mov	r0, r3
 8000858:	f001 ff88 	bl	800276c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800085c:	f001 ff5e 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8000860:	4603      	mov	r3, r0
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000868:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <HAL_InitTick+0xa4>)
 800086a:	fba2 2303 	umull	r2, r3, r2, r3
 800086e:	0c9b      	lsrs	r3, r3, #18
 8000870:	3b01      	subs	r3, #1
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_InitTick+0xa8>)
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <HAL_InitTick+0xac>)
 8000878:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <HAL_InitTick+0xa8>)
 800087c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000880:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <HAL_InitTick+0xa8>)
 8000884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000886:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_InitTick+0xa8>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <HAL_InitTick+0xa8>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <HAL_InitTick+0xa8>)
 8000896:	f002 f86d 	bl	8002974 <HAL_TIM_Base_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d104      	bne.n	80008aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80008a0:	4806      	ldr	r0, [pc, #24]	; (80008bc <HAL_InitTick+0xa8>)
 80008a2:	f002 f892 	bl	80029ca <HAL_TIM_Base_Start_IT>
 80008a6:	4603      	mov	r3, r0
 80008a8:	e000      	b.n	80008ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3730      	adds	r7, #48	; 0x30
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000
 80008b8:	431bde83 	.word	0x431bde83
 80008bc:	200002d4 	.word	0x200002d4
 80008c0:	40000800 	.word	0x40000800

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
	...

080008f0 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80008f6:	f000 fd74 	bl	80013e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200029e8 	.word	0x200029e8

08000904 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800090a:	f000 fd6a 	bl	80013e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200029e8 	.word	0x200029e8

08000918 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <TIM4_IRQHandler+0x10>)
 800091e:	f002 f877 	bl	8002a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200002d4 	.word	0x200002d4

0800092c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <SystemInit+0x5c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <SystemInit+0x5c>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <SystemInit+0x5c>)
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	4911      	ldr	r1, [pc, #68]	; (8000988 <SystemInit+0x5c>)
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <SystemInit+0x60>)
 8000944:	4013      	ands	r3, r2
 8000946:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <SystemInit+0x5c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <SystemInit+0x5c>)
 800094e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000956:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <SystemInit+0x5c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <SystemInit+0x5c>)
 800095e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000962:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <SystemInit+0x5c>)
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <SystemInit+0x5c>)
 800096a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800096e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <SystemInit+0x5c>)
 8000972:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000976:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <SystemInit+0x64>)
 800097a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800097e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	40021000 	.word	0x40021000
 800098c:	f8ff0000 	.word	0xf8ff0000
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000994:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000996:	e003      	b.n	80009a0 <LoopCopyDataInit>

08000998 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800099a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800099c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800099e:	3104      	adds	r1, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009a0:	480a      	ldr	r0, [pc, #40]	; (80009cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009a8:	d3f6      	bcc.n	8000998 <CopyDataInit>
  ldr r2, =_sbss
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009ac:	e002      	b.n	80009b4 <LoopFillZerobss>

080009ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009b0:	f842 3b04 	str.w	r3, [r2], #4

080009b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009b8:	d3f9      	bcc.n	80009ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ba:	f7ff ffb7 	bl	800092c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009be:	f008 fb6d 	bl	800909c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c2:	f7ff fbc5 	bl	8000150 <main>
  bx lr
 80009c6:	4770      	bx	lr
  ldr r3, =_sidata
 80009c8:	08009444 	.word	0x08009444
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009d0:	20000194 	.word	0x20000194
  ldr r2, =_sbss
 80009d4:	20000194 	.word	0x20000194
  ldr r3, = _ebss
 80009d8:	20002e5c 	.word	0x20002e5c

080009dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC1_2_IRQHandler>
	...

080009e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_Init+0x28>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_Init+0x28>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 f8d1 	bl	8000b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f6:	200f      	movs	r0, #15
 80009f8:	f7ff ff0c 	bl	8000814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fc:	f7ff fdee 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40022000 	.word	0x40022000

08000a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x1c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x20>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a03      	ldr	r2, [pc, #12]	; (8000a2c <HAL_IncTick+0x20>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000314 	.word	0x20000314

08000a30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b02      	ldr	r3, [pc, #8]	; (8000a40 <HAL_GetTick+0x10>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	20000314 	.word	0x20000314

08000a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a76:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	f003 0307 	and.w	r3, r3, #7
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db0b      	blt.n	8000ad2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	f003 021f 	and.w	r2, r3, #31
 8000ac0:	4906      	ldr	r1, [pc, #24]	; (8000adc <__NVIC_EnableIRQ+0x34>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	2001      	movs	r0, #1
 8000aca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	; (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	; (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff ff4f 	bl	8000a44 <__NVIC_SetPriorityGrouping>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
 8000bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc0:	f7ff ff64 	bl	8000a8c <__NVIC_GetPriorityGrouping>
 8000bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	68b9      	ldr	r1, [r7, #8]
 8000bca:	6978      	ldr	r0, [r7, #20]
 8000bcc:	f7ff ffb2 	bl	8000b34 <NVIC_EncodePriority>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff81 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff57 	bl	8000aa8 <__NVIC_EnableIRQ>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b08b      	sub	sp, #44	; 0x2c
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c16:	e169      	b.n	8000eec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f040 8158 	bne.w	8000ee6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	4a9a      	ldr	r2, [pc, #616]	; (8000ea4 <HAL_GPIO_Init+0x2a0>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d05e      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c40:	4a98      	ldr	r2, [pc, #608]	; (8000ea4 <HAL_GPIO_Init+0x2a0>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d875      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c46:	4a98      	ldr	r2, [pc, #608]	; (8000ea8 <HAL_GPIO_Init+0x2a4>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d058      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c4c:	4a96      	ldr	r2, [pc, #600]	; (8000ea8 <HAL_GPIO_Init+0x2a4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d86f      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c52:	4a96      	ldr	r2, [pc, #600]	; (8000eac <HAL_GPIO_Init+0x2a8>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d052      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c58:	4a94      	ldr	r2, [pc, #592]	; (8000eac <HAL_GPIO_Init+0x2a8>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d869      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c5e:	4a94      	ldr	r2, [pc, #592]	; (8000eb0 <HAL_GPIO_Init+0x2ac>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d04c      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c64:	4a92      	ldr	r2, [pc, #584]	; (8000eb0 <HAL_GPIO_Init+0x2ac>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d863      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c6a:	4a92      	ldr	r2, [pc, #584]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d046      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c70:	4a90      	ldr	r2, [pc, #576]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d85d      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c76:	2b12      	cmp	r3, #18
 8000c78:	d82a      	bhi.n	8000cd0 <HAL_GPIO_Init+0xcc>
 8000c7a:	2b12      	cmp	r3, #18
 8000c7c:	d859      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c7e:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <HAL_GPIO_Init+0x80>)
 8000c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c84:	08000cff 	.word	0x08000cff
 8000c88:	08000cd9 	.word	0x08000cd9
 8000c8c:	08000ceb 	.word	0x08000ceb
 8000c90:	08000d2d 	.word	0x08000d2d
 8000c94:	08000d33 	.word	0x08000d33
 8000c98:	08000d33 	.word	0x08000d33
 8000c9c:	08000d33 	.word	0x08000d33
 8000ca0:	08000d33 	.word	0x08000d33
 8000ca4:	08000d33 	.word	0x08000d33
 8000ca8:	08000d33 	.word	0x08000d33
 8000cac:	08000d33 	.word	0x08000d33
 8000cb0:	08000d33 	.word	0x08000d33
 8000cb4:	08000d33 	.word	0x08000d33
 8000cb8:	08000d33 	.word	0x08000d33
 8000cbc:	08000d33 	.word	0x08000d33
 8000cc0:	08000d33 	.word	0x08000d33
 8000cc4:	08000d33 	.word	0x08000d33
 8000cc8:	08000ce1 	.word	0x08000ce1
 8000ccc:	08000cf5 	.word	0x08000cf5
 8000cd0:	4a79      	ldr	r2, [pc, #484]	; (8000eb8 <HAL_GPIO_Init+0x2b4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d013      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cd6:	e02c      	b.n	8000d32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	623b      	str	r3, [r7, #32]
          break;
 8000cde:	e029      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	623b      	str	r3, [r7, #32]
          break;
 8000ce8:	e024      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	3308      	adds	r3, #8
 8000cf0:	623b      	str	r3, [r7, #32]
          break;
 8000cf2:	e01f      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	330c      	adds	r3, #12
 8000cfa:	623b      	str	r3, [r7, #32]
          break;
 8000cfc:	e01a      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d102      	bne.n	8000d0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d06:	2304      	movs	r3, #4
 8000d08:	623b      	str	r3, [r7, #32]
          break;
 8000d0a:	e013      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d105      	bne.n	8000d20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d14:	2308      	movs	r3, #8
 8000d16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69fa      	ldr	r2, [r7, #28]
 8000d1c:	611a      	str	r2, [r3, #16]
          break;
 8000d1e:	e009      	b.n	8000d34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d20:	2308      	movs	r3, #8
 8000d22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	615a      	str	r2, [r3, #20]
          break;
 8000d2a:	e003      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
          break;
 8000d30:	e000      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          break;
 8000d32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2bff      	cmp	r3, #255	; 0xff
 8000d38:	d801      	bhi.n	8000d3e <HAL_GPIO_Init+0x13a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	e001      	b.n	8000d42 <HAL_GPIO_Init+0x13e>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3304      	adds	r3, #4
 8000d42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	2bff      	cmp	r3, #255	; 0xff
 8000d48:	d802      	bhi.n	8000d50 <HAL_GPIO_Init+0x14c>
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	e002      	b.n	8000d56 <HAL_GPIO_Init+0x152>
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	3b08      	subs	r3, #8
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	210f      	movs	r1, #15
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	401a      	ands	r2, r3
 8000d68:	6a39      	ldr	r1, [r7, #32]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	431a      	orrs	r2, r3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 80b1 	beq.w	8000ee6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d84:	4b4d      	ldr	r3, [pc, #308]	; (8000ebc <HAL_GPIO_Init+0x2b8>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a4c      	ldr	r2, [pc, #304]	; (8000ebc <HAL_GPIO_Init+0x2b8>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b4a      	ldr	r3, [pc, #296]	; (8000ebc <HAL_GPIO_Init+0x2b8>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d9c:	4a48      	ldr	r2, [pc, #288]	; (8000ec0 <HAL_GPIO_Init+0x2bc>)
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	089b      	lsrs	r3, r3, #2
 8000da2:	3302      	adds	r3, #2
 8000da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a40      	ldr	r2, [pc, #256]	; (8000ec4 <HAL_GPIO_Init+0x2c0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d013      	beq.n	8000df0 <HAL_GPIO_Init+0x1ec>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a3f      	ldr	r2, [pc, #252]	; (8000ec8 <HAL_GPIO_Init+0x2c4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d00d      	beq.n	8000dec <HAL_GPIO_Init+0x1e8>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a3e      	ldr	r2, [pc, #248]	; (8000ecc <HAL_GPIO_Init+0x2c8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d007      	beq.n	8000de8 <HAL_GPIO_Init+0x1e4>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a3d      	ldr	r2, [pc, #244]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d101      	bne.n	8000de4 <HAL_GPIO_Init+0x1e0>
 8000de0:	2303      	movs	r3, #3
 8000de2:	e006      	b.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000de4:	2304      	movs	r3, #4
 8000de6:	e004      	b.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000de8:	2302      	movs	r3, #2
 8000dea:	e002      	b.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000dec:	2301      	movs	r3, #1
 8000dee:	e000      	b.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000df0:	2300      	movs	r3, #0
 8000df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000df4:	f002 0203 	and.w	r2, r2, #3
 8000df8:	0092      	lsls	r2, r2, #2
 8000dfa:	4093      	lsls	r3, r2
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e02:	492f      	ldr	r1, [pc, #188]	; (8000ec0 <HAL_GPIO_Init+0x2bc>)
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d006      	beq.n	8000e2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	492c      	ldr	r1, [pc, #176]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	4928      	ldr	r1, [pc, #160]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d006      	beq.n	8000e52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	4922      	ldr	r1, [pc, #136]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
 8000e50:	e006      	b.n	8000e60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	491e      	ldr	r1, [pc, #120]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d006      	beq.n	8000e7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	4918      	ldr	r1, [pc, #96]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	608b      	str	r3, [r1, #8]
 8000e78:	e006      	b.n	8000e88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	4914      	ldr	r1, [pc, #80]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d021      	beq.n	8000ed8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	490e      	ldr	r1, [pc, #56]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	60cb      	str	r3, [r1, #12]
 8000ea0:	e021      	b.n	8000ee6 <HAL_GPIO_Init+0x2e2>
 8000ea2:	bf00      	nop
 8000ea4:	10320000 	.word	0x10320000
 8000ea8:	10310000 	.word	0x10310000
 8000eac:	10220000 	.word	0x10220000
 8000eb0:	10210000 	.word	0x10210000
 8000eb4:	10120000 	.word	0x10120000
 8000eb8:	10110000 	.word	0x10110000
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	40010c00 	.word	0x40010c00
 8000ecc:	40011000 	.word	0x40011000
 8000ed0:	40011400 	.word	0x40011400
 8000ed4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_GPIO_Init+0x304>)
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	4909      	ldr	r1, [pc, #36]	; (8000f08 <HAL_GPIO_Init+0x304>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	3301      	adds	r3, #1
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f47f ae8e 	bne.w	8000c18 <HAL_GPIO_Init+0x14>
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	372c      	adds	r7, #44	; 0x2c
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	40010400 	.word	0x40010400

08000f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f1c:	787b      	ldrb	r3, [r7, #1]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f22:	887a      	ldrh	r2, [r7, #2]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f28:	e003      	b.n	8000f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	041a      	lsls	r2, r3, #16
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	611a      	str	r2, [r3, #16]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f54:	887a      	ldrh	r2, [r7, #2]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000f5a:	e002      	b.n	8000f62 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f5c:	887a      	ldrh	r2, [r7, #2]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	611a      	str	r2, [r3, #16]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e11b      	b.n	80011b6 <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d106      	bne.n	8000f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff fb5a 	bl	800064c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2224      	movs	r2, #36	; 0x24
 8000f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0201 	bic.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fb0:	f001 fbb4 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8000fb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	4a81      	ldr	r2, [pc, #516]	; (80011c0 <HAL_I2C_Init+0x254>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d807      	bhi.n	8000fd0 <HAL_I2C_Init+0x64>
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4a80      	ldr	r2, [pc, #512]	; (80011c4 <HAL_I2C_Init+0x258>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	bf94      	ite	ls
 8000fc8:	2301      	movls	r3, #1
 8000fca:	2300      	movhi	r3, #0
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	e006      	b.n	8000fde <HAL_I2C_Init+0x72>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4a7d      	ldr	r2, [pc, #500]	; (80011c8 <HAL_I2C_Init+0x25c>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	bf94      	ite	ls
 8000fd8:	2301      	movls	r3, #1
 8000fda:	2300      	movhi	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e0e7      	b.n	80011b6 <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4a78      	ldr	r2, [pc, #480]	; (80011cc <HAL_I2C_Init+0x260>)
 8000fea:	fba2 2303 	umull	r2, r3, r2, r3
 8000fee:	0c9b      	lsrs	r3, r3, #18
 8000ff0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	430a      	orrs	r2, r1
 8001004:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	4a6a      	ldr	r2, [pc, #424]	; (80011c0 <HAL_I2C_Init+0x254>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d802      	bhi.n	8001020 <HAL_I2C_Init+0xb4>
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	3301      	adds	r3, #1
 800101e:	e009      	b.n	8001034 <HAL_I2C_Init+0xc8>
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001026:	fb02 f303 	mul.w	r3, r2, r3
 800102a:	4a69      	ldr	r2, [pc, #420]	; (80011d0 <HAL_I2C_Init+0x264>)
 800102c:	fba2 2303 	umull	r2, r3, r2, r3
 8001030:	099b      	lsrs	r3, r3, #6
 8001032:	3301      	adds	r3, #1
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	430b      	orrs	r3, r1
 800103a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001046:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	495c      	ldr	r1, [pc, #368]	; (80011c0 <HAL_I2C_Init+0x254>)
 8001050:	428b      	cmp	r3, r1
 8001052:	d819      	bhi.n	8001088 <HAL_I2C_Init+0x11c>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	1e59      	subs	r1, r3, #1
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001062:	1c59      	adds	r1, r3, #1
 8001064:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001068:	400b      	ands	r3, r1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00a      	beq.n	8001084 <HAL_I2C_Init+0x118>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	1e59      	subs	r1, r3, #1
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fbb1 f3f3 	udiv	r3, r1, r3
 800107c:	3301      	adds	r3, #1
 800107e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001082:	e051      	b.n	8001128 <HAL_I2C_Init+0x1bc>
 8001084:	2304      	movs	r3, #4
 8001086:	e04f      	b.n	8001128 <HAL_I2C_Init+0x1bc>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d111      	bne.n	80010b4 <HAL_I2C_Init+0x148>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	1e58      	subs	r0, r3, #1
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6859      	ldr	r1, [r3, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	440b      	add	r3, r1
 800109e:	fbb0 f3f3 	udiv	r3, r0, r3
 80010a2:	3301      	adds	r3, #1
 80010a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bf0c      	ite	eq
 80010ac:	2301      	moveq	r3, #1
 80010ae:	2300      	movne	r3, #0
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	e012      	b.n	80010da <HAL_I2C_Init+0x16e>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	1e58      	subs	r0, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6859      	ldr	r1, [r3, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	0099      	lsls	r1, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ca:	3301      	adds	r3, #1
 80010cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	bf0c      	ite	eq
 80010d4:	2301      	moveq	r3, #1
 80010d6:	2300      	movne	r3, #0
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_I2C_Init+0x176>
 80010de:	2301      	movs	r3, #1
 80010e0:	e022      	b.n	8001128 <HAL_I2C_Init+0x1bc>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10e      	bne.n	8001108 <HAL_I2C_Init+0x19c>
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1e58      	subs	r0, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6859      	ldr	r1, [r3, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	440b      	add	r3, r1
 80010f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80010fc:	3301      	adds	r3, #1
 80010fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001106:	e00f      	b.n	8001128 <HAL_I2C_Init+0x1bc>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	1e58      	subs	r0, r3, #1
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6859      	ldr	r1, [r3, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	0099      	lsls	r1, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	fbb0 f3f3 	udiv	r3, r0, r3
 800111e:	3301      	adds	r3, #1
 8001120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001124:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	6809      	ldr	r1, [r1, #0]
 800112c:	4313      	orrs	r3, r2
 800112e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69da      	ldr	r2, [r3, #28]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	430a      	orrs	r2, r1
 800114a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001156:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	6911      	ldr	r1, [r2, #16]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68d2      	ldr	r2, [r2, #12]
 8001162:	4311      	orrs	r1, r2
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	6812      	ldr	r2, [r2, #0]
 8001168:	430b      	orrs	r3, r1
 800116a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695a      	ldr	r2, [r3, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	431a      	orrs	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0201 	orr.w	r2, r2, #1
 8001196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2220      	movs	r2, #32
 80011a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	000186a0 	.word	0x000186a0
 80011c4:	001e847f 	.word	0x001e847f
 80011c8:	003d08ff 	.word	0x003d08ff
 80011cc:	431bde83 	.word	0x431bde83
 80011d0:	10624dd3 	.word	0x10624dd3

080011d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d6:	b08b      	sub	sp, #44	; 0x2c
 80011d8:	af06      	add	r7, sp, #24
 80011da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e0d3      	b.n	800138e <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d106      	bne.n	8001200 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f007 fcd6 	bl	8008bac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2203      	movs	r2, #3
 8001204:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f002 f88c 	bl	800332a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	687e      	ldr	r6, [r7, #4]
 800121a:	466d      	mov	r5, sp
 800121c:	f106 0410 	add.w	r4, r6, #16
 8001220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001224:	6823      	ldr	r3, [r4, #0]
 8001226:	602b      	str	r3, [r5, #0]
 8001228:	1d33      	adds	r3, r6, #4
 800122a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800122c:	6838      	ldr	r0, [r7, #0]
 800122e:	f002 f855 	bl	80032dc <USB_CoreInit>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2202      	movs	r2, #2
 800123c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e0a4      	b.n	800138e <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f002 f889 	bl	8003362 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e035      	b.n	80012c2 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	015b      	lsls	r3, r3, #5
 800125c:	4413      	add	r3, r2
 800125e:	3329      	adds	r3, #41	; 0x29
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	015b      	lsls	r3, r3, #5
 800126a:	4413      	add	r3, r2
 800126c:	3328      	adds	r3, #40	; 0x28
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	b291      	uxth	r1, r2
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	015b      	lsls	r3, r3, #5
 800127c:	4413      	add	r3, r2
 800127e:	3336      	adds	r3, #54	; 0x36
 8001280:	460a      	mov	r2, r1
 8001282:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	015b      	lsls	r3, r3, #5
 800128a:	4413      	add	r3, r2
 800128c:	332b      	adds	r3, #43	; 0x2b
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	015b      	lsls	r3, r3, #5
 8001298:	4413      	add	r3, r2
 800129a:	3338      	adds	r3, #56	; 0x38
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	015b      	lsls	r3, r3, #5
 80012a6:	4413      	add	r3, r2
 80012a8:	333c      	adds	r3, #60	; 0x3c
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	3302      	adds	r3, #2
 80012b4:	015b      	lsls	r3, r3, #5
 80012b6:	4413      	add	r3, r2
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	3301      	adds	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3c4      	bcc.n	8001256 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	e031      	b.n	8001336 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	015b      	lsls	r3, r3, #5
 80012d8:	4413      	add	r3, r2
 80012da:	f203 1329 	addw	r3, r3, #297	; 0x129
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	015b      	lsls	r3, r3, #5
 80012e8:	4413      	add	r3, r2
 80012ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	015b      	lsls	r3, r3, #5
 80012f8:	4413      	add	r3, r2
 80012fa:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	015b      	lsls	r3, r3, #5
 8001308:	4413      	add	r3, r2
 800130a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	015b      	lsls	r3, r3, #5
 8001318:	4413      	add	r3, r2
 800131a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	330a      	adds	r3, #10
 8001328:	015b      	lsls	r3, r3, #5
 800132a:	4413      	add	r3, r2
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	3301      	adds	r3, #1
 8001334:	73fb      	strb	r3, [r7, #15]
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	429a      	cmp	r2, r3
 800133e:	d3c8      	bcc.n	80012d2 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	687e      	ldr	r6, [r7, #4]
 8001348:	466d      	mov	r5, sp
 800134a:	f106 0410 	add.w	r4, r6, #16
 800134e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001352:	6823      	ldr	r3, [r4, #0]
 8001354:	602b      	str	r3, [r5, #0]
 8001356:	1d33      	adds	r3, r6, #4
 8001358:	cb0e      	ldmia	r3, {r1, r2, r3}
 800135a:	6838      	ldr	r0, [r7, #0]
 800135c:	f002 f80d 	bl	800337a <USB_DevInit>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2202      	movs	r2, #2
 800136a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00d      	b.n	800138e <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f003 f84b 	bl	8004422 <USB_DevDisconnect>

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001396 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_PCD_Start+0x16>
 80013a8:	2302      	movs	r3, #2
 80013aa:	e016      	b.n	80013da <HAL_PCD_Start+0x44>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80013b4:	2101      	movs	r1, #1
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f007 fe39 	bl	800902e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 f824 	bl	800440e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 ff96 	bl	80032fc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f003 f821 	bl	8004436 <USB_ReadInterrupts>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013fe:	d102      	bne.n	8001406 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 fadf 	bl	80019c4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f003 f813 	bl	8004436 <USB_ReadInterrupts>
 8001410:	4603      	mov	r3, r0
 8001412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800141a:	d112      	bne.n	8001442 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001424:	b29a      	uxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800142e:	b292      	uxth	r2, r2
 8001430:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f007 fc36 	bl	8008ca6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800143a:	2100      	movs	r1, #0
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f8de 	bl	80015fe <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fff5 	bl	8004436 <USB_ReadInterrupts>
 800144c:	4603      	mov	r3, r0
 800144e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001456:	d10b      	bne.n	8001470 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001460:	b29a      	uxth	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800146a:	b292      	uxth	r2, r2
 800146c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f002 ffde 	bl	8004436 <USB_ReadInterrupts>
 800147a:	4603      	mov	r3, r0
 800147c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001484:	d10b      	bne.n	800149e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800148e:	b29a      	uxth	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001498:	b292      	uxth	r2, r2
 800149a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 ffc7 	bl	8004436 <USB_ReadInterrupts>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014b2:	d126      	bne.n	8001502 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014bc:	b29a      	uxth	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0204 	bic.w	r2, r2, #4
 80014c6:	b292      	uxth	r2, r2
 80014c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0208 	bic.w	r2, r2, #8
 80014de:	b292      	uxth	r2, r2
 80014e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f007 fc17 	bl	8008d18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014fc:	b292      	uxth	r2, r2
 80014fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f002 ff95 	bl	8004436 <USB_ReadInterrupts>
 800150c:	4603      	mov	r3, r0
 800150e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001516:	d13d      	bne.n	8001594 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001520:	b29a      	uxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0208 	orr.w	r2, r2, #8
 800152a:	b292      	uxth	r2, r2
 800152c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001538:	b29a      	uxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001542:	b292      	uxth	r2, r2
 8001544:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001550:	b29a      	uxth	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0204 	orr.w	r2, r2, #4
 800155a:	b292      	uxth	r2, r2
 800155c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f002 ff66 	bl	8004436 <USB_ReadInterrupts>
 800156a:	4603      	mov	r3, r0
 800156c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001574:	d10b      	bne.n	800158e <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800157e:	b29a      	uxth	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001588:	b292      	uxth	r2, r2
 800158a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f007 fba8 	bl	8008ce4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f002 ff4c 	bl	8004436 <USB_ReadInterrupts>
 800159e:	4603      	mov	r3, r0
 80015a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a8:	d10e      	bne.n	80015c8 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015bc:	b292      	uxth	r2, r2
 80015be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f007 fb61 	bl	8008c8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f002 ff32 	bl	8004436 <USB_ReadInterrupts>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015dc:	d10b      	bne.n	80015f6 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015f0:	b292      	uxth	r2, r2
 80015f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <HAL_PCD_SetAddress+0x1a>
 8001614:	2302      	movs	r3, #2
 8001616:	e013      	b.n	8001640 <HAL_PCD_SetAddress+0x42>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	78fa      	ldrb	r2, [r7, #3]
 8001624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	78fa      	ldrb	r2, [r7, #3]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f002 fed9 	bl	80043e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	4608      	mov	r0, r1
 8001652:	4611      	mov	r1, r2
 8001654:	461a      	mov	r2, r3
 8001656:	4603      	mov	r3, r0
 8001658:	70fb      	strb	r3, [r7, #3]
 800165a:	460b      	mov	r3, r1
 800165c:	803b      	strh	r3, [r7, #0]
 800165e:	4613      	mov	r3, r2
 8001660:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001666:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800166a:	2b00      	cmp	r3, #0
 800166c:	da0b      	bge.n	8001686 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	015b      	lsls	r3, r3, #5
 8001676:	3328      	adds	r3, #40	; 0x28
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2201      	movs	r2, #1
 8001682:	705a      	strb	r2, [r3, #1]
 8001684:	e00b      	b.n	800169e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	015b      	lsls	r3, r3, #5
 800168e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016aa:	883a      	ldrh	r2, [r7, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	78ba      	ldrb	r2, [r7, #2]
 80016b4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	785b      	ldrb	r3, [r3, #1]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d004      	beq.n	80016c8 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016c8:	78bb      	ldrb	r3, [r7, #2]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d102      	bne.n	80016d4 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_PCD_EP_Open+0x9a>
 80016de:	2302      	movs	r3, #2
 80016e0:	e00e      	b.n	8001700 <HAL_PCD_EP_Open+0xb8>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68f9      	ldr	r1, [r7, #12]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f001 fe67 	bl	80033c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80016fe:	7afb      	ldrb	r3, [r7, #11]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001718:	2b00      	cmp	r3, #0
 800171a:	da0b      	bge.n	8001734 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	015b      	lsls	r3, r3, #5
 8001724:	3328      	adds	r3, #40	; 0x28
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	705a      	strb	r2, [r3, #1]
 8001732:	e00b      	b.n	800174c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	015b      	lsls	r3, r3, #5
 800173c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	b2da      	uxtb	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_PCD_EP_Close+0x5e>
 8001762:	2302      	movs	r3, #2
 8001764:	e00e      	b.n	8001784 <HAL_PCD_EP_Close+0x7c>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68f9      	ldr	r1, [r7, #12]
 8001774:	4618      	mov	r0, r3
 8001776:	f002 f913 	bl	80039a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	460b      	mov	r3, r1
 800179a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800179c:	7afb      	ldrb	r3, [r7, #11]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	015b      	lsls	r3, r3, #5
 80017a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2200      	movs	r2, #0
 80017c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017c6:	7afb      	ldrb	r3, [r7, #11]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017d2:	7afb      	ldrb	r3, [r7, #11]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d106      	bne.n	80017ea <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6979      	ldr	r1, [r7, #20]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 fa72 	bl	8003ccc <USB_EPStartXfer>
 80017e8:	e005      	b.n	80017f6 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6979      	ldr	r1, [r7, #20]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 fa6b 	bl	8003ccc <USB_EPStartXfer>
  }

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	460b      	mov	r3, r1
 800180e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001810:	7afb      	ldrb	r3, [r7, #11]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	015b      	lsls	r3, r3, #5
 8001818:	3328      	adds	r3, #40	; 0x28
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4413      	add	r3, r2
 800181e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2201      	movs	r2, #1
 8001836:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001838:	7afb      	ldrb	r3, [r7, #11]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	b2da      	uxtb	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001844:	7afb      	ldrb	r3, [r7, #11]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	2b00      	cmp	r3, #0
 800184c:	d106      	bne.n	800185c <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6979      	ldr	r1, [r7, #20]
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fa39 	bl	8003ccc <USB_EPStartXfer>
 800185a:	e005      	b.n	8001868 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6979      	ldr	r1, [r7, #20]
 8001862:	4618      	mov	r0, r3
 8001864:	f002 fa32 	bl	8003ccc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	f003 0207 	and.w	r2, r3, #7
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	d901      	bls.n	8001890 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e046      	b.n	800191e <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001894:	2b00      	cmp	r3, #0
 8001896:	da0b      	bge.n	80018b0 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	015b      	lsls	r3, r3, #5
 80018a0:	3328      	adds	r3, #40	; 0x28
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2201      	movs	r2, #1
 80018ac:	705a      	strb	r2, [r3, #1]
 80018ae:	e009      	b.n	80018c4 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	015b      	lsls	r3, r3, #5
 80018b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_PCD_EP_SetStall+0x72>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e01c      	b.n	800191e <HAL_PCD_EP_SetStall+0xac>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68f9      	ldr	r1, [r7, #12]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 fca2 	bl	800423c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d108      	bne.n	8001914 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800190c:	4619      	mov	r1, r3
 800190e:	4610      	mov	r0, r2
 8001910:	f002 fda0 	bl	8004454 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	f003 020f 	and.w	r2, r3, #15
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	d901      	bls.n	8001944 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e03a      	b.n	80019ba <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001948:	2b00      	cmp	r3, #0
 800194a:	da0b      	bge.n	8001964 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	015b      	lsls	r3, r3, #5
 8001954:	3328      	adds	r3, #40	; 0x28
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2201      	movs	r2, #1
 8001960:	705a      	strb	r2, [r3, #1]
 8001962:	e00b      	b.n	800197c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	015b      	lsls	r3, r3, #5
 800196c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	b2da      	uxtb	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_PCD_EP_ClrStall+0x76>
 8001998:	2302      	movs	r3, #2
 800199a:	e00e      	b.n	80019ba <HAL_PCD_EP_ClrStall+0x94>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68f9      	ldr	r1, [r7, #12]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 fc88 	bl	80042c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80019cc:	e287      	b.n	8001ede <PCD_EP_ISR_Handler+0x51a>
  {
    wIstr = hpcd->Instance->ISTR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019d6:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80019d8:	8afb      	ldrh	r3, [r7, #22]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80019e2:	7d7b      	ldrb	r3, [r7, #21]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f040 8142 	bne.w	8001c6e <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80019ea:	8afb      	ldrh	r3, [r7, #22]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d151      	bne.n	8001a98 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a04:	b29c      	uxth	r4, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3328      	adds	r3, #40	; 0x28
 8001a1a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	3302      	adds	r3, #2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	441a      	add	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a56:	2100      	movs	r1, #0
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f007 f8ff 	bl	8008c5c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8239 	beq.w	8001ede <PCD_EP_ISR_Handler+0x51a>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f040 8234 	bne.w	8001ede <PCD_EP_ISR_Handler+0x51a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	b292      	uxth	r2, r2
 8001a8a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a96:	e222      	b.n	8001ede <PCD_EP_ISR_Handler+0x51a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a9e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001aa8:	8a7b      	ldrh	r3, [r7, #18]
 8001aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d033      	beq.n	8001b1a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3306      	adds	r3, #6
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	f002 fcff 	bl	80044f4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b02:	4013      	ands	r3, r2
 8001b04:	b29c      	uxth	r4, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001b0e:	b292      	uxth	r2, r2
 8001b10:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f007 f878 	bl	8008c08 <HAL_PCD_SetupStageCallback>
 8001b18:	e1e1      	b.n	8001ede <PCD_EP_ISR_Handler+0x51a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f280 81dd 	bge.w	8001ede <PCD_EP_ISR_Handler+0x51a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b30:	4013      	ands	r3, r2
 8001b32:	b29c      	uxth	r4, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001b3c:	b292      	uxth	r2, r2
 8001b3e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	3306      	adds	r3, #6
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d019      	beq.n	8001ba8 <PCD_EP_ISR_Handler+0x1e4>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d015      	beq.n	8001ba8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6959      	ldr	r1, [r3, #20]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	f002 fcb1 	bl	80044f4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	441a      	add	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f007 f842 	bl	8008c2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	461c      	mov	r4, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	441c      	add	r4, r3
 8001bba:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001bbe:	461c      	mov	r4, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10e      	bne.n	8001be6 <PCD_EP_ISR_Handler+0x222>
 8001bc8:	8823      	ldrh	r3, [r4, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	8023      	strh	r3, [r4, #0]
 8001bd4:	8823      	ldrh	r3, [r4, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	8023      	strh	r3, [r4, #0]
 8001be4:	e02d      	b.n	8001c42 <PCD_EP_ISR_Handler+0x27e>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	2b3e      	cmp	r3, #62	; 0x3e
 8001bec:	d812      	bhi.n	8001c14 <PCD_EP_ISR_Handler+0x250>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	085b      	lsrs	r3, r3, #1
 8001bf4:	61bb      	str	r3, [r7, #24]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <PCD_EP_ISR_Handler+0x244>
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	3301      	adds	r3, #1
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	029b      	lsls	r3, r3, #10
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	8023      	strh	r3, [r4, #0]
 8001c12:	e016      	b.n	8001c42 <PCD_EP_ISR_Handler+0x27e>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	095b      	lsrs	r3, r3, #5
 8001c1a:	61bb      	str	r3, [r7, #24]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	f003 031f 	and.w	r3, r3, #31
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <PCD_EP_ISR_Handler+0x26a>
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	029b      	lsls	r3, r3, #10
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c52:	b29c      	uxth	r4, r3
 8001c54:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001c58:	b29c      	uxth	r4, r3
 8001c5a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001c5e:	b29c      	uxth	r4, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b97      	ldr	r3, [pc, #604]	; (8001ec4 <PCD_EP_ISR_Handler+0x500>)
 8001c66:	4323      	orrs	r3, r4
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	8013      	strh	r3, [r2, #0]
 8001c6c:	e137      	b.n	8001ede <PCD_EP_ISR_Handler+0x51a>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	7d7b      	ldrb	r3, [r7, #21]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f280 80d1 	bge.w	8001e2a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	7d7b      	ldrb	r3, [r7, #21]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	b29c      	uxth	r4, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	7d7b      	ldrb	r3, [r7, #21]
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001cb0:	b292      	uxth	r2, r2
 8001cb2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001cb4:	7d7b      	ldrb	r3, [r7, #21]
 8001cb6:	015b      	lsls	r3, r3, #5
 8001cb8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	7b1b      	ldrb	r3, [r3, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d121      	bne.n	8001d0e <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	3306      	adds	r3, #6
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cf2:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001cf4:	8bfb      	ldrh	r3, [r7, #30]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d072      	beq.n	8001de0 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6959      	ldr	r1, [r3, #20]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	88da      	ldrh	r2, [r3, #6]
 8001d06:	8bfb      	ldrh	r3, [r7, #30]
 8001d08:	f002 fbf4 	bl	80044f4 <USB_ReadPMA>
 8001d0c:	e068      	b.n	8001de0 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d021      	beq.n	8001d6c <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d50:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001d52:	8bfb      	ldrh	r3, [r7, #30]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d02a      	beq.n	8001dae <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6959      	ldr	r1, [r3, #20]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	891a      	ldrh	r2, [r3, #8]
 8001d64:	8bfb      	ldrh	r3, [r7, #30]
 8001d66:	f002 fbc5 	bl	80044f4 <USB_ReadPMA>
 8001d6a:	e020      	b.n	8001dae <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	3306      	adds	r3, #6
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d94:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001d96:	8bfb      	ldrh	r3, [r7, #30]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6959      	ldr	r1, [r3, #20]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	895a      	ldrh	r2, [r3, #10]
 8001da8:	8bfb      	ldrh	r3, [r7, #30]
 8001daa:	f002 fba3 	bl	80044f4 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc8:	b29c      	uxth	r4, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	441a      	add	r2, r3
 8001dd8:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <PCD_EP_ISR_Handler+0x504>)
 8001dda:	4323      	orrs	r3, r4
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	69da      	ldr	r2, [r3, #28]
 8001de4:	8bfb      	ldrh	r3, [r7, #30]
 8001de6:	441a      	add	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	8bfb      	ldrh	r3, [r7, #30]
 8001df2:	441a      	add	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <PCD_EP_ISR_Handler+0x446>
 8001e00:	8bfa      	ldrh	r2, [r7, #30]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d206      	bcs.n	8001e18 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f006 ff0b 	bl	8008c2c <HAL_PCD_DataOutStageCallback>
 8001e16:	e008      	b.n	8001e2a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	7819      	ldrb	r1, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	695a      	ldr	r2, [r3, #20]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff fcb1 	bl	800178c <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e2a:	8a7b      	ldrh	r3, [r7, #18]
 8001e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d054      	beq.n	8001ede <PCD_EP_ISR_Handler+0x51a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e34:	7d7b      	ldrb	r3, [r7, #21]
 8001e36:	015b      	lsls	r3, r3, #5
 8001e38:	3328      	adds	r3, #40	; 0x28
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	7d7b      	ldrb	r3, [r7, #21]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e58:	b29c      	uxth	r4, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	7d7b      	ldrb	r3, [r7, #21]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	441a      	add	r2, r3
 8001e66:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	3302      	adds	r3, #2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	441a      	add	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10b      	bne.n	8001ecc <PCD_EP_ISR_Handler+0x508>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f006 fece 	bl	8008c5c <HAL_PCD_DataInStageCallback>
 8001ec0:	e00d      	b.n	8001ede <PCD_EP_ISR_Handler+0x51a>
 8001ec2:	bf00      	nop
 8001ec4:	ffff8080 	.word	0xffff8080
 8001ec8:	ffff80c0 	.word	0xffff80c0
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	7819      	ldrb	r1, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	695a      	ldr	r2, [r3, #20]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff fc91 	bl	8001800 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	b21b      	sxth	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f6ff ad6f 	blt.w	80019ce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}
 8001efa:	bf00      	nop

08001efc <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	817b      	strh	r3, [r7, #10]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001f0e:	897b      	ldrh	r3, [r7, #10]
 8001f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d008      	beq.n	8001f2c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	015b      	lsls	r3, r3, #5
 8001f22:	3328      	adds	r3, #40	; 0x28
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4413      	add	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	e006      	b.n	8001f3a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f2c:	897b      	ldrh	r3, [r7, #10]
 8001f2e:	015b      	lsls	r3, r3, #5
 8001f30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001f3a:	893b      	ldrh	r3, [r7, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2200      	movs	r2, #0
 8001f44:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	80da      	strh	r2, [r3, #6]
 8001f4e:	e00b      	b.n	8001f68 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2201      	movs	r2, #1
 8001f54:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	0c1b      	lsrs	r3, r3, #16
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e272      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8087 	beq.w	80020a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f94:	4b92      	ldr	r3, [pc, #584]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d00c      	beq.n	8001fba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fa0:	4b8f      	ldr	r3, [pc, #572]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d112      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x5e>
 8001fac:	4b8c      	ldr	r3, [pc, #560]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fba:	4b89      	ldr	r3, [pc, #548]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d06c      	beq.n	80020a0 <HAL_RCC_OscConfig+0x12c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d168      	bne.n	80020a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e24c      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fda:	d106      	bne.n	8001fea <HAL_RCC_OscConfig+0x76>
 8001fdc:	4b80      	ldr	r3, [pc, #512]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a7f      	ldr	r2, [pc, #508]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	e02e      	b.n	8002048 <HAL_RCC_OscConfig+0xd4>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0x98>
 8001ff2:	4b7b      	ldr	r3, [pc, #492]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a7a      	ldr	r2, [pc, #488]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b78      	ldr	r3, [pc, #480]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a77      	ldr	r2, [pc, #476]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002004:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e01d      	b.n	8002048 <HAL_RCC_OscConfig+0xd4>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0xbc>
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a71      	ldr	r2, [pc, #452]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b6f      	ldr	r3, [pc, #444]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a6e      	ldr	r2, [pc, #440]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0xd4>
 8002030:	4b6b      	ldr	r3, [pc, #428]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6a      	ldr	r2, [pc, #424]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b68      	ldr	r3, [pc, #416]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a67      	ldr	r2, [pc, #412]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002046:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d013      	beq.n	8002078 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7fe fcee 	bl	8000a30 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002058:	f7fe fcea 	bl	8000a30 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e200      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b5d      	ldr	r3, [pc, #372]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0xe4>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7fe fcda 	bl	8000a30 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002080:	f7fe fcd6 	bl	8000a30 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e1ec      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	4b53      	ldr	r3, [pc, #332]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x10c>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d063      	beq.n	8002176 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ae:	4b4c      	ldr	r3, [pc, #304]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ba:	4b49      	ldr	r3, [pc, #292]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d11c      	bne.n	8002100 <HAL_RCC_OscConfig+0x18c>
 80020c6:	4b46      	ldr	r3, [pc, #280]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d116      	bne.n	8002100 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d2:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_RCC_OscConfig+0x176>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d001      	beq.n	80020ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e1c0      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ea:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4939      	ldr	r1, [pc, #228]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fe:	e03a      	b.n	8002176 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002108:	4b36      	ldr	r3, [pc, #216]	; (80021e4 <HAL_RCC_OscConfig+0x270>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7fe fc8f 	bl	8000a30 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002116:	f7fe fc8b 	bl	8000a30 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e1a1      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002128:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002134:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4927      	ldr	r1, [pc, #156]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]
 8002148:	e015      	b.n	8002176 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214a:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <HAL_RCC_OscConfig+0x270>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7fe fc6e 	bl	8000a30 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002158:	f7fe fc6a 	bl	8000a30 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e180      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d03a      	beq.n	80021f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d019      	beq.n	80021be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_RCC_OscConfig+0x274>)
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002190:	f7fe fc4e 	bl	8000a30 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002198:	f7fe fc4a 	bl	8000a30 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e160      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021b6:	2001      	movs	r0, #1
 80021b8:	f000 fb08 	bl	80027cc <RCC_Delay>
 80021bc:	e01c      	b.n	80021f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_RCC_OscConfig+0x274>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c4:	f7fe fc34 	bl	8000a30 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ca:	e00f      	b.n	80021ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021cc:	f7fe fc30 	bl	8000a30 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d908      	bls.n	80021ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e146      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	42420000 	.word	0x42420000
 80021e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ec:	4b92      	ldr	r3, [pc, #584]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1e9      	bne.n	80021cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80a6 	beq.w	8002352 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220a:	4b8b      	ldr	r3, [pc, #556]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10d      	bne.n	8002232 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4b88      	ldr	r3, [pc, #544]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a87      	ldr	r2, [pc, #540]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002220:	61d3      	str	r3, [r2, #28]
 8002222:	4b85      	ldr	r3, [pc, #532]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222e:	2301      	movs	r3, #1
 8002230:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	4b82      	ldr	r3, [pc, #520]	; (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d118      	bne.n	8002270 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223e:	4b7f      	ldr	r3, [pc, #508]	; (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7e      	ldr	r2, [pc, #504]	; (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7fe fbf1 	bl	8000a30 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7fe fbed 	bl	8000a30 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b64      	cmp	r3, #100	; 0x64
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e103      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	4b75      	ldr	r3, [pc, #468]	; (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x312>
 8002278:	4b6f      	ldr	r3, [pc, #444]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a6e      	ldr	r2, [pc, #440]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6213      	str	r3, [r2, #32]
 8002284:	e02d      	b.n	80022e2 <HAL_RCC_OscConfig+0x36e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x334>
 800228e:	4b6a      	ldr	r3, [pc, #424]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a69      	ldr	r2, [pc, #420]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6213      	str	r3, [r2, #32]
 800229a:	4b67      	ldr	r3, [pc, #412]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4a66      	ldr	r2, [pc, #408]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	f023 0304 	bic.w	r3, r3, #4
 80022a4:	6213      	str	r3, [r2, #32]
 80022a6:	e01c      	b.n	80022e2 <HAL_RCC_OscConfig+0x36e>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d10c      	bne.n	80022ca <HAL_RCC_OscConfig+0x356>
 80022b0:	4b61      	ldr	r3, [pc, #388]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4a60      	ldr	r2, [pc, #384]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	6213      	str	r3, [r2, #32]
 80022bc:	4b5e      	ldr	r3, [pc, #376]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4a5d      	ldr	r2, [pc, #372]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6213      	str	r3, [r2, #32]
 80022c8:	e00b      	b.n	80022e2 <HAL_RCC_OscConfig+0x36e>
 80022ca:	4b5b      	ldr	r3, [pc, #364]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a5a      	ldr	r2, [pc, #360]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	6213      	str	r3, [r2, #32]
 80022d6:	4b58      	ldr	r3, [pc, #352]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4a57      	ldr	r2, [pc, #348]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d015      	beq.n	8002316 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7fe fba1 	bl	8000a30 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe fb9d 	bl	8000a30 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0b1      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	4b4b      	ldr	r3, [pc, #300]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ee      	beq.n	80022f2 <HAL_RCC_OscConfig+0x37e>
 8002314:	e014      	b.n	8002340 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002316:	f7fe fb8b 	bl	8000a30 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7fe fb87 	bl	8000a30 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	; 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e09b      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002334:	4b40      	ldr	r3, [pc, #256]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ee      	bne.n	800231e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d105      	bne.n	8002352 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002346:	4b3c      	ldr	r3, [pc, #240]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4a3b      	ldr	r2, [pc, #236]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002350:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8087 	beq.w	800246a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800235c:	4b36      	ldr	r3, [pc, #216]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d061      	beq.n	800242c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d146      	bne.n	80023fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b33      	ldr	r3, [pc, #204]	; (8002440 <HAL_RCC_OscConfig+0x4cc>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7fe fb5b 	bl	8000a30 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237e:	f7fe fb57 	bl	8000a30 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e06d      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002390:	4b29      	ldr	r3, [pc, #164]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a4:	d108      	bne.n	80023b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023a6:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4921      	ldr	r1, [pc, #132]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b8:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a19      	ldr	r1, [r3, #32]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	430b      	orrs	r3, r1
 80023ca:	491b      	ldr	r1, [pc, #108]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_RCC_OscConfig+0x4cc>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7fe fb2b 	bl	8000a30 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7fe fb27 	bl	8000a30 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e03d      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x46a>
 80023fc:	e035      	b.n	800246a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_RCC_OscConfig+0x4cc>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7fe fb14 	bl	8000a30 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fb10 	bl	8000a30 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e026      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x498>
 800242a:	e01e      	b.n	800246a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d107      	bne.n	8002444 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e019      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
 8002438:	40021000 	.word	0x40021000
 800243c:	40007000 	.word	0x40007000
 8002440:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_OscConfig+0x500>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	429a      	cmp	r2, r3
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000

08002478 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0d0      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800248c:	4b6a      	ldr	r3, [pc, #424]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d910      	bls.n	80024bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b67      	ldr	r3, [pc, #412]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 0207 	bic.w	r2, r3, #7
 80024a2:	4965      	ldr	r1, [pc, #404]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b63      	ldr	r3, [pc, #396]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0b8      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a58      	ldr	r2, [pc, #352]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ec:	4b53      	ldr	r3, [pc, #332]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4a52      	ldr	r2, [pc, #328]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f8:	4b50      	ldr	r3, [pc, #320]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	494d      	ldr	r1, [pc, #308]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d040      	beq.n	8002598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d115      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e07f      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e073      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002546:	4b3d      	ldr	r3, [pc, #244]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e06b      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002556:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f023 0203 	bic.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4936      	ldr	r1, [pc, #216]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002568:	f7fe fa62 	bl	8000a30 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7fe fa5e 	bl	8000a30 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e053      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 020c 	and.w	r2, r3, #12
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	429a      	cmp	r2, r3
 8002596:	d1eb      	bne.n	8002570 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002598:	4b27      	ldr	r3, [pc, #156]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d210      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 0207 	bic.w	r2, r3, #7
 80025ae:	4922      	ldr	r1, [pc, #136]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e032      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4916      	ldr	r1, [pc, #88]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	490e      	ldr	r1, [pc, #56]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002606:	f000 f821 	bl	800264c <HAL_RCC_GetSysClockFreq>
 800260a:	4602      	mov	r2, r0
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	490a      	ldr	r1, [pc, #40]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	5ccb      	ldrb	r3, [r1, r3]
 800261a:	fa22 f303 	lsr.w	r3, r2, r3
 800261e:	4a09      	ldr	r2, [pc, #36]	; (8002644 <HAL_RCC_ClockConfig+0x1cc>)
 8002620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_ClockConfig+0x1d0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe f8f4 	bl	8000814 <HAL_InitTick>

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40022000 	.word	0x40022000
 800263c:	40021000 	.word	0x40021000
 8002640:	080093c4 	.word	0x080093c4
 8002644:	20000000 	.word	0x20000000
 8002648:	20000004 	.word	0x20000004

0800264c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800264c:	b490      	push	{r4, r7}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002652:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002654:	1d3c      	adds	r4, r7, #4
 8002656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800265c:	f240 2301 	movw	r3, #513	; 0x201
 8002660:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002676:	4b21      	ldr	r3, [pc, #132]	; (80026fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d002      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x40>
 8002686:	2b08      	cmp	r3, #8
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x46>
 800268a:	e02b      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800268c:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <HAL_RCC_GetSysClockFreq+0xb4>)
 800268e:	623b      	str	r3, [r7, #32]
      break;
 8002690:	e02b      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	0c9b      	lsrs	r3, r3, #18
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	3328      	adds	r3, #40	; 0x28
 800269c:	443b      	add	r3, r7
 800269e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026a2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d012      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <HAL_RCC_GetSysClockFreq+0xb0>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	0c5b      	lsrs	r3, r3, #17
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	3328      	adds	r3, #40	; 0x28
 80026ba:	443b      	add	r3, r7
 80026bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026c6:	fb03 f202 	mul.w	r2, r3, r2
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
 80026d2:	e004      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d8:	fb02 f303 	mul.w	r3, r2, r3
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	623b      	str	r3, [r7, #32]
      break;
 80026e2:	e002      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026e6:	623b      	str	r3, [r7, #32]
      break;
 80026e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ea:	6a3b      	ldr	r3, [r7, #32]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3728      	adds	r7, #40	; 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc90      	pop	{r4, r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	080092d4 	.word	0x080092d4
 80026fc:	40021000 	.word	0x40021000
 8002700:	007a1200 	.word	0x007a1200
 8002704:	003d0900 	.word	0x003d0900

08002708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800270c:	4b02      	ldr	r3, [pc, #8]	; (8002718 <HAL_RCC_GetHCLKFreq+0x10>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	20000000 	.word	0x20000000

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002720:	f7ff fff2 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4903      	ldr	r1, [pc, #12]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	080093d4 	.word	0x080093d4

08002744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002748:	f7ff ffde 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	0adb      	lsrs	r3, r3, #11
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4903      	ldr	r1, [pc, #12]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	080093d4 	.word	0x080093d4

0800276c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	220f      	movs	r2, #15
 800277a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <HAL_RCC_GetClockConfig+0x58>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0203 	and.w	r2, r3, #3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <HAL_RCC_GetClockConfig+0x58>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_GetClockConfig+0x58>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80027a0:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <HAL_RCC_GetClockConfig+0x58>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	08db      	lsrs	r3, r3, #3
 80027a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_GetClockConfig+0x5c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0207 	and.w	r2, r3, #7
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40022000 	.word	0x40022000

080027cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <RCC_Delay+0x34>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <RCC_Delay+0x38>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0a5b      	lsrs	r3, r3, #9
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027e8:	bf00      	nop
  }
  while (Delay --);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1e5a      	subs	r2, r3, #1
 80027ee:	60fa      	str	r2, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f9      	bne.n	80027e8 <RCC_Delay+0x1c>
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	20000000 	.word	0x20000000
 8002804:	10624dd3 	.word	0x10624dd3

08002808 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d07d      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002824:	2300      	movs	r3, #0
 8002826:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002828:	4b4f      	ldr	r3, [pc, #316]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10d      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002834:	4b4c      	ldr	r3, [pc, #304]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	4a4b      	ldr	r2, [pc, #300]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283e:	61d3      	str	r3, [r2, #28]
 8002840:	4b49      	ldr	r3, [pc, #292]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284c:	2301      	movs	r3, #1
 800284e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	4b46      	ldr	r3, [pc, #280]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d118      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285c:	4b43      	ldr	r3, [pc, #268]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a42      	ldr	r2, [pc, #264]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002866:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002868:	f7fe f8e2 	bl	8000a30 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286e:	e008      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002870:	f7fe f8de 	bl	8000a30 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	; 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e06d      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002882:	4b3a      	ldr	r3, [pc, #232]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800288e:	4b36      	ldr	r3, [pc, #216]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002896:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d02e      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d027      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028ac:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028b6:	4b2e      	ldr	r3, [pc, #184]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028bc:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028c2:	4a29      	ldr	r2, [pc, #164]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d014      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d2:	f7fe f8ad 	bl	8000a30 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d8:	e00a      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028da:	f7fe f8a9 	bl	8000a30 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e036      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0ee      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028fc:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4917      	ldr	r1, [pc, #92]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290a:	4313      	orrs	r3, r2
 800290c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800290e:	7dfb      	ldrb	r3, [r7, #23]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	4a13      	ldr	r2, [pc, #76]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	490b      	ldr	r1, [pc, #44]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293a:	4313      	orrs	r3, r2
 800293c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800294a:	4b07      	ldr	r3, [pc, #28]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	4904      	ldr	r1, [pc, #16]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	40007000 	.word	0x40007000
 8002970:	42420440 	.word	0x42420440

08002974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e01d      	b.n	80029c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fd fe94 	bl	80006c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3304      	adds	r3, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f000 fa1c 	bl	8002df0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
 80029e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b06      	cmp	r3, #6
 80029f2:	d007      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d122      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d11b      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0202 	mvn.w	r2, #2
 8002a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f9b1 	bl	8002dba <HAL_TIM_IC_CaptureCallback>
 8002a58:	e005      	b.n	8002a66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f9a4 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f9b3 	bl	8002dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d122      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d11b      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0204 	mvn.w	r2, #4
 8002a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2202      	movs	r2, #2
 8002a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f987 	bl	8002dba <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f97a 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f989 	bl	8002dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d122      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d11b      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0208 	mvn.w	r2, #8
 8002ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2204      	movs	r2, #4
 8002aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f95d 	bl	8002dba <HAL_TIM_IC_CaptureCallback>
 8002b00:	e005      	b.n	8002b0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f950 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f95f 	bl	8002dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b10      	cmp	r3, #16
 8002b20:	d122      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d11b      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0210 	mvn.w	r2, #16
 8002b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f933 	bl	8002dba <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f926 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f935 	bl	8002dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d10e      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0201 	mvn.w	r2, #1
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fd fd0c 	bl	80005ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9e:	2b80      	cmp	r3, #128	; 0x80
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bac:	2b80      	cmp	r3, #128	; 0x80
 8002bae:	d107      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fa5d 	bl	800307a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bca:	2b40      	cmp	r3, #64	; 0x40
 8002bcc:	d10e      	bne.n	8002bec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d107      	bne.n	8002bec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f8f9 	bl	8002dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d10e      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d107      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0220 	mvn.w	r2, #32
 8002c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa28 	bl	8003068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_TIM_ConfigClockSource+0x18>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e0b3      	b.n	8002da0 <HAL_TIM_ConfigClockSource+0x180>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c70:	d03e      	beq.n	8002cf0 <HAL_TIM_ConfigClockSource+0xd0>
 8002c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c76:	f200 8087 	bhi.w	8002d88 <HAL_TIM_ConfigClockSource+0x168>
 8002c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7e:	f000 8085 	beq.w	8002d8c <HAL_TIM_ConfigClockSource+0x16c>
 8002c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c86:	d87f      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x168>
 8002c88:	2b70      	cmp	r3, #112	; 0x70
 8002c8a:	d01a      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0xa2>
 8002c8c:	2b70      	cmp	r3, #112	; 0x70
 8002c8e:	d87b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x168>
 8002c90:	2b60      	cmp	r3, #96	; 0x60
 8002c92:	d050      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x116>
 8002c94:	2b60      	cmp	r3, #96	; 0x60
 8002c96:	d877      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x168>
 8002c98:	2b50      	cmp	r3, #80	; 0x50
 8002c9a:	d03c      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0xf6>
 8002c9c:	2b50      	cmp	r3, #80	; 0x50
 8002c9e:	d873      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x168>
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d058      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x136>
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d86f      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x168>
 8002ca8:	2b30      	cmp	r3, #48	; 0x30
 8002caa:	d064      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x156>
 8002cac:	2b30      	cmp	r3, #48	; 0x30
 8002cae:	d86b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x168>
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d060      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x156>
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d867      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x168>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d05c      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x156>
 8002cbc:	2b10      	cmp	r3, #16
 8002cbe:	d05a      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002cc0:	e062      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6899      	ldr	r1, [r3, #8]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f000 f966 	bl	8002fa2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ce4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	609a      	str	r2, [r3, #8]
      break;
 8002cee:	e04e      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f000 f94f 	bl	8002fa2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d12:	609a      	str	r2, [r3, #8]
      break;
 8002d14:	e03b      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f000 f8c6 	bl	8002eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2150      	movs	r1, #80	; 0x50
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f91d 	bl	8002f6e <TIM_ITRx_SetConfig>
      break;
 8002d34:	e02b      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f000 f8e4 	bl	8002f10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2160      	movs	r1, #96	; 0x60
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f90d 	bl	8002f6e <TIM_ITRx_SetConfig>
      break;
 8002d54:	e01b      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 f8a6 	bl	8002eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2140      	movs	r1, #64	; 0x40
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f8fd 	bl	8002f6e <TIM_ITRx_SetConfig>
      break;
 8002d74:	e00b      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4610      	mov	r0, r2
 8002d82:	f000 f8f4 	bl	8002f6e <TIM_ITRx_SetConfig>
      break;
 8002d86:	e002      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d88:	bf00      	nop
 8002d8a:	e000      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a29      	ldr	r2, [pc, #164]	; (8002ea8 <TIM_Base_SetConfig+0xb8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00b      	beq.n	8002e20 <TIM_Base_SetConfig+0x30>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0e:	d007      	beq.n	8002e20 <TIM_Base_SetConfig+0x30>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a26      	ldr	r2, [pc, #152]	; (8002eac <TIM_Base_SetConfig+0xbc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d003      	beq.n	8002e20 <TIM_Base_SetConfig+0x30>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a25      	ldr	r2, [pc, #148]	; (8002eb0 <TIM_Base_SetConfig+0xc0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d108      	bne.n	8002e32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <TIM_Base_SetConfig+0xb8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00b      	beq.n	8002e52 <TIM_Base_SetConfig+0x62>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e40:	d007      	beq.n	8002e52 <TIM_Base_SetConfig+0x62>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a19      	ldr	r2, [pc, #100]	; (8002eac <TIM_Base_SetConfig+0xbc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d003      	beq.n	8002e52 <TIM_Base_SetConfig+0x62>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <TIM_Base_SetConfig+0xc0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d108      	bne.n	8002e64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <TIM_Base_SetConfig+0xb8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d103      	bne.n	8002e98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	615a      	str	r2, [r3, #20]
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	40012c00 	.word	0x40012c00
 8002eac:	40000400 	.word	0x40000400
 8002eb0:	40000800 	.word	0x40000800

08002eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	f023 0201 	bic.w	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f023 030a 	bic.w	r3, r3, #10
 8002ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	621a      	str	r2, [r3, #32]
}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f023 0210 	bic.w	r2, r3, #16
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	031b      	lsls	r3, r3, #12
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	621a      	str	r2, [r3, #32]
}
 8002f64:	bf00      	nop
 8002f66:	371c      	adds	r7, #28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr

08002f6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b085      	sub	sp, #20
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f043 0307 	orr.w	r3, r3, #7
 8002f90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	609a      	str	r2, [r3, #8]
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b087      	sub	sp, #28
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	021a      	lsls	r2, r3, #8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	609a      	str	r2, [r3, #8]
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e032      	b.n	800305e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003030:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	4313      	orrs	r3, r2
 800303a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr

0800307a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e03f      	b.n	800311e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fd fb26 	bl	8000704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	; 0x24
 80030bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f829 	bl	8003128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003162:	f023 030c 	bic.w	r3, r3, #12
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	68f9      	ldr	r1, [r7, #12]
 800316c:	430b      	orrs	r3, r1
 800316e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a52      	ldr	r2, [pc, #328]	; (80032d4 <UART_SetConfig+0x1ac>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d14e      	bne.n	800322e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003190:	f7ff fad8 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 8003194:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	009a      	lsls	r2, r3, #2
 80031a0:	441a      	add	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ac:	4a4a      	ldr	r2, [pc, #296]	; (80032d8 <UART_SetConfig+0x1b0>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	0119      	lsls	r1, r3, #4
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009a      	lsls	r2, r3, #2
 80031c0:	441a      	add	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031cc:	4b42      	ldr	r3, [pc, #264]	; (80032d8 <UART_SetConfig+0x1b0>)
 80031ce:	fba3 0302 	umull	r0, r3, r3, r2
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	2064      	movs	r0, #100	; 0x64
 80031d6:	fb00 f303 	mul.w	r3, r0, r3
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	3332      	adds	r3, #50	; 0x32
 80031e0:	4a3d      	ldr	r2, [pc, #244]	; (80032d8 <UART_SetConfig+0x1b0>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ec:	4419      	add	r1, r3
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	009a      	lsls	r2, r3, #2
 80031f8:	441a      	add	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	fbb2 f2f3 	udiv	r2, r2, r3
 8003204:	4b34      	ldr	r3, [pc, #208]	; (80032d8 <UART_SetConfig+0x1b0>)
 8003206:	fba3 0302 	umull	r0, r3, r3, r2
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	2064      	movs	r0, #100	; 0x64
 800320e:	fb00 f303 	mul.w	r3, r0, r3
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	3332      	adds	r3, #50	; 0x32
 8003218:	4a2f      	ldr	r2, [pc, #188]	; (80032d8 <UART_SetConfig+0x1b0>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	f003 020f 	and.w	r2, r3, #15
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	440a      	add	r2, r1
 800322a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800322c:	e04d      	b.n	80032ca <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800322e:	f7ff fa75 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8003232:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	009a      	lsls	r2, r3, #2
 800323e:	441a      	add	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	fbb2 f3f3 	udiv	r3, r2, r3
 800324a:	4a23      	ldr	r2, [pc, #140]	; (80032d8 <UART_SetConfig+0x1b0>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	0119      	lsls	r1, r3, #4
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009a      	lsls	r2, r3, #2
 800325e:	441a      	add	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	fbb2 f2f3 	udiv	r2, r2, r3
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <UART_SetConfig+0x1b0>)
 800326c:	fba3 0302 	umull	r0, r3, r3, r2
 8003270:	095b      	lsrs	r3, r3, #5
 8003272:	2064      	movs	r0, #100	; 0x64
 8003274:	fb00 f303 	mul.w	r3, r0, r3
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	3332      	adds	r3, #50	; 0x32
 800327e:	4a16      	ldr	r2, [pc, #88]	; (80032d8 <UART_SetConfig+0x1b0>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800328a:	4419      	add	r1, r3
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	009a      	lsls	r2, r3, #2
 8003296:	441a      	add	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <UART_SetConfig+0x1b0>)
 80032a4:	fba3 0302 	umull	r0, r3, r3, r2
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	2064      	movs	r0, #100	; 0x64
 80032ac:	fb00 f303 	mul.w	r3, r0, r3
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	3332      	adds	r3, #50	; 0x32
 80032b6:	4a08      	ldr	r2, [pc, #32]	; (80032d8 <UART_SetConfig+0x1b0>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	f003 020f 	and.w	r2, r3, #15
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	440a      	add	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]
}
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40013800 	.word	0x40013800
 80032d8:	51eb851f 	.word	0x51eb851f

080032dc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80032dc:	b084      	sub	sp, #16
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	f107 0014 	add.w	r0, r7, #20
 80032ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	b004      	add	sp, #16
 80032fa:	4770      	bx	lr

080032fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003304:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003308:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003310:	b29a      	uxth	r2, r3
 8003312:	89fb      	ldrh	r3, [r7, #14]
 8003314:	4313      	orrs	r3, r2
 8003316:	b29a      	uxth	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr

0800332a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800332a:	b480      	push	{r7}
 800332c:	b085      	sub	sp, #20
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003332:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003336:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800333e:	b29b      	uxth	r3, r3
 8003340:	b21a      	sxth	r2, r3
 8003342:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003346:	43db      	mvns	r3, r3
 8003348:	b21b      	sxth	r3, r3
 800334a:	4013      	ands	r3, r2
 800334c:	b21b      	sxth	r3, r3
 800334e:	b29a      	uxth	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr

08003362 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	460b      	mov	r3, r1
 800336c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800337a:	b084      	sub	sp, #16
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	f107 0014 	add.w	r0, r7, #20
 8003388:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ffa5 	bl	80032fc <USB_EnableGlobalInt>

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033be:	b004      	add	sp, #16
 80033c0:	4770      	bx	lr
	...

080033c4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033c4:	b490      	push	{r4, r7}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80033e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	78db      	ldrb	r3, [r3, #3]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d819      	bhi.n	8003426 <USB_ActivateEndpoint+0x62>
 80033f2:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <USB_ActivateEndpoint+0x34>)
 80033f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f8:	08003409 	.word	0x08003409
 80033fc:	0800341d 	.word	0x0800341d
 8003400:	0800342d 	.word	0x0800342d
 8003404:	08003413 	.word	0x08003413
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003408:	89bb      	ldrh	r3, [r7, #12]
 800340a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800340e:	81bb      	strh	r3, [r7, #12]
      break;
 8003410:	e00d      	b.n	800342e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003412:	89bb      	ldrh	r3, [r7, #12]
 8003414:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003418:	81bb      	strh	r3, [r7, #12]
      break;
 800341a:	e008      	b.n	800342e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800341c:	89bb      	ldrh	r3, [r7, #12]
 800341e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003422:	81bb      	strh	r3, [r7, #12]
      break;
 8003424:	e003      	b.n	800342e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
      break;
 800342a:	e000      	b.n	800342e <USB_ActivateEndpoint+0x6a>
      break;
 800342c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	441a      	add	r2, r3
 8003438:	89bb      	ldrh	r3, [r7, #12]
 800343a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800343e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344a:	b29b      	uxth	r3, r3
 800344c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	b29b      	uxth	r3, r3
 800345c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003464:	b29a      	uxth	r2, r3
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	4313      	orrs	r3, r2
 800346e:	b29c      	uxth	r4, r3
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	441a      	add	r2, r3
 800347a:	4b8a      	ldr	r3, [pc, #552]	; (80036a4 <USB_ActivateEndpoint+0x2e0>)
 800347c:	4323      	orrs	r3, r4
 800347e:	b29b      	uxth	r3, r3
 8003480:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	7b1b      	ldrb	r3, [r3, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 8112 	bne.w	80036b0 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	785b      	ldrb	r3, [r3, #1]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d067      	beq.n	8003564 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003494:	687c      	ldr	r4, [r7, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800349c:	b29b      	uxth	r3, r3
 800349e:	441c      	add	r4, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	4423      	add	r3, r4
 80034a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034ac:	461c      	mov	r4, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	88db      	ldrh	r3, [r3, #6]
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	b29c      	uxth	r4, r3
 80034ca:	4623      	mov	r3, r4
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d014      	beq.n	80034fe <USB_ActivateEndpoint+0x13a>
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ea:	b29c      	uxth	r4, r3
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	441a      	add	r2, r3
 80034f6:	4b6c      	ldr	r3, [pc, #432]	; (80036a8 <USB_ActivateEndpoint+0x2e4>)
 80034f8:	4323      	orrs	r3, r4
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	78db      	ldrb	r3, [r3, #3]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d018      	beq.n	8003538 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800351c:	b29c      	uxth	r4, r3
 800351e:	f084 0320 	eor.w	r3, r4, #32
 8003522:	b29c      	uxth	r4, r3
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	441a      	add	r2, r3
 800352e:	4b5d      	ldr	r3, [pc, #372]	; (80036a4 <USB_ActivateEndpoint+0x2e0>)
 8003530:	4323      	orrs	r3, r4
 8003532:	b29b      	uxth	r3, r3
 8003534:	8013      	strh	r3, [r2, #0]
 8003536:	e22b      	b.n	8003990 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b29b      	uxth	r3, r3
 8003546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800354a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800354e:	b29c      	uxth	r4, r3
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	441a      	add	r2, r3
 800355a:	4b52      	ldr	r3, [pc, #328]	; (80036a4 <USB_ActivateEndpoint+0x2e0>)
 800355c:	4323      	orrs	r3, r4
 800355e:	b29b      	uxth	r3, r3
 8003560:	8013      	strh	r3, [r2, #0]
 8003562:	e215      	b.n	8003990 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003564:	687c      	ldr	r4, [r7, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800356c:	b29b      	uxth	r3, r3
 800356e:	441c      	add	r4, r3
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	4423      	add	r3, r4
 8003578:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800357c:	461c      	mov	r4, r3
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	88db      	ldrh	r3, [r3, #6]
 8003582:	085b      	lsrs	r3, r3, #1
 8003584:	b29b      	uxth	r3, r3
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	b29b      	uxth	r3, r3
 800358a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800358c:	687c      	ldr	r4, [r7, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003594:	b29b      	uxth	r3, r3
 8003596:	441c      	add	r4, r3
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	4423      	add	r3, r4
 80035a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035a4:	461c      	mov	r4, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10e      	bne.n	80035cc <USB_ActivateEndpoint+0x208>
 80035ae:	8823      	ldrh	r3, [r4, #0]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	8023      	strh	r3, [r4, #0]
 80035ba:	8823      	ldrh	r3, [r4, #0]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	8023      	strh	r3, [r4, #0]
 80035ca:	e02d      	b.n	8003628 <USB_ActivateEndpoint+0x264>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	2b3e      	cmp	r3, #62	; 0x3e
 80035d2:	d812      	bhi.n	80035fa <USB_ActivateEndpoint+0x236>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	085b      	lsrs	r3, r3, #1
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <USB_ActivateEndpoint+0x22a>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3301      	adds	r3, #1
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	029b      	lsls	r3, r3, #10
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	8023      	strh	r3, [r4, #0]
 80035f8:	e016      	b.n	8003628 <USB_ActivateEndpoint+0x264>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <USB_ActivateEndpoint+0x250>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3b01      	subs	r3, #1
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	b29b      	uxth	r3, r3
 8003618:	029b      	lsls	r3, r3, #10
 800361a:	b29b      	uxth	r3, r3
 800361c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003624:	b29b      	uxth	r3, r3
 8003626:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	b29c      	uxth	r4, r3
 8003636:	4623      	mov	r3, r4
 8003638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d014      	beq.n	800366a <USB_ActivateEndpoint+0x2a6>
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	b29b      	uxth	r3, r3
 800364e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003656:	b29c      	uxth	r4, r3
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	441a      	add	r2, r3
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <USB_ActivateEndpoint+0x2e8>)
 8003664:	4323      	orrs	r3, r4
 8003666:	b29b      	uxth	r3, r3
 8003668:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800367c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003680:	b29c      	uxth	r4, r3
 8003682:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003686:	b29c      	uxth	r4, r3
 8003688:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800368c:	b29c      	uxth	r4, r3
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	441a      	add	r2, r3
 8003698:	4b02      	ldr	r3, [pc, #8]	; (80036a4 <USB_ActivateEndpoint+0x2e0>)
 800369a:	4323      	orrs	r3, r4
 800369c:	b29b      	uxth	r3, r3
 800369e:	8013      	strh	r3, [r2, #0]
 80036a0:	e176      	b.n	8003990 <USB_ActivateEndpoint+0x5cc>
 80036a2:	bf00      	nop
 80036a4:	ffff8080 	.word	0xffff8080
 80036a8:	ffff80c0 	.word	0xffff80c0
 80036ac:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c6:	b29c      	uxth	r4, r3
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	441a      	add	r2, r3
 80036d2:	4b96      	ldr	r3, [pc, #600]	; (800392c <USB_ActivateEndpoint+0x568>)
 80036d4:	4323      	orrs	r3, r4
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80036da:	687c      	ldr	r4, [r7, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	441c      	add	r4, r3
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	4423      	add	r3, r4
 80036ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036f2:	461c      	mov	r4, r3
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	891b      	ldrh	r3, [r3, #8]
 80036f8:	085b      	lsrs	r3, r3, #1
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	b29b      	uxth	r3, r3
 8003700:	8023      	strh	r3, [r4, #0]
 8003702:	687c      	ldr	r4, [r7, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800370a:	b29b      	uxth	r3, r3
 800370c:	441c      	add	r4, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	4423      	add	r3, r4
 8003716:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800371a:	461c      	mov	r4, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	895b      	ldrh	r3, [r3, #10]
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	b29b      	uxth	r3, r3
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	b29b      	uxth	r3, r3
 8003728:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	785b      	ldrb	r3, [r3, #1]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f040 8088 	bne.w	8003844 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b29c      	uxth	r4, r3
 8003742:	4623      	mov	r3, r4
 8003744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d014      	beq.n	8003776 <USB_ActivateEndpoint+0x3b2>
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	b29b      	uxth	r3, r3
 800375a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800375e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003762:	b29c      	uxth	r4, r3
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	441a      	add	r2, r3
 800376e:	4b70      	ldr	r3, [pc, #448]	; (8003930 <USB_ActivateEndpoint+0x56c>)
 8003770:	4323      	orrs	r3, r4
 8003772:	b29b      	uxth	r3, r3
 8003774:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	b29c      	uxth	r4, r3
 8003784:	4623      	mov	r3, r4
 8003786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d014      	beq.n	80037b8 <USB_ActivateEndpoint+0x3f4>
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a4:	b29c      	uxth	r4, r3
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	441a      	add	r2, r3
 80037b0:	4b60      	ldr	r3, [pc, #384]	; (8003934 <USB_ActivateEndpoint+0x570>)
 80037b2:	4323      	orrs	r3, r4
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ce:	b29c      	uxth	r4, r3
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	441a      	add	r2, r3
 80037da:	4b56      	ldr	r3, [pc, #344]	; (8003934 <USB_ActivateEndpoint+0x570>)
 80037dc:	4323      	orrs	r3, r4
 80037de:	b29b      	uxth	r3, r3
 80037e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f8:	b29c      	uxth	r4, r3
 80037fa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80037fe:	b29c      	uxth	r4, r3
 8003800:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003804:	b29c      	uxth	r4, r3
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	441a      	add	r2, r3
 8003810:	4b49      	ldr	r3, [pc, #292]	; (8003938 <USB_ActivateEndpoint+0x574>)
 8003812:	4323      	orrs	r3, r4
 8003814:	b29b      	uxth	r3, r3
 8003816:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800382e:	b29c      	uxth	r4, r3
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	441a      	add	r2, r3
 800383a:	4b3f      	ldr	r3, [pc, #252]	; (8003938 <USB_ActivateEndpoint+0x574>)
 800383c:	4323      	orrs	r3, r4
 800383e:	b29b      	uxth	r3, r3
 8003840:	8013      	strh	r3, [r2, #0]
 8003842:	e0a5      	b.n	8003990 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	b29c      	uxth	r4, r3
 8003852:	4623      	mov	r3, r4
 8003854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d014      	beq.n	8003886 <USB_ActivateEndpoint+0x4c2>
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b29b      	uxth	r3, r3
 800386a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800386e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003872:	b29c      	uxth	r4, r3
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	441a      	add	r2, r3
 800387e:	4b2c      	ldr	r3, [pc, #176]	; (8003930 <USB_ActivateEndpoint+0x56c>)
 8003880:	4323      	orrs	r3, r4
 8003882:	b29b      	uxth	r3, r3
 8003884:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	b29c      	uxth	r4, r3
 8003894:	4623      	mov	r3, r4
 8003896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d014      	beq.n	80038c8 <USB_ActivateEndpoint+0x504>
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b4:	b29c      	uxth	r4, r3
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	441a      	add	r2, r3
 80038c0:	4b1c      	ldr	r3, [pc, #112]	; (8003934 <USB_ActivateEndpoint+0x570>)
 80038c2:	4323      	orrs	r3, r4
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038de:	b29c      	uxth	r4, r3
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	441a      	add	r2, r3
 80038ea:	4b11      	ldr	r3, [pc, #68]	; (8003930 <USB_ActivateEndpoint+0x56c>)
 80038ec:	4323      	orrs	r3, r4
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	78db      	ldrb	r3, [r3, #3]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d020      	beq.n	800393c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800390c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003910:	b29c      	uxth	r4, r3
 8003912:	f084 0320 	eor.w	r3, r4, #32
 8003916:	b29c      	uxth	r4, r3
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	441a      	add	r2, r3
 8003922:	4b05      	ldr	r3, [pc, #20]	; (8003938 <USB_ActivateEndpoint+0x574>)
 8003924:	4323      	orrs	r3, r4
 8003926:	b29b      	uxth	r3, r3
 8003928:	8013      	strh	r3, [r2, #0]
 800392a:	e01c      	b.n	8003966 <USB_ActivateEndpoint+0x5a2>
 800392c:	ffff8180 	.word	0xffff8180
 8003930:	ffffc080 	.word	0xffffc080
 8003934:	ffff80c0 	.word	0xffff80c0
 8003938:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800394e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003952:	b29c      	uxth	r4, r3
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	441a      	add	r2, r3
 800395e:	4b0f      	ldr	r3, [pc, #60]	; (800399c <USB_ActivateEndpoint+0x5d8>)
 8003960:	4323      	orrs	r3, r4
 8003962:	b29b      	uxth	r3, r3
 8003964:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	b29b      	uxth	r3, r3
 8003974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397c:	b29c      	uxth	r4, r3
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	441a      	add	r2, r3
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <USB_ActivateEndpoint+0x5d8>)
 800398a:	4323      	orrs	r3, r4
 800398c:	b29b      	uxth	r3, r3
 800398e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bc90      	pop	{r4, r7}
 800399a:	4770      	bx	lr
 800399c:	ffff8080 	.word	0xffff8080

080039a0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80039a0:	b490      	push	{r4, r7}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	7b1b      	ldrb	r3, [r3, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d171      	bne.n	8003a96 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	785b      	ldrb	r3, [r3, #1]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d036      	beq.n	8003a28 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	b29c      	uxth	r4, r3
 80039c8:	4623      	mov	r3, r4
 80039ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d014      	beq.n	80039fc <USB_DeactivateEndpoint+0x5c>
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e8:	b29c      	uxth	r4, r3
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	441a      	add	r2, r3
 80039f4:	4b6b      	ldr	r3, [pc, #428]	; (8003ba4 <USB_DeactivateEndpoint+0x204>)
 80039f6:	4323      	orrs	r3, r4
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a12:	b29c      	uxth	r4, r3
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	441a      	add	r2, r3
 8003a1e:	4b62      	ldr	r3, [pc, #392]	; (8003ba8 <USB_DeactivateEndpoint+0x208>)
 8003a20:	4323      	orrs	r3, r4
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	8013      	strh	r3, [r2, #0]
 8003a26:	e144      	b.n	8003cb2 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b29c      	uxth	r4, r3
 8003a36:	4623      	mov	r3, r4
 8003a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d014      	beq.n	8003a6a <USB_DeactivateEndpoint+0xca>
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a56:	b29c      	uxth	r4, r3
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	441a      	add	r2, r3
 8003a62:	4b52      	ldr	r3, [pc, #328]	; (8003bac <USB_DeactivateEndpoint+0x20c>)
 8003a64:	4323      	orrs	r3, r4
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a80:	b29c      	uxth	r4, r3
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	441a      	add	r2, r3
 8003a8c:	4b46      	ldr	r3, [pc, #280]	; (8003ba8 <USB_DeactivateEndpoint+0x208>)
 8003a8e:	4323      	orrs	r3, r4
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	8013      	strh	r3, [r2, #0]
 8003a94:	e10d      	b.n	8003cb2 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	785b      	ldrb	r3, [r3, #1]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f040 8088 	bne.w	8003bb0 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	b29c      	uxth	r4, r3
 8003aae:	4623      	mov	r3, r4
 8003ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d014      	beq.n	8003ae2 <USB_DeactivateEndpoint+0x142>
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ace:	b29c      	uxth	r4, r3
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	4b34      	ldr	r3, [pc, #208]	; (8003bac <USB_DeactivateEndpoint+0x20c>)
 8003adc:	4323      	orrs	r3, r4
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29c      	uxth	r4, r3
 8003af0:	4623      	mov	r3, r4
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d014      	beq.n	8003b24 <USB_DeactivateEndpoint+0x184>
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b10:	b29c      	uxth	r4, r3
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	441a      	add	r2, r3
 8003b1c:	4b21      	ldr	r3, [pc, #132]	; (8003ba4 <USB_DeactivateEndpoint+0x204>)
 8003b1e:	4323      	orrs	r3, r4
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3a:	b29c      	uxth	r4, r3
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	441a      	add	r2, r3
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <USB_DeactivateEndpoint+0x204>)
 8003b48:	4323      	orrs	r3, r4
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b64:	b29c      	uxth	r4, r3
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	441a      	add	r2, r3
 8003b70:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <USB_DeactivateEndpoint+0x208>)
 8003b72:	4323      	orrs	r3, r4
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b8e:	b29c      	uxth	r4, r3
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	441a      	add	r2, r3
 8003b9a:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <USB_DeactivateEndpoint+0x208>)
 8003b9c:	4323      	orrs	r3, r4
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	8013      	strh	r3, [r2, #0]
 8003ba2:	e086      	b.n	8003cb2 <USB_DeactivateEndpoint+0x312>
 8003ba4:	ffff80c0 	.word	0xffff80c0
 8003ba8:	ffff8080 	.word	0xffff8080
 8003bac:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	b29c      	uxth	r4, r3
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d014      	beq.n	8003bf2 <USB_DeactivateEndpoint+0x252>
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bde:	b29c      	uxth	r4, r3
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	441a      	add	r2, r3
 8003bea:	4b35      	ldr	r3, [pc, #212]	; (8003cc0 <USB_DeactivateEndpoint+0x320>)
 8003bec:	4323      	orrs	r3, r4
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b29c      	uxth	r4, r3
 8003c00:	4623      	mov	r3, r4
 8003c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d014      	beq.n	8003c34 <USB_DeactivateEndpoint+0x294>
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c20:	b29c      	uxth	r4, r3
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	441a      	add	r2, r3
 8003c2c:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <USB_DeactivateEndpoint+0x324>)
 8003c2e:	4323      	orrs	r3, r4
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4a:	b29c      	uxth	r4, r3
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	441a      	add	r2, r3
 8003c56:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <USB_DeactivateEndpoint+0x320>)
 8003c58:	4323      	orrs	r3, r4
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c74:	b29c      	uxth	r4, r3
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	441a      	add	r2, r3
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <USB_DeactivateEndpoint+0x328>)
 8003c82:	4323      	orrs	r3, r4
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9e:	b29c      	uxth	r4, r3
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	441a      	add	r2, r3
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <USB_DeactivateEndpoint+0x328>)
 8003cac:	4323      	orrs	r3, r4
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc90      	pop	{r4, r7}
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	ffffc080 	.word	0xffffc080
 8003cc4:	ffff80c0 	.word	0xffff80c0
 8003cc8:	ffff8080 	.word	0xffff8080

08003ccc <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ccc:	b590      	push	{r4, r7, lr}
 8003cce:	b08d      	sub	sp, #52	; 0x34
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	785b      	ldrb	r3, [r3, #1]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	f040 8160 	bne.w	8003fa0 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	699a      	ldr	r2, [r3, #24]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d909      	bls.n	8003d00 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	1ad2      	subs	r2, r2, r3
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	619a      	str	r2, [r3, #24]
 8003cfe:	e005      	b.n	8003d0c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	7b1b      	ldrb	r3, [r3, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d119      	bne.n	8003d48 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	6959      	ldr	r1, [r3, #20]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	88da      	ldrh	r2, [r3, #6]
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fba2 	bl	800446a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d26:	687c      	ldr	r4, [r7, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	441c      	add	r4, r3
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	4423      	add	r3, r4
 8003d3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d3e:	461c      	mov	r4, r3
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	8023      	strh	r3, [r4, #0]
 8003d46:	e10f      	b.n	8003f68 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d065      	beq.n	8003e2a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d5e:	687c      	ldr	r4, [r7, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	785b      	ldrb	r3, [r3, #1]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d148      	bne.n	8003dfa <USB_EPStartXfer+0x12e>
 8003d68:	687c      	ldr	r4, [r7, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	441c      	add	r4, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	4423      	add	r3, r4
 8003d7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d80:	461c      	mov	r4, r3
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10e      	bne.n	8003da6 <USB_EPStartXfer+0xda>
 8003d88:	8823      	ldrh	r3, [r4, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	8023      	strh	r3, [r4, #0]
 8003d94:	8823      	ldrh	r3, [r4, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	8023      	strh	r3, [r4, #0]
 8003da4:	e03d      	b.n	8003e22 <USB_EPStartXfer+0x156>
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	2b3e      	cmp	r3, #62	; 0x3e
 8003daa:	d810      	bhi.n	8003dce <USB_EPStartXfer+0x102>
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	085b      	lsrs	r3, r3, #1
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
 8003db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <USB_EPStartXfer+0xf6>
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	029b      	lsls	r3, r3, #10
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	8023      	strh	r3, [r4, #0]
 8003dcc:	e029      	b.n	8003e22 <USB_EPStartXfer+0x156>
 8003dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <USB_EPStartXfer+0x118>
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	3b01      	subs	r3, #1
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	029b      	lsls	r3, r3, #10
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	8023      	strh	r3, [r4, #0]
 8003df8:	e013      	b.n	8003e22 <USB_EPStartXfer+0x156>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	785b      	ldrb	r3, [r3, #1]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d10f      	bne.n	8003e22 <USB_EPStartXfer+0x156>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	441c      	add	r4, r3
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	4423      	add	r3, r4
 8003e14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	895b      	ldrh	r3, [r3, #10]
 8003e26:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003e28:	e063      	b.n	8003ef2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	785b      	ldrb	r3, [r3, #1]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d148      	bne.n	8003ec4 <USB_EPStartXfer+0x1f8>
 8003e32:	687c      	ldr	r4, [r7, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	441c      	add	r4, r3
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	4423      	add	r3, r4
 8003e46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e4a:	461c      	mov	r4, r3
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10e      	bne.n	8003e70 <USB_EPStartXfer+0x1a4>
 8003e52:	8823      	ldrh	r3, [r4, #0]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	8023      	strh	r3, [r4, #0]
 8003e5e:	8823      	ldrh	r3, [r4, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	8023      	strh	r3, [r4, #0]
 8003e6e:	e03d      	b.n	8003eec <USB_EPStartXfer+0x220>
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	2b3e      	cmp	r3, #62	; 0x3e
 8003e74:	d810      	bhi.n	8003e98 <USB_EPStartXfer+0x1cc>
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	085b      	lsrs	r3, r3, #1
 8003e7a:	623b      	str	r3, [r7, #32]
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <USB_EPStartXfer+0x1c0>
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	623b      	str	r3, [r7, #32]
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	029b      	lsls	r3, r3, #10
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	8023      	strh	r3, [r4, #0]
 8003e96:	e029      	b.n	8003eec <USB_EPStartXfer+0x220>
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	623b      	str	r3, [r7, #32]
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <USB_EPStartXfer+0x1e2>
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	623b      	str	r3, [r7, #32]
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	029b      	lsls	r3, r3, #10
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	8023      	strh	r3, [r4, #0]
 8003ec2:	e013      	b.n	8003eec <USB_EPStartXfer+0x220>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	785b      	ldrb	r3, [r3, #1]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d10f      	bne.n	8003eec <USB_EPStartXfer+0x220>
 8003ecc:	687c      	ldr	r4, [r7, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	441c      	add	r4, r3
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	4423      	add	r3, r4
 8003ee0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ee4:	461c      	mov	r4, r3
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	891b      	ldrh	r3, [r3, #8]
 8003ef0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6959      	ldr	r1, [r3, #20]
 8003ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fab4 	bl	800446a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	785b      	ldrb	r3, [r3, #1]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d115      	bne.n	8003f36 <USB_EPStartXfer+0x26a>
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f20:	b29c      	uxth	r4, r3
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	441a      	add	r2, r3
 8003f2c:	4b90      	ldr	r3, [pc, #576]	; (8004170 <USB_EPStartXfer+0x4a4>)
 8003f2e:	4323      	orrs	r3, r4
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	8013      	strh	r3, [r2, #0]
 8003f34:	e018      	b.n	8003f68 <USB_EPStartXfer+0x29c>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	785b      	ldrb	r3, [r3, #1]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d114      	bne.n	8003f68 <USB_EPStartXfer+0x29c>
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f54:	b29c      	uxth	r4, r3
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	441a      	add	r2, r3
 8003f60:	4b84      	ldr	r3, [pc, #528]	; (8004174 <USB_EPStartXfer+0x4a8>)
 8003f62:	4323      	orrs	r3, r4
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f7e:	b29c      	uxth	r4, r3
 8003f80:	f084 0310 	eor.w	r3, r4, #16
 8003f84:	b29c      	uxth	r4, r3
 8003f86:	f084 0320 	eor.w	r3, r4, #32
 8003f8a:	b29c      	uxth	r4, r3
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	441a      	add	r2, r3
 8003f96:	4b78      	ldr	r3, [pc, #480]	; (8004178 <USB_EPStartXfer+0x4ac>)
 8003f98:	4323      	orrs	r3, r4
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	8013      	strh	r3, [r2, #0]
 8003f9e:	e146      	b.n	800422e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	699a      	ldr	r2, [r3, #24]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d909      	bls.n	8003fc0 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb8:	1ad2      	subs	r2, r2, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	619a      	str	r2, [r3, #24]
 8003fbe:	e005      	b.n	8003fcc <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	7b1b      	ldrb	r3, [r3, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d148      	bne.n	8004066 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003fd4:	687c      	ldr	r4, [r7, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	441c      	add	r4, r3
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	4423      	add	r3, r4
 8003fe8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fec:	461c      	mov	r4, r3
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10e      	bne.n	8004012 <USB_EPStartXfer+0x346>
 8003ff4:	8823      	ldrh	r3, [r4, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	8023      	strh	r3, [r4, #0]
 8004000:	8823      	ldrh	r3, [r4, #0]
 8004002:	b29b      	uxth	r3, r3
 8004004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800400c:	b29b      	uxth	r3, r3
 800400e:	8023      	strh	r3, [r4, #0]
 8004010:	e0f2      	b.n	80041f8 <USB_EPStartXfer+0x52c>
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	2b3e      	cmp	r3, #62	; 0x3e
 8004016:	d810      	bhi.n	800403a <USB_EPStartXfer+0x36e>
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <USB_EPStartXfer+0x362>
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	3301      	adds	r3, #1
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	b29b      	uxth	r3, r3
 8004032:	029b      	lsls	r3, r3, #10
 8004034:	b29b      	uxth	r3, r3
 8004036:	8023      	strh	r3, [r4, #0]
 8004038:	e0de      	b.n	80041f8 <USB_EPStartXfer+0x52c>
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <USB_EPStartXfer+0x384>
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	3b01      	subs	r3, #1
 800404e:	61fb      	str	r3, [r7, #28]
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	b29b      	uxth	r3, r3
 8004054:	029b      	lsls	r3, r3, #10
 8004056:	b29b      	uxth	r3, r3
 8004058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800405c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004060:	b29b      	uxth	r3, r3
 8004062:	8023      	strh	r3, [r4, #0]
 8004064:	e0c8      	b.n	80041f8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	785b      	ldrb	r3, [r3, #1]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d148      	bne.n	8004100 <USB_EPStartXfer+0x434>
 800406e:	687c      	ldr	r4, [r7, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004076:	b29b      	uxth	r3, r3
 8004078:	441c      	add	r4, r3
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	4423      	add	r3, r4
 8004082:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004086:	461c      	mov	r4, r3
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10e      	bne.n	80040ac <USB_EPStartXfer+0x3e0>
 800408e:	8823      	ldrh	r3, [r4, #0]
 8004090:	b29b      	uxth	r3, r3
 8004092:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004096:	b29b      	uxth	r3, r3
 8004098:	8023      	strh	r3, [r4, #0]
 800409a:	8823      	ldrh	r3, [r4, #0]
 800409c:	b29b      	uxth	r3, r3
 800409e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	8023      	strh	r3, [r4, #0]
 80040aa:	e03d      	b.n	8004128 <USB_EPStartXfer+0x45c>
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	2b3e      	cmp	r3, #62	; 0x3e
 80040b0:	d810      	bhi.n	80040d4 <USB_EPStartXfer+0x408>
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <USB_EPStartXfer+0x3fc>
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	3301      	adds	r3, #1
 80040c6:	61bb      	str	r3, [r7, #24]
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	029b      	lsls	r3, r3, #10
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	8023      	strh	r3, [r4, #0]
 80040d2:	e029      	b.n	8004128 <USB_EPStartXfer+0x45c>
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <USB_EPStartXfer+0x41e>
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	029b      	lsls	r3, r3, #10
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	8023      	strh	r3, [r4, #0]
 80040fe:	e013      	b.n	8004128 <USB_EPStartXfer+0x45c>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	785b      	ldrb	r3, [r3, #1]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d10f      	bne.n	8004128 <USB_EPStartXfer+0x45c>
 8004108:	687c      	ldr	r4, [r7, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004110:	b29b      	uxth	r3, r3
 8004112:	441c      	add	r4, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	4423      	add	r3, r4
 800411c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004120:	461c      	mov	r4, r3
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	b29b      	uxth	r3, r3
 8004126:	8023      	strh	r3, [r4, #0]
 8004128:	687c      	ldr	r4, [r7, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	785b      	ldrb	r3, [r3, #1]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d14e      	bne.n	80041d0 <USB_EPStartXfer+0x504>
 8004132:	687c      	ldr	r4, [r7, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800413a:	b29b      	uxth	r3, r3
 800413c:	441c      	add	r4, r3
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	4423      	add	r3, r4
 8004146:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800414a:	461c      	mov	r4, r3
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	2b00      	cmp	r3, #0
 8004150:	d114      	bne.n	800417c <USB_EPStartXfer+0x4b0>
 8004152:	8823      	ldrh	r3, [r4, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800415a:	b29b      	uxth	r3, r3
 800415c:	8023      	strh	r3, [r4, #0]
 800415e:	8823      	ldrh	r3, [r4, #0]
 8004160:	b29b      	uxth	r3, r3
 8004162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800416a:	b29b      	uxth	r3, r3
 800416c:	8023      	strh	r3, [r4, #0]
 800416e:	e043      	b.n	80041f8 <USB_EPStartXfer+0x52c>
 8004170:	ffff80c0 	.word	0xffff80c0
 8004174:	ffffc080 	.word	0xffffc080
 8004178:	ffff8080 	.word	0xffff8080
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	2b3e      	cmp	r3, #62	; 0x3e
 8004180:	d810      	bhi.n	80041a4 <USB_EPStartXfer+0x4d8>
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004184:	085b      	lsrs	r3, r3, #1
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <USB_EPStartXfer+0x4cc>
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	3301      	adds	r3, #1
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	b29b      	uxth	r3, r3
 800419c:	029b      	lsls	r3, r3, #10
 800419e:	b29b      	uxth	r3, r3
 80041a0:	8023      	strh	r3, [r4, #0]
 80041a2:	e029      	b.n	80041f8 <USB_EPStartXfer+0x52c>
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <USB_EPStartXfer+0x4ee>
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	029b      	lsls	r3, r3, #10
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	8023      	strh	r3, [r4, #0]
 80041ce:	e013      	b.n	80041f8 <USB_EPStartXfer+0x52c>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	785b      	ldrb	r3, [r3, #1]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d10f      	bne.n	80041f8 <USB_EPStartXfer+0x52c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041de:	b29b      	uxth	r3, r3
 80041e0:	441c      	add	r4, r3
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	4423      	add	r3, r4
 80041ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b29b      	uxth	r3, r3
 8004206:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800420a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420e:	b29c      	uxth	r4, r3
 8004210:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004214:	b29c      	uxth	r4, r3
 8004216:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800421a:	b29c      	uxth	r4, r3
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	441a      	add	r2, r3
 8004226:	4b04      	ldr	r3, [pc, #16]	; (8004238 <USB_EPStartXfer+0x56c>)
 8004228:	4323      	orrs	r3, r4
 800422a:	b29b      	uxth	r3, r3
 800422c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3734      	adds	r7, #52	; 0x34
 8004234:	46bd      	mov	sp, r7
 8004236:	bd90      	pop	{r4, r7, pc}
 8004238:	ffff8080 	.word	0xffff8080

0800423c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800423c:	b490      	push	{r4, r7}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	785b      	ldrb	r3, [r3, #1]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d018      	beq.n	8004280 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004264:	b29c      	uxth	r4, r3
 8004266:	f084 0310 	eor.w	r3, r4, #16
 800426a:	b29c      	uxth	r4, r3
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	441a      	add	r2, r3
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <USB_EPSetStall+0x80>)
 8004278:	4323      	orrs	r3, r4
 800427a:	b29b      	uxth	r3, r3
 800427c:	8013      	strh	r3, [r2, #0]
 800427e:	e017      	b.n	80042b0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	b29c      	uxth	r4, r3
 8004298:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800429c:	b29c      	uxth	r4, r3
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	441a      	add	r2, r3
 80042a8:	4b04      	ldr	r3, [pc, #16]	; (80042bc <USB_EPSetStall+0x80>)
 80042aa:	4323      	orrs	r3, r4
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc90      	pop	{r4, r7}
 80042ba:	4770      	bx	lr
 80042bc:	ffff8080 	.word	0xffff8080

080042c0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042c0:	b490      	push	{r4, r7}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	7b1b      	ldrb	r3, [r3, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d17d      	bne.n	80043ce <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	785b      	ldrb	r3, [r3, #1]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d03d      	beq.n	8004356 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	b29c      	uxth	r4, r3
 80042e8:	4623      	mov	r3, r4
 80042ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d014      	beq.n	800431c <USB_EPClearStall+0x5c>
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004308:	b29c      	uxth	r4, r3
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	441a      	add	r2, r3
 8004314:	4b31      	ldr	r3, [pc, #196]	; (80043dc <USB_EPClearStall+0x11c>)
 8004316:	4323      	orrs	r3, r4
 8004318:	b29b      	uxth	r3, r3
 800431a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	78db      	ldrb	r3, [r3, #3]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d054      	beq.n	80043ce <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800433a:	b29c      	uxth	r4, r3
 800433c:	f084 0320 	eor.w	r3, r4, #32
 8004340:	b29c      	uxth	r4, r3
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	441a      	add	r2, r3
 800434c:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <USB_EPClearStall+0x120>)
 800434e:	4323      	orrs	r3, r4
 8004350:	b29b      	uxth	r3, r3
 8004352:	8013      	strh	r3, [r2, #0]
 8004354:	e03b      	b.n	80043ce <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	b29c      	uxth	r4, r3
 8004364:	4623      	mov	r3, r4
 8004366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d014      	beq.n	8004398 <USB_EPClearStall+0xd8>
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004384:	b29c      	uxth	r4, r3
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	441a      	add	r2, r3
 8004390:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <USB_EPClearStall+0x124>)
 8004392:	4323      	orrs	r3, r4
 8004394:	b29b      	uxth	r3, r3
 8004396:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ae:	b29c      	uxth	r4, r3
 80043b0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80043b4:	b29c      	uxth	r4, r3
 80043b6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80043ba:	b29c      	uxth	r4, r3
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	441a      	add	r2, r3
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <USB_EPClearStall+0x120>)
 80043c8:	4323      	orrs	r3, r4
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc90      	pop	{r4, r7}
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	ffff80c0 	.word	0xffff80c0
 80043e0:	ffff8080 	.word	0xffff8080
 80043e4:	ffffc080 	.word	0xffffc080

080043e8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d103      	bne.n	8004402 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2280      	movs	r2, #128	; 0x80
 80043fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr

0800440e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr

08004436 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004436:	b480      	push	{r7}
 8004438:	b085      	sub	sp, #20
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004444:	b29b      	uxth	r3, r3
 8004446:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004448:	68fb      	ldr	r3, [r7, #12]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr

0800446a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800446a:	b480      	push	{r7}
 800446c:	b08d      	sub	sp, #52	; 0x34
 800446e:	af00      	add	r7, sp, #0
 8004470:	60f8      	str	r0, [r7, #12]
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	4611      	mov	r1, r2
 8004476:	461a      	mov	r2, r3
 8004478:	460b      	mov	r3, r1
 800447a:	80fb      	strh	r3, [r7, #6]
 800447c:	4613      	mov	r3, r2
 800447e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004480:	88bb      	ldrh	r3, [r7, #4]
 8004482:	3301      	adds	r3, #1
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	005a      	lsls	r2, r3, #1
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800449c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a2:	e01e      	b.n	80044e2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	3301      	adds	r3, #1
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	3302      	adds	r3, #2
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	3302      	adds	r3, #2
 80044d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	3301      	adds	r3, #1
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80044dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044de:	3b01      	subs	r3, #1
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1dd      	bne.n	80044a4 <USB_WritePMA+0x3a>
  }
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	3734      	adds	r7, #52	; 0x34
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b08b      	sub	sp, #44	; 0x2c
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	4611      	mov	r1, r2
 8004500:	461a      	mov	r2, r3
 8004502:	460b      	mov	r3, r1
 8004504:	80fb      	strh	r3, [r7, #6]
 8004506:	4613      	mov	r3, r2
 8004508:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800450a:	88bb      	ldrh	r3, [r7, #4]
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	b29b      	uxth	r3, r3
 8004510:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	005a      	lsls	r2, r3, #1
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004526:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
 800452c:	e01b      	b.n	8004566 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	b29b      	uxth	r3, r3
 8004534:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	3302      	adds	r3, #2
 800453a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	3301      	adds	r3, #1
 8004548:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	0a1b      	lsrs	r3, r3, #8
 800454e:	b2da      	uxtb	r2, r3
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	3301      	adds	r3, #1
 8004558:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	3302      	adds	r3, #2
 800455e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	3b01      	subs	r3, #1
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e0      	bne.n	800452e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800456c:	88bb      	ldrh	r3, [r7, #4]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	b29b      	uxth	r3, r3
 800457e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	701a      	strb	r2, [r3, #0]
  }
}
 8004588:	bf00      	nop
 800458a:	372c      	adds	r7, #44	; 0x2c
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr

08004592 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	460b      	mov	r3, r1
 800459c:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef   *haudio;

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800459e:	2358      	movs	r3, #88	; 0x58
 80045a0:	2201      	movs	r2, #1
 80045a2:	2101      	movs	r1, #1
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f004 fc20 	bl	8008dea <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 80045b2:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 80045b6:	f004 fd25 	bl	8009004 <USBD_static_malloc>
 80045ba:	4602      	mov	r2, r0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <USBD_AUDIO_Init+0x3e>
  {
    return USBD_FAIL;
 80045cc:	2302      	movs	r3, #2
 80045ce:	e034      	b.n	800463a <USBD_AUDIO_Init+0xa8>
  }
  else
  {
    haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045d6:	60fb      	str	r3, [r7, #12]
    haudio->alt_setting = 0U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
    haudio->offset = AUDIO_OFFSET_UNKNOWN;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e4:	2203      	movs	r2, #3
 80045e6:	f883 2b84 	strb.w	r2, [r3, #2948]	; 0xb84
    haudio->wr_ptr = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f0:	2200      	movs	r2, #0
 80045f2:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88
    haudio->rd_ptr = 0U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fc:	2200      	movs	r2, #0
 80045fe:	f8a3 2b86 	strh.w	r2, [r3, #2950]	; 0xb86
    haudio->rd_enable = 0U;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2b85 	strb.w	r2, [r3, #2949]	; 0xb85

    /* Initialize the Audio output Hardware layer */
    if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2200      	movs	r2, #0
 8004618:	2146      	movs	r1, #70	; 0x46
 800461a:	f245 6054 	movw	r0, #22100	; 0x5654
 800461e:	4798      	blx	r3
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <USBD_AUDIO_Init+0x98>
                                                         AUDIO_DEFAULT_VOLUME,
                                                         0U) != 0)
    {
      return USBD_FAIL;
 8004626:	2302      	movs	r3, #2
 8004628:	e007      	b.n	800463a <USBD_AUDIO_Init+0xa8>
    }

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1d1a      	adds	r2, r3, #4
 800462e:	2358      	movs	r3, #88	; 0x58
 8004630:	2101      	movs	r1, #1
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f004 fcc3 	bl	8008fbe <USBD_LL_PrepareReceive>
                           AUDIO_OUT_PACKET);
  }

  return USBD_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <USBD_AUDIO_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev,
                                  uint8_t cfgidx)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	460b      	mov	r3, r1
 800464c:	70fb      	strb	r3, [r7, #3]
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 800464e:	2101      	movs	r1, #1
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f004 fbf0 	bl	8008e36 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00f      	beq.n	8004688 <USBD_AUDIO_DeInit+0x46>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2000      	movs	r0, #0
 8004672:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800467a:	4618      	mov	r0, r3
 800467c:	f004 fcce 	bl	800901c <USBD_static_free>
    pdev->pClassData = NULL;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                 USBD_SetupReqTypedef *req)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	813b      	strh	r3, [r7, #8]
  uint8_t ret = USBD_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046ac:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01a      	beq.n	80046f0 <USBD_AUDIO_Setup+0x5c>
 80046ba:	2b20      	cmp	r3, #32
 80046bc:	f040 809c 	bne.w	80047f8 <USBD_AUDIO_Setup+0x164>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	785b      	ldrb	r3, [r3, #1]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d006      	beq.n	80046d6 <USBD_AUDIO_Setup+0x42>
 80046c8:	2b81      	cmp	r3, #129	; 0x81
 80046ca:	d109      	bne.n	80046e0 <USBD_AUDIO_Setup+0x4c>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 80046cc:	6839      	ldr	r1, [r7, #0]
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f980 	bl	80049d4 <AUDIO_REQ_GetCurrent>
          break;
 80046d4:	e00b      	b.n	80046ee <USBD_AUDIO_Setup+0x5a>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 80046d6:	6839      	ldr	r1, [r7, #0]
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f99b 	bl	8004a14 <AUDIO_REQ_SetCurrent>
          break;
 80046de:	e006      	b.n	80046ee <USBD_AUDIO_Setup+0x5a>

        default:
          USBD_CtlError(pdev, req);
 80046e0:	6839      	ldr	r1, [r7, #0]
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f001 f997 	bl	8005a16 <USBD_CtlError>
          ret = USBD_FAIL;
 80046e8:	2302      	movs	r3, #2
 80046ea:	75fb      	strb	r3, [r7, #23]
          break;
 80046ec:	bf00      	nop
      }
      break;
 80046ee:	e08a      	b.n	8004806 <USBD_AUDIO_Setup+0x172>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	2b0b      	cmp	r3, #11
 80046f6:	d876      	bhi.n	80047e6 <USBD_AUDIO_Setup+0x152>
 80046f8:	a201      	add	r2, pc, #4	; (adr r2, 8004700 <USBD_AUDIO_Setup+0x6c>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004731 	.word	0x08004731
 8004704:	080047e7 	.word	0x080047e7
 8004708:	080047e7 	.word	0x080047e7
 800470c:	080047e7 	.word	0x080047e7
 8004710:	080047e7 	.word	0x080047e7
 8004714:	080047e7 	.word	0x080047e7
 8004718:	08004759 	.word	0x08004759
 800471c:	080047e7 	.word	0x080047e7
 8004720:	080047e7 	.word	0x080047e7
 8004724:	080047e7 	.word	0x080047e7
 8004728:	08004783 	.word	0x08004783
 800472c:	080047a9 	.word	0x080047a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004736:	2b03      	cmp	r3, #3
 8004738:	d107      	bne.n	800474a <USBD_AUDIO_Setup+0xb6>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800473a:	f107 0308 	add.w	r3, r7, #8
 800473e:	2202      	movs	r2, #2
 8004740:	4619      	mov	r1, r3
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f001 f9d1 	bl	8005aea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004748:	e055      	b.n	80047f6 <USBD_AUDIO_Setup+0x162>
            USBD_CtlError(pdev, req);
 800474a:	6839      	ldr	r1, [r7, #0]
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f001 f962 	bl	8005a16 <USBD_CtlError>
            ret = USBD_FAIL;
 8004752:	2302      	movs	r3, #2
 8004754:	75fb      	strb	r3, [r7, #23]
          break;
 8004756:	e04e      	b.n	80047f6 <USBD_AUDIO_Setup+0x162>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	885b      	ldrh	r3, [r3, #2]
 800475c:	0a1b      	lsrs	r3, r3, #8
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b21      	cmp	r3, #33	; 0x21
 8004762:	d147      	bne.n	80047f4 <USBD_AUDIO_Setup+0x160>
          {
            pbuf = USBD_AUDIO_CfgDesc + 18;
 8004764:	4b2a      	ldr	r3, [pc, #168]	; (8004810 <USBD_AUDIO_Setup+0x17c>)
 8004766:	60fb      	str	r3, [r7, #12]
            len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	88db      	ldrh	r3, [r3, #6]
 800476c:	2b09      	cmp	r3, #9
 800476e:	bf28      	it	cs
 8004770:	2309      	movcs	r3, #9
 8004772:	817b      	strh	r3, [r7, #10]

            USBD_CtlSendData(pdev, pbuf, len);
 8004774:	897b      	ldrh	r3, [r7, #10]
 8004776:	461a      	mov	r2, r3
 8004778:	68f9      	ldr	r1, [r7, #12]
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f001 f9b5 	bl	8005aea <USBD_CtlSendData>
          }
          break;
 8004780:	e038      	b.n	80047f4 <USBD_AUDIO_Setup+0x160>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004788:	2b03      	cmp	r3, #3
 800478a:	d106      	bne.n	800479a <USBD_AUDIO_Setup+0x106>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&haudio->alt_setting, 1U);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	2201      	movs	r2, #1
 8004790:	4619      	mov	r1, r3
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f001 f9a9 	bl	8005aea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004798:	e02d      	b.n	80047f6 <USBD_AUDIO_Setup+0x162>
            USBD_CtlError(pdev, req);
 800479a:	6839      	ldr	r1, [r7, #0]
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f001 f93a 	bl	8005a16 <USBD_CtlError>
            ret = USBD_FAIL;
 80047a2:	2302      	movs	r3, #2
 80047a4:	75fb      	strb	r3, [r7, #23]
          break;
 80047a6:	e026      	b.n	80047f6 <USBD_AUDIO_Setup+0x162>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d112      	bne.n	80047d8 <USBD_AUDIO_Setup+0x144>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	885b      	ldrh	r3, [r3, #2]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d806      	bhi.n	80047ca <USBD_AUDIO_Setup+0x136>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	885b      	ldrh	r3, [r3, #2]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80047c8:	e015      	b.n	80047f6 <USBD_AUDIO_Setup+0x162>
              USBD_CtlError(pdev, req);
 80047ca:	6839      	ldr	r1, [r7, #0]
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f001 f922 	bl	8005a16 <USBD_CtlError>
              ret = USBD_FAIL;
 80047d2:	2302      	movs	r3, #2
 80047d4:	75fb      	strb	r3, [r7, #23]
          break;
 80047d6:	e00e      	b.n	80047f6 <USBD_AUDIO_Setup+0x162>
            USBD_CtlError(pdev, req);
 80047d8:	6839      	ldr	r1, [r7, #0]
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f001 f91b 	bl	8005a16 <USBD_CtlError>
            ret = USBD_FAIL;
 80047e0:	2302      	movs	r3, #2
 80047e2:	75fb      	strb	r3, [r7, #23]
          break;
 80047e4:	e007      	b.n	80047f6 <USBD_AUDIO_Setup+0x162>

        default:
          USBD_CtlError(pdev, req);
 80047e6:	6839      	ldr	r1, [r7, #0]
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f001 f914 	bl	8005a16 <USBD_CtlError>
          ret = USBD_FAIL;
 80047ee:	2302      	movs	r3, #2
 80047f0:	75fb      	strb	r3, [r7, #23]
          break;
 80047f2:	e000      	b.n	80047f6 <USBD_AUDIO_Setup+0x162>
          break;
 80047f4:	bf00      	nop
      }
      break;
 80047f6:	e006      	b.n	8004806 <USBD_AUDIO_Setup+0x172>
    default:
      USBD_CtlError(pdev, req);
 80047f8:	6839      	ldr	r1, [r7, #0]
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f001 f90b 	bl	8005a16 <USBD_CtlError>
      ret = USBD_FAIL;
 8004800:	2302      	movs	r3, #2
 8004802:	75fb      	strb	r3, [r7, #23]
      break;
 8004804:	bf00      	nop
  }

  return ret;
 8004806:	7dfb      	ldrb	r3, [r7, #23]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	20000056 	.word	0x20000056

08004814 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_AUDIO_CfgDesc);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	226d      	movs	r2, #109	; 0x6d
 8004820:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8004822:	4b03      	ldr	r3, [pc, #12]	; (8004830 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	20000044 	.word	0x20000044

08004834 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	70fb      	strb	r3, [r7, #3]
  /* Only OUT data are processed */
  return USBD_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800485a:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004862:	f893 3b8a 	ldrb.w	r3, [r3, #2954]	; 0xb8a
 8004866:	2b01      	cmp	r3, #1
 8004868:	d11d      	bne.n	80048a6 <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004870:	f893 3bcc 	ldrb.w	r3, [r3, #3020]	; 0xbcc
 8004874:	2b02      	cmp	r3, #2
 8004876:	d116      	bne.n	80048a6 <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004886:	f892 2b8b 	ldrb.w	r2, [r2, #2955]	; 0xb8b
 800488a:	4610      	mov	r0, r2
 800488c:	4798      	blx	r3
      haudio->control.cmd = 0U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2b8a 	strb.w	r2, [r3, #2954]	; 0xb8a
      haudio->control.len = 0U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2bcb 	strb.w	r2, [r3, #3019]	; 0xbcb
    }
  }

  return USBD_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr

080048c4 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr

08004908 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800491a:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d153      	bne.n	80049ca <USBD_AUDIO_DataOut+0xc2>
  {
    /* Increment the Buffer pointer or roll it back when all buffers are full */

    haudio->wr_ptr += AUDIO_OUT_PACKET;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004928:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 800492c:	3358      	adds	r3, #88	; 0x58
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004936:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004940:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 8004944:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 8004948:	d11c      	bne.n	8004984 <USBD_AUDIO_DataOut+0x7c>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004950:	2200      	movs	r2, #0
 8004952:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495c:	f893 3b84 	ldrb.w	r3, [r3, #2948]	; 0xb84
 8004960:	2b03      	cmp	r3, #3
 8004962:	d10f      	bne.n	8004984 <USBD_AUDIO_DataOut+0x7c>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	1d10      	adds	r0, r2, #4
 8004970:	2201      	movs	r2, #1
 8004972:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8004976:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2b84 	strb.w	r2, [r3, #2948]	; 0xb84
      }
    }

    if (haudio->rd_enable == 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498a:	f893 3b85 	ldrb.w	r3, [r3, #2949]	; 0xb85
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10d      	bne.n	80049ae <USBD_AUDIO_DataOut+0xa6>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004998:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 800499c:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 80049a0:	d105      	bne.n	80049ae <USBD_AUDIO_DataOut+0xa6>
      {
        haudio->rd_enable = 1U;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2b85 	strb.w	r2, [r3, #2949]	; 0xb85
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, &haudio->buffer[haudio->wr_ptr],
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b4:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 80049b8:	461a      	mov	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4413      	add	r3, r2
 80049be:	1d1a      	adds	r2, r3, #4
 80049c0:	2358      	movs	r3, #88	; 0x58
 80049c2:	2101      	movs	r1, #1
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f004 fafa 	bl	8008fbe <USBD_LL_PrepareReceive>
                           AUDIO_OUT_PACKET);
  }

  return USBD_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049e4:	60fb      	str	r3, [r7, #12]

  memset(haudio->control.data, 0, 64U);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80049ec:	330b      	adds	r3, #11
 80049ee:	2240      	movs	r2, #64	; 0x40
 80049f0:	2100      	movs	r1, #0
 80049f2:	4618      	mov	r0, r3
 80049f4:	f004 fb86 	bl	8009104 <memset>

  /* Send the current mute state */
  USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80049fe:	330b      	adds	r3, #11
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	88d2      	ldrh	r2, [r2, #6]
 8004a04:	4619      	mov	r1, r3
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f001 f86f 	bl	8005aea <USBD_CtlSendData>
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a24:	60fb      	str	r3, [r7, #12]

  if (req->wLength)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	88db      	ldrh	r3, [r3, #6]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d021      	beq.n	8004a72 <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8004a34:	330b      	adds	r3, #11
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	88d2      	ldrh	r2, [r2, #6]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f001 f882 	bl	8005b46 <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2b8a 	strb.w	r2, [r3, #2954]	; 0xb8a
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	88db      	ldrh	r3, [r3, #6]
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a5a:	f883 2bcb 	strb.w	r2, [r3, #3019]	; 0xbcb
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	889b      	ldrh	r3, [r3, #4]
 8004a62:	0a1b      	lsrs	r3, r3, #8
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a6e:	f883 2bcc 	strb.w	r2, [r3, #3020]	; 0xbcc
  }
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	220a      	movs	r2, #10
 8004a88:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8004a8a:	4b03      	ldr	r3, [pc, #12]	; (8004a98 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	200000b4 	.word	0x200000b4

08004a9c <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                      USBD_AUDIO_ItfTypeDef *fops)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <USBD_AUDIO_RegisterInterface+0x18>
  {
    pdev->pUserData = fops;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	4613      	mov	r3, r2
 8004acc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e01a      	b.n	8004b0e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	79fa      	ldrb	r2, [r7, #7]
 8004b04:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f004 f914 	bl	8008d34 <USBD_LL_Init>

  return USBD_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d006      	beq.n	8004b38 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]
 8004b36:	e001      	b.n	8004b3c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr

08004b48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f004 f92f 	bl	8008db4 <USBD_LL_Start>

  return USBD_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr

08004b74 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004b80:	2302      	movs	r3, #2
 8004b82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00c      	beq.n	8004ba8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	78fa      	ldrb	r2, [r7, #3]
 8004b98:	4611      	mov	r1, r2
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	78fa      	ldrb	r2, [r7, #3]
 8004bc8:	4611      	mov	r1, r2
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3

  return USBD_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004be8:	6839      	ldr	r1, [r7, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fed7 	bl	800599e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004bfe:	461a      	mov	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c0c:	f003 031f 	and.w	r3, r3, #31
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d016      	beq.n	8004c42 <USBD_LL_SetupStage+0x6a>
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d81c      	bhi.n	8004c52 <USBD_LL_SetupStage+0x7a>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <USBD_LL_SetupStage+0x4a>
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d008      	beq.n	8004c32 <USBD_LL_SetupStage+0x5a>
 8004c20:	e017      	b.n	8004c52 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f9ca 	bl	8004fc4 <USBD_StdDevReq>
      break;
 8004c30:	e01a      	b.n	8004c68 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004c38:	4619      	mov	r1, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa2c 	bl	8005098 <USBD_StdItfReq>
      break;
 8004c40:	e012      	b.n	8004c68 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004c48:	4619      	mov	r1, r3
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fa6c 	bl	8005128 <USBD_StdEPReq>
      break;
 8004c50:	e00a      	b.n	8004c68 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	4619      	mov	r1, r3
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f004 f907 	bl	8008e74 <USBD_LL_StallEP>
      break;
 8004c66:	bf00      	nop
  }

  return USBD_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b086      	sub	sp, #24
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	607a      	str	r2, [r7, #4]
 8004c7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004c80:	7afb      	ldrb	r3, [r7, #11]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d14b      	bne.n	8004d1e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004c8c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d134      	bne.n	8004d02 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d919      	bls.n	8004cd8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	1ad2      	subs	r2, r2, r3
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d203      	bcs.n	8004cc6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	e002      	b.n	8004ccc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 ff56 	bl	8005b82 <USBD_CtlContinueRx>
 8004cd6:	e038      	b.n	8004d4a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d105      	bne.n	8004cfa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 ff53 	bl	8005ba6 <USBD_CtlSendStatus>
 8004d00:	e023      	b.n	8004d4a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d08:	2b05      	cmp	r3, #5
 8004d0a:	d11e      	bne.n	8004d4a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004d14:	2100      	movs	r1, #0
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f004 f8ac 	bl	8008e74 <USBD_LL_StallEP>
 8004d1c:	e015      	b.n	8004d4a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00d      	beq.n	8004d46 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d108      	bne.n	8004d46 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	7afa      	ldrb	r2, [r7, #11]
 8004d3e:	4611      	mov	r1, r2
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	4798      	blx	r3
 8004d44:	e001      	b.n	8004d4a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004d46:	2302      	movs	r3, #2
 8004d48:	e000      	b.n	8004d4c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004d62:	7afb      	ldrb	r3, [r7, #11]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d17f      	bne.n	8004e68 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	3314      	adds	r3, #20
 8004d6c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d15c      	bne.n	8004e32 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d915      	bls.n	8004db0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	1ad2      	subs	r2, r2, r3
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 fec0 	bl	8005b22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004da2:	2300      	movs	r3, #0
 8004da4:	2200      	movs	r2, #0
 8004da6:	2100      	movs	r1, #0
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f004 f908 	bl	8008fbe <USBD_LL_PrepareReceive>
 8004dae:	e04e      	b.n	8004e4e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	6912      	ldr	r2, [r2, #16]
 8004db8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004dbc:	fb01 f202 	mul.w	r2, r1, r2
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d11c      	bne.n	8004e00 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d316      	bcc.n	8004e00 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d20f      	bcs.n	8004e00 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004de0:	2200      	movs	r2, #0
 8004de2:	2100      	movs	r1, #0
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fe9c 	bl	8005b22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004df2:	2300      	movs	r3, #0
 8004df4:	2200      	movs	r2, #0
 8004df6:	2100      	movs	r1, #0
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f004 f8e0 	bl	8008fbe <USBD_LL_PrepareReceive>
 8004dfe:	e026      	b.n	8004e4e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d105      	bne.n	8004e22 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004e22:	2180      	movs	r1, #128	; 0x80
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f004 f825 	bl	8008e74 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fece 	bl	8005bcc <USBD_CtlReceiveStatus>
 8004e30:	e00d      	b.n	8004e4e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d004      	beq.n	8004e46 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d103      	bne.n	8004e4e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004e46:	2180      	movs	r1, #128	; 0x80
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f004 f813 	bl	8008e74 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d11d      	bne.n	8004e94 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7ff fe81 	bl	8004b60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004e66:	e015      	b.n	8004e94 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00d      	beq.n	8004e90 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d108      	bne.n	8004e90 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	7afa      	ldrb	r2, [r7, #11]
 8004e88:	4611      	mov	r1, r2
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	4798      	blx	r3
 8004e8e:	e001      	b.n	8004e94 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004e90:	2302      	movs	r3, #2
 8004e92:	e000      	b.n	8004e96 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ea6:	2340      	movs	r3, #64	; 0x40
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2100      	movs	r1, #0
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f003 ff9c 	bl	8008dea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2240      	movs	r2, #64	; 0x40
 8004ebe:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ec2:	2340      	movs	r3, #64	; 0x40
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f003 ff8e 	bl	8008dea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2240      	movs	r2, #64	; 0x40
 8004ed8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d009      	beq.n	8004f16 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6852      	ldr	r2, [r2, #4]
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	4611      	mov	r1, r2
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	4798      	blx	r3
  }

  return USBD_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	78fa      	ldrb	r2, [r7, #3]
 8004f30:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc80      	pop	{r7}
 8004f3c:	4770      	bx	lr

08004f3e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2204      	movs	r2, #4
 8004f56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr

08004f66 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d105      	bne.n	8004f84 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr

08004f90 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d10b      	bne.n	8004fba <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fda:	2b40      	cmp	r3, #64	; 0x40
 8004fdc:	d005      	beq.n	8004fea <USBD_StdDevReq+0x26>
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d84f      	bhi.n	8005082 <USBD_StdDevReq+0xbe>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <USBD_StdDevReq+0x36>
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d14b      	bne.n	8005082 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	6839      	ldr	r1, [r7, #0]
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	4798      	blx	r3
      break;
 8004ff8:	e048      	b.n	800508c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	2b09      	cmp	r3, #9
 8005000:	d839      	bhi.n	8005076 <USBD_StdDevReq+0xb2>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <USBD_StdDevReq+0x44>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	08005059 	.word	0x08005059
 800500c:	0800506d 	.word	0x0800506d
 8005010:	08005077 	.word	0x08005077
 8005014:	08005063 	.word	0x08005063
 8005018:	08005077 	.word	0x08005077
 800501c:	0800503b 	.word	0x0800503b
 8005020:	08005031 	.word	0x08005031
 8005024:	08005077 	.word	0x08005077
 8005028:	0800504f 	.word	0x0800504f
 800502c:	08005045 	.word	0x08005045
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005030:	6839      	ldr	r1, [r7, #0]
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f9dc 	bl	80053f0 <USBD_GetDescriptor>
          break;
 8005038:	e022      	b.n	8005080 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800503a:	6839      	ldr	r1, [r7, #0]
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fb3f 	bl	80056c0 <USBD_SetAddress>
          break;
 8005042:	e01d      	b.n	8005080 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005044:	6839      	ldr	r1, [r7, #0]
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fb7e 	bl	8005748 <USBD_SetConfig>
          break;
 800504c:	e018      	b.n	8005080 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fc07 	bl	8005864 <USBD_GetConfig>
          break;
 8005056:	e013      	b.n	8005080 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fc37 	bl	80058ce <USBD_GetStatus>
          break;
 8005060:	e00e      	b.n	8005080 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005062:	6839      	ldr	r1, [r7, #0]
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fc65 	bl	8005934 <USBD_SetFeature>
          break;
 800506a:	e009      	b.n	8005080 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800506c:	6839      	ldr	r1, [r7, #0]
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fc74 	bl	800595c <USBD_ClrFeature>
          break;
 8005074:	e004      	b.n	8005080 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005076:	6839      	ldr	r1, [r7, #0]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fccc 	bl	8005a16 <USBD_CtlError>
          break;
 800507e:	bf00      	nop
      }
      break;
 8005080:	e004      	b.n	800508c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005082:	6839      	ldr	r1, [r7, #0]
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fcc6 	bl	8005a16 <USBD_CtlError>
      break;
 800508a:	bf00      	nop
  }

  return ret;
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop

08005098 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050ae:	2b40      	cmp	r3, #64	; 0x40
 80050b0:	d005      	beq.n	80050be <USBD_StdItfReq+0x26>
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	d82e      	bhi.n	8005114 <USBD_StdItfReq+0x7c>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <USBD_StdItfReq+0x26>
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d12a      	bne.n	8005114 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050c4:	3b01      	subs	r3, #1
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d81d      	bhi.n	8005106 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	889b      	ldrh	r3, [r3, #4]
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d813      	bhi.n	80050fc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	6839      	ldr	r1, [r7, #0]
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	4798      	blx	r3
 80050e2:	4603      	mov	r3, r0
 80050e4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	88db      	ldrh	r3, [r3, #6]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d110      	bne.n	8005110 <USBD_StdItfReq+0x78>
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10d      	bne.n	8005110 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fd56 	bl	8005ba6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80050fa:	e009      	b.n	8005110 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fc89 	bl	8005a16 <USBD_CtlError>
          break;
 8005104:	e004      	b.n	8005110 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005106:	6839      	ldr	r1, [r7, #0]
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 fc84 	bl	8005a16 <USBD_CtlError>
          break;
 800510e:	e000      	b.n	8005112 <USBD_StdItfReq+0x7a>
          break;
 8005110:	bf00      	nop
      }
      break;
 8005112:	e004      	b.n	800511e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005114:	6839      	ldr	r1, [r7, #0]
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fc7d 	bl	8005a16 <USBD_CtlError>
      break;
 800511c:	bf00      	nop
  }

  return USBD_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	889b      	ldrh	r3, [r3, #4]
 800513a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005144:	2b40      	cmp	r3, #64	; 0x40
 8005146:	d007      	beq.n	8005158 <USBD_StdEPReq+0x30>
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	f200 8146 	bhi.w	80053da <USBD_StdEPReq+0x2b2>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <USBD_StdEPReq+0x40>
 8005152:	2b20      	cmp	r3, #32
 8005154:	f040 8141 	bne.w	80053da <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	6839      	ldr	r1, [r7, #0]
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	4798      	blx	r3
      break;
 8005166:	e13d      	b.n	80053e4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005170:	2b20      	cmp	r3, #32
 8005172:	d10a      	bne.n	800518a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	6839      	ldr	r1, [r7, #0]
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	4798      	blx	r3
 8005182:	4603      	mov	r3, r0
 8005184:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005186:	7bfb      	ldrb	r3, [r7, #15]
 8005188:	e12d      	b.n	80053e6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	785b      	ldrb	r3, [r3, #1]
 800518e:	2b03      	cmp	r3, #3
 8005190:	d007      	beq.n	80051a2 <USBD_StdEPReq+0x7a>
 8005192:	2b03      	cmp	r3, #3
 8005194:	f300 811b 	bgt.w	80053ce <USBD_StdEPReq+0x2a6>
 8005198:	2b00      	cmp	r3, #0
 800519a:	d072      	beq.n	8005282 <USBD_StdEPReq+0x15a>
 800519c:	2b01      	cmp	r3, #1
 800519e:	d03a      	beq.n	8005216 <USBD_StdEPReq+0xee>
 80051a0:	e115      	b.n	80053ce <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d002      	beq.n	80051b2 <USBD_StdEPReq+0x8a>
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d015      	beq.n	80051dc <USBD_StdEPReq+0xb4>
 80051b0:	e02b      	b.n	800520a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80051b2:	7bbb      	ldrb	r3, [r7, #14]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00c      	beq.n	80051d2 <USBD_StdEPReq+0xaa>
 80051b8:	7bbb      	ldrb	r3, [r7, #14]
 80051ba:	2b80      	cmp	r3, #128	; 0x80
 80051bc:	d009      	beq.n	80051d2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80051be:	7bbb      	ldrb	r3, [r7, #14]
 80051c0:	4619      	mov	r1, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f003 fe56 	bl	8008e74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80051c8:	2180      	movs	r1, #128	; 0x80
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f003 fe52 	bl	8008e74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80051d0:	e020      	b.n	8005214 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80051d2:	6839      	ldr	r1, [r7, #0]
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fc1e 	bl	8005a16 <USBD_CtlError>
              break;
 80051da:	e01b      	b.n	8005214 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	885b      	ldrh	r3, [r3, #2]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10e      	bne.n	8005202 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80051e4:	7bbb      	ldrb	r3, [r7, #14]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00b      	beq.n	8005202 <USBD_StdEPReq+0xda>
 80051ea:	7bbb      	ldrb	r3, [r7, #14]
 80051ec:	2b80      	cmp	r3, #128	; 0x80
 80051ee:	d008      	beq.n	8005202 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	88db      	ldrh	r3, [r3, #6]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d104      	bne.n	8005202 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80051f8:	7bbb      	ldrb	r3, [r7, #14]
 80051fa:	4619      	mov	r1, r3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f003 fe39 	bl	8008e74 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fccf 	bl	8005ba6 <USBD_CtlSendStatus>

              break;
 8005208:	e004      	b.n	8005214 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fc02 	bl	8005a16 <USBD_CtlError>
              break;
 8005212:	bf00      	nop
          }
          break;
 8005214:	e0e0      	b.n	80053d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800521c:	2b02      	cmp	r3, #2
 800521e:	d002      	beq.n	8005226 <USBD_StdEPReq+0xfe>
 8005220:	2b03      	cmp	r3, #3
 8005222:	d015      	beq.n	8005250 <USBD_StdEPReq+0x128>
 8005224:	e026      	b.n	8005274 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005226:	7bbb      	ldrb	r3, [r7, #14]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00c      	beq.n	8005246 <USBD_StdEPReq+0x11e>
 800522c:	7bbb      	ldrb	r3, [r7, #14]
 800522e:	2b80      	cmp	r3, #128	; 0x80
 8005230:	d009      	beq.n	8005246 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005232:	7bbb      	ldrb	r3, [r7, #14]
 8005234:	4619      	mov	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f003 fe1c 	bl	8008e74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800523c:	2180      	movs	r1, #128	; 0x80
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f003 fe18 	bl	8008e74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005244:	e01c      	b.n	8005280 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005246:	6839      	ldr	r1, [r7, #0]
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fbe4 	bl	8005a16 <USBD_CtlError>
              break;
 800524e:	e017      	b.n	8005280 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	885b      	ldrh	r3, [r3, #2]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d112      	bne.n	800527e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005258:	7bbb      	ldrb	r3, [r7, #14]
 800525a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800525e:	2b00      	cmp	r3, #0
 8005260:	d004      	beq.n	800526c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005262:	7bbb      	ldrb	r3, [r7, #14]
 8005264:	4619      	mov	r1, r3
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f003 fe23 	bl	8008eb2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fc9a 	bl	8005ba6 <USBD_CtlSendStatus>
              }
              break;
 8005272:	e004      	b.n	800527e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fbcd 	bl	8005a16 <USBD_CtlError>
              break;
 800527c:	e000      	b.n	8005280 <USBD_StdEPReq+0x158>
              break;
 800527e:	bf00      	nop
          }
          break;
 8005280:	e0aa      	b.n	80053d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005288:	2b02      	cmp	r3, #2
 800528a:	d002      	beq.n	8005292 <USBD_StdEPReq+0x16a>
 800528c:	2b03      	cmp	r3, #3
 800528e:	d032      	beq.n	80052f6 <USBD_StdEPReq+0x1ce>
 8005290:	e097      	b.n	80053c2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005292:	7bbb      	ldrb	r3, [r7, #14]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d007      	beq.n	80052a8 <USBD_StdEPReq+0x180>
 8005298:	7bbb      	ldrb	r3, [r7, #14]
 800529a:	2b80      	cmp	r3, #128	; 0x80
 800529c:	d004      	beq.n	80052a8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800529e:	6839      	ldr	r1, [r7, #0]
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fbb8 	bl	8005a16 <USBD_CtlError>
                break;
 80052a6:	e091      	b.n	80053cc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	da0b      	bge.n	80052c8 <USBD_StdEPReq+0x1a0>
 80052b0:	7bbb      	ldrb	r3, [r7, #14]
 80052b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	3310      	adds	r3, #16
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	4413      	add	r3, r2
 80052c4:	3304      	adds	r3, #4
 80052c6:	e00b      	b.n	80052e0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80052c8:	7bbb      	ldrb	r3, [r7, #14]
 80052ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	4413      	add	r3, r2
 80052de:	3304      	adds	r3, #4
 80052e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2202      	movs	r2, #2
 80052ec:	4619      	mov	r1, r3
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fbfb 	bl	8005aea <USBD_CtlSendData>
              break;
 80052f4:	e06a      	b.n	80053cc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80052f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	da11      	bge.n	8005322 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80052fe:	7bbb      	ldrb	r3, [r7, #14]
 8005300:	f003 020f 	and.w	r2, r3, #15
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	440b      	add	r3, r1
 8005310:	3318      	adds	r3, #24
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d117      	bne.n	8005348 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fb7b 	bl	8005a16 <USBD_CtlError>
                  break;
 8005320:	e054      	b.n	80053cc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005322:	7bbb      	ldrb	r3, [r7, #14]
 8005324:	f003 020f 	and.w	r2, r3, #15
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	440b      	add	r3, r1
 8005334:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d104      	bne.n	8005348 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fb68 	bl	8005a16 <USBD_CtlError>
                  break;
 8005346:	e041      	b.n	80053cc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005348:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800534c:	2b00      	cmp	r3, #0
 800534e:	da0b      	bge.n	8005368 <USBD_StdEPReq+0x240>
 8005350:	7bbb      	ldrb	r3, [r7, #14]
 8005352:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	3310      	adds	r3, #16
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	4413      	add	r3, r2
 8005364:	3304      	adds	r3, #4
 8005366:	e00b      	b.n	8005380 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005368:	7bbb      	ldrb	r3, [r7, #14]
 800536a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	4413      	add	r3, r2
 800537e:	3304      	adds	r3, #4
 8005380:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005382:	7bbb      	ldrb	r3, [r7, #14]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <USBD_StdEPReq+0x266>
 8005388:	7bbb      	ldrb	r3, [r7, #14]
 800538a:	2b80      	cmp	r3, #128	; 0x80
 800538c:	d103      	bne.n	8005396 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e00e      	b.n	80053b4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005396:	7bbb      	ldrb	r3, [r7, #14]
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f003 fda8 	bl	8008ef0 <USBD_LL_IsStallEP>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2201      	movs	r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	e002      	b.n	80053b4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2202      	movs	r2, #2
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fb95 	bl	8005aea <USBD_CtlSendData>
              break;
 80053c0:	e004      	b.n	80053cc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80053c2:	6839      	ldr	r1, [r7, #0]
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fb26 	bl	8005a16 <USBD_CtlError>
              break;
 80053ca:	bf00      	nop
          }
          break;
 80053cc:	e004      	b.n	80053d8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80053ce:	6839      	ldr	r1, [r7, #0]
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fb20 	bl	8005a16 <USBD_CtlError>
          break;
 80053d6:	bf00      	nop
      }
      break;
 80053d8:	e004      	b.n	80053e4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80053da:	6839      	ldr	r1, [r7, #0]
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fb1a 	bl	8005a16 <USBD_CtlError>
      break;
 80053e2:	bf00      	nop
  }

  return ret;
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	885b      	ldrh	r3, [r3, #2]
 800540a:	0a1b      	lsrs	r3, r3, #8
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	2b06      	cmp	r3, #6
 8005412:	f200 8128 	bhi.w	8005666 <USBD_GetDescriptor+0x276>
 8005416:	a201      	add	r2, pc, #4	; (adr r2, 800541c <USBD_GetDescriptor+0x2c>)
 8005418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541c:	08005439 	.word	0x08005439
 8005420:	08005451 	.word	0x08005451
 8005424:	08005491 	.word	0x08005491
 8005428:	08005667 	.word	0x08005667
 800542c:	08005667 	.word	0x08005667
 8005430:	08005607 	.word	0x08005607
 8005434:	08005633 	.word	0x08005633
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	7c12      	ldrb	r2, [r2, #16]
 8005444:	f107 0108 	add.w	r1, r7, #8
 8005448:	4610      	mov	r0, r2
 800544a:	4798      	blx	r3
 800544c:	60f8      	str	r0, [r7, #12]
      break;
 800544e:	e112      	b.n	8005676 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	7c1b      	ldrb	r3, [r3, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10d      	bne.n	8005474 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	f107 0208 	add.w	r2, r7, #8
 8005464:	4610      	mov	r0, r2
 8005466:	4798      	blx	r3
 8005468:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3301      	adds	r3, #1
 800546e:	2202      	movs	r2, #2
 8005470:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005472:	e100      	b.n	8005676 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	f107 0208 	add.w	r2, r7, #8
 8005480:	4610      	mov	r0, r2
 8005482:	4798      	blx	r3
 8005484:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3301      	adds	r3, #1
 800548a:	2202      	movs	r2, #2
 800548c:	701a      	strb	r2, [r3, #0]
      break;
 800548e:	e0f2      	b.n	8005676 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	885b      	ldrh	r3, [r3, #2]
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b05      	cmp	r3, #5
 8005498:	f200 80ac 	bhi.w	80055f4 <USBD_GetDescriptor+0x204>
 800549c:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <USBD_GetDescriptor+0xb4>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080054bd 	.word	0x080054bd
 80054a8:	080054f1 	.word	0x080054f1
 80054ac:	08005525 	.word	0x08005525
 80054b0:	08005559 	.word	0x08005559
 80054b4:	0800558d 	.word	0x0800558d
 80054b8:	080055c1 	.word	0x080055c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00b      	beq.n	80054e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	7c12      	ldrb	r2, [r2, #16]
 80054d4:	f107 0108 	add.w	r1, r7, #8
 80054d8:	4610      	mov	r0, r2
 80054da:	4798      	blx	r3
 80054dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054de:	e091      	b.n	8005604 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054e0:	6839      	ldr	r1, [r7, #0]
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fa97 	bl	8005a16 <USBD_CtlError>
            err++;
 80054e8:	7afb      	ldrb	r3, [r7, #11]
 80054ea:	3301      	adds	r3, #1
 80054ec:	72fb      	strb	r3, [r7, #11]
          break;
 80054ee:	e089      	b.n	8005604 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00b      	beq.n	8005514 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	7c12      	ldrb	r2, [r2, #16]
 8005508:	f107 0108 	add.w	r1, r7, #8
 800550c:	4610      	mov	r0, r2
 800550e:	4798      	blx	r3
 8005510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005512:	e077      	b.n	8005604 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fa7d 	bl	8005a16 <USBD_CtlError>
            err++;
 800551c:	7afb      	ldrb	r3, [r7, #11]
 800551e:	3301      	adds	r3, #1
 8005520:	72fb      	strb	r3, [r7, #11]
          break;
 8005522:	e06f      	b.n	8005604 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00b      	beq.n	8005548 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	7c12      	ldrb	r2, [r2, #16]
 800553c:	f107 0108 	add.w	r1, r7, #8
 8005540:	4610      	mov	r0, r2
 8005542:	4798      	blx	r3
 8005544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005546:	e05d      	b.n	8005604 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005548:	6839      	ldr	r1, [r7, #0]
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fa63 	bl	8005a16 <USBD_CtlError>
            err++;
 8005550:	7afb      	ldrb	r3, [r7, #11]
 8005552:	3301      	adds	r3, #1
 8005554:	72fb      	strb	r3, [r7, #11]
          break;
 8005556:	e055      	b.n	8005604 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00b      	beq.n	800557c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	7c12      	ldrb	r2, [r2, #16]
 8005570:	f107 0108 	add.w	r1, r7, #8
 8005574:	4610      	mov	r0, r2
 8005576:	4798      	blx	r3
 8005578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800557a:	e043      	b.n	8005604 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800557c:	6839      	ldr	r1, [r7, #0]
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fa49 	bl	8005a16 <USBD_CtlError>
            err++;
 8005584:	7afb      	ldrb	r3, [r7, #11]
 8005586:	3301      	adds	r3, #1
 8005588:	72fb      	strb	r3, [r7, #11]
          break;
 800558a:	e03b      	b.n	8005604 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00b      	beq.n	80055b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	7c12      	ldrb	r2, [r2, #16]
 80055a4:	f107 0108 	add.w	r1, r7, #8
 80055a8:	4610      	mov	r0, r2
 80055aa:	4798      	blx	r3
 80055ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055ae:	e029      	b.n	8005604 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fa2f 	bl	8005a16 <USBD_CtlError>
            err++;
 80055b8:	7afb      	ldrb	r3, [r7, #11]
 80055ba:	3301      	adds	r3, #1
 80055bc:	72fb      	strb	r3, [r7, #11]
          break;
 80055be:	e021      	b.n	8005604 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00b      	beq.n	80055e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	7c12      	ldrb	r2, [r2, #16]
 80055d8:	f107 0108 	add.w	r1, r7, #8
 80055dc:	4610      	mov	r0, r2
 80055de:	4798      	blx	r3
 80055e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055e2:	e00f      	b.n	8005604 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa15 	bl	8005a16 <USBD_CtlError>
            err++;
 80055ec:	7afb      	ldrb	r3, [r7, #11]
 80055ee:	3301      	adds	r3, #1
 80055f0:	72fb      	strb	r3, [r7, #11]
          break;
 80055f2:	e007      	b.n	8005604 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80055f4:	6839      	ldr	r1, [r7, #0]
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fa0d 	bl	8005a16 <USBD_CtlError>
          err++;
 80055fc:	7afb      	ldrb	r3, [r7, #11]
 80055fe:	3301      	adds	r3, #1
 8005600:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005602:	e038      	b.n	8005676 <USBD_GetDescriptor+0x286>
 8005604:	e037      	b.n	8005676 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	7c1b      	ldrb	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005616:	f107 0208 	add.w	r2, r7, #8
 800561a:	4610      	mov	r0, r2
 800561c:	4798      	blx	r3
 800561e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005620:	e029      	b.n	8005676 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005622:	6839      	ldr	r1, [r7, #0]
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f9f6 	bl	8005a16 <USBD_CtlError>
        err++;
 800562a:	7afb      	ldrb	r3, [r7, #11]
 800562c:	3301      	adds	r3, #1
 800562e:	72fb      	strb	r3, [r7, #11]
      break;
 8005630:	e021      	b.n	8005676 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	7c1b      	ldrb	r3, [r3, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10d      	bne.n	8005656 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	f107 0208 	add.w	r2, r7, #8
 8005646:	4610      	mov	r0, r2
 8005648:	4798      	blx	r3
 800564a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	3301      	adds	r3, #1
 8005650:	2207      	movs	r2, #7
 8005652:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005654:	e00f      	b.n	8005676 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f9dc 	bl	8005a16 <USBD_CtlError>
        err++;
 800565e:	7afb      	ldrb	r3, [r7, #11]
 8005660:	3301      	adds	r3, #1
 8005662:	72fb      	strb	r3, [r7, #11]
      break;
 8005664:	e007      	b.n	8005676 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005666:	6839      	ldr	r1, [r7, #0]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f9d4 	bl	8005a16 <USBD_CtlError>
      err++;
 800566e:	7afb      	ldrb	r3, [r7, #11]
 8005670:	3301      	adds	r3, #1
 8005672:	72fb      	strb	r3, [r7, #11]
      break;
 8005674:	bf00      	nop
  }

  if (err != 0U)
 8005676:	7afb      	ldrb	r3, [r7, #11]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d11c      	bne.n	80056b6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800567c:	893b      	ldrh	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d011      	beq.n	80056a6 <USBD_GetDescriptor+0x2b6>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	88db      	ldrh	r3, [r3, #6]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00d      	beq.n	80056a6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	88da      	ldrh	r2, [r3, #6]
 800568e:	893b      	ldrh	r3, [r7, #8]
 8005690:	4293      	cmp	r3, r2
 8005692:	bf28      	it	cs
 8005694:	4613      	movcs	r3, r2
 8005696:	b29b      	uxth	r3, r3
 8005698:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800569a:	893b      	ldrh	r3, [r7, #8]
 800569c:	461a      	mov	r2, r3
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fa22 	bl	8005aea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	88db      	ldrh	r3, [r3, #6]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d104      	bne.n	80056b8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fa79 	bl	8005ba6 <USBD_CtlSendStatus>
 80056b4:	e000      	b.n	80056b8 <USBD_GetDescriptor+0x2c8>
    return;
 80056b6:	bf00      	nop
    }
  }
}
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop

080056c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	889b      	ldrh	r3, [r3, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d130      	bne.n	8005734 <USBD_SetAddress+0x74>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	88db      	ldrh	r3, [r3, #6]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d12c      	bne.n	8005734 <USBD_SetAddress+0x74>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	885b      	ldrh	r3, [r3, #2]
 80056de:	2b7f      	cmp	r3, #127	; 0x7f
 80056e0:	d828      	bhi.n	8005734 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	885b      	ldrh	r3, [r3, #2]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d104      	bne.n	8005702 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80056f8:	6839      	ldr	r1, [r7, #0]
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f98b 	bl	8005a16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005700:	e01d      	b.n	800573e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	7bfa      	ldrb	r2, [r7, #15]
 8005706:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f003 fc13 	bl	8008f3a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fa46 	bl	8005ba6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800571a:	7bfb      	ldrb	r3, [r7, #15]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005728:	e009      	b.n	800573e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005732:	e004      	b.n	800573e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005734:	6839      	ldr	r1, [r7, #0]
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f96d 	bl	8005a16 <USBD_CtlError>
  }
}
 800573c:	bf00      	nop
 800573e:	bf00      	nop
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	885b      	ldrh	r3, [r3, #2]
 8005756:	b2da      	uxtb	r2, r3
 8005758:	4b41      	ldr	r3, [pc, #260]	; (8005860 <USBD_SetConfig+0x118>)
 800575a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800575c:	4b40      	ldr	r3, [pc, #256]	; (8005860 <USBD_SetConfig+0x118>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d904      	bls.n	800576e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005764:	6839      	ldr	r1, [r7, #0]
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f955 	bl	8005a16 <USBD_CtlError>
 800576c:	e075      	b.n	800585a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005774:	2b02      	cmp	r3, #2
 8005776:	d002      	beq.n	800577e <USBD_SetConfig+0x36>
 8005778:	2b03      	cmp	r3, #3
 800577a:	d023      	beq.n	80057c4 <USBD_SetConfig+0x7c>
 800577c:	e062      	b.n	8005844 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800577e:	4b38      	ldr	r3, [pc, #224]	; (8005860 <USBD_SetConfig+0x118>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d01a      	beq.n	80057bc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005786:	4b36      	ldr	r3, [pc, #216]	; (8005860 <USBD_SetConfig+0x118>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2203      	movs	r2, #3
 8005794:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005798:	4b31      	ldr	r3, [pc, #196]	; (8005860 <USBD_SetConfig+0x118>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff f9e8 	bl	8004b74 <USBD_SetClassConfig>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d104      	bne.n	80057b4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80057aa:	6839      	ldr	r1, [r7, #0]
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f932 	bl	8005a16 <USBD_CtlError>
            return;
 80057b2:	e052      	b.n	800585a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f9f6 	bl	8005ba6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80057ba:	e04e      	b.n	800585a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f9f2 	bl	8005ba6 <USBD_CtlSendStatus>
        break;
 80057c2:	e04a      	b.n	800585a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80057c4:	4b26      	ldr	r3, [pc, #152]	; (8005860 <USBD_SetConfig+0x118>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d112      	bne.n	80057f2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80057d4:	4b22      	ldr	r3, [pc, #136]	; (8005860 <USBD_SetConfig+0x118>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80057de:	4b20      	ldr	r3, [pc, #128]	; (8005860 <USBD_SetConfig+0x118>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff f9e4 	bl	8004bb2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f9db 	bl	8005ba6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80057f0:	e033      	b.n	800585a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80057f2:	4b1b      	ldr	r3, [pc, #108]	; (8005860 <USBD_SetConfig+0x118>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d01d      	beq.n	800583c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	b2db      	uxtb	r3, r3
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff f9d2 	bl	8004bb2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800580e:	4b14      	ldr	r3, [pc, #80]	; (8005860 <USBD_SetConfig+0x118>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005818:	4b11      	ldr	r3, [pc, #68]	; (8005860 <USBD_SetConfig+0x118>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	4619      	mov	r1, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff f9a8 	bl	8004b74 <USBD_SetClassConfig>
 8005824:	4603      	mov	r3, r0
 8005826:	2b02      	cmp	r3, #2
 8005828:	d104      	bne.n	8005834 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800582a:	6839      	ldr	r1, [r7, #0]
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f8f2 	bl	8005a16 <USBD_CtlError>
            return;
 8005832:	e012      	b.n	800585a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f9b6 	bl	8005ba6 <USBD_CtlSendStatus>
        break;
 800583a:	e00e      	b.n	800585a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f9b2 	bl	8005ba6 <USBD_CtlSendStatus>
        break;
 8005842:	e00a      	b.n	800585a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f8e5 	bl	8005a16 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800584c:	4b04      	ldr	r3, [pc, #16]	; (8005860 <USBD_SetConfig+0x118>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	4619      	mov	r1, r3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff f9ad 	bl	8004bb2 <USBD_ClrClassConfig>
        break;
 8005858:	bf00      	nop
    }
  }
}
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20000318 	.word	0x20000318

08005864 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	88db      	ldrh	r3, [r3, #6]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d004      	beq.n	8005880 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005876:	6839      	ldr	r1, [r7, #0]
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f8cc 	bl	8005a16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800587e:	e022      	b.n	80058c6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005886:	2b02      	cmp	r3, #2
 8005888:	dc02      	bgt.n	8005890 <USBD_GetConfig+0x2c>
 800588a:	2b00      	cmp	r3, #0
 800588c:	dc03      	bgt.n	8005896 <USBD_GetConfig+0x32>
 800588e:	e015      	b.n	80058bc <USBD_GetConfig+0x58>
 8005890:	2b03      	cmp	r3, #3
 8005892:	d00b      	beq.n	80058ac <USBD_GetConfig+0x48>
 8005894:	e012      	b.n	80058bc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3308      	adds	r3, #8
 80058a0:	2201      	movs	r2, #1
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f920 	bl	8005aea <USBD_CtlSendData>
        break;
 80058aa:	e00c      	b.n	80058c6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3304      	adds	r3, #4
 80058b0:	2201      	movs	r2, #1
 80058b2:	4619      	mov	r1, r3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f918 	bl	8005aea <USBD_CtlSendData>
        break;
 80058ba:	e004      	b.n	80058c6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f8a9 	bl	8005a16 <USBD_CtlError>
        break;
 80058c4:	bf00      	nop
}
 80058c6:	bf00      	nop
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b082      	sub	sp, #8
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058de:	3b01      	subs	r3, #1
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d81e      	bhi.n	8005922 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	88db      	ldrh	r3, [r3, #6]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d004      	beq.n	80058f6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f891 	bl	8005a16 <USBD_CtlError>
        break;
 80058f4:	e01a      	b.n	800592c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f043 0202 	orr.w	r2, r3, #2
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	330c      	adds	r3, #12
 8005916:	2202      	movs	r2, #2
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f8e5 	bl	8005aea <USBD_CtlSendData>
      break;
 8005920:	e004      	b.n	800592c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f876 	bl	8005a16 <USBD_CtlError>
      break;
 800592a:	bf00      	nop
  }
}
 800592c:	bf00      	nop
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	885b      	ldrh	r3, [r3, #2]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d106      	bne.n	8005954 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f929 	bl	8005ba6 <USBD_CtlSendStatus>
  }
}
 8005954:	bf00      	nop
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800596c:	3b01      	subs	r3, #1
 800596e:	2b02      	cmp	r3, #2
 8005970:	d80b      	bhi.n	800598a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	885b      	ldrh	r3, [r3, #2]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d10c      	bne.n	8005994 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f90f 	bl	8005ba6 <USBD_CtlSendStatus>
      }
      break;
 8005988:	e004      	b.n	8005994 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f842 	bl	8005a16 <USBD_CtlError>
      break;
 8005992:	e000      	b.n	8005996 <USBD_ClrFeature+0x3a>
      break;
 8005994:	bf00      	nop
  }
}
 8005996:	bf00      	nop
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781a      	ldrb	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	785a      	ldrb	r2, [r3, #1]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	3302      	adds	r3, #2
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	b29a      	uxth	r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	3303      	adds	r3, #3
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	4413      	add	r3, r2
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	3304      	adds	r3, #4
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	b29a      	uxth	r2, r3
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	3305      	adds	r3, #5
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	021b      	lsls	r3, r3, #8
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	4413      	add	r3, r2
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	3306      	adds	r3, #6
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	3307      	adds	r3, #7
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	4413      	add	r3, r2
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	80da      	strh	r2, [r3, #6]

}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr

08005a16 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b082      	sub	sp, #8
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005a20:	2180      	movs	r1, #128	; 0x80
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f003 fa26 	bl	8008e74 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005a28:	2100      	movs	r1, #0
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f003 fa22 	bl	8008e74 <USBD_LL_StallEP>
}
 8005a30:	bf00      	nop
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d032      	beq.n	8005ab4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 f834 	bl	8005abc <USBD_GetLen>
 8005a54:	4603      	mov	r3, r0
 8005a56:	3301      	adds	r3, #1
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005a62:	7dfb      	ldrb	r3, [r7, #23]
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	75fa      	strb	r2, [r7, #23]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	7812      	ldrb	r2, [r2, #0]
 8005a72:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005a74:	7dfb      	ldrb	r3, [r7, #23]
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	75fa      	strb	r2, [r7, #23]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4413      	add	r3, r2
 8005a80:	2203      	movs	r2, #3
 8005a82:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005a84:	e012      	b.n	8005aac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	60fa      	str	r2, [r7, #12]
 8005a8c:	7dfa      	ldrb	r2, [r7, #23]
 8005a8e:	1c51      	adds	r1, r2, #1
 8005a90:	75f9      	strb	r1, [r7, #23]
 8005a92:	4611      	mov	r1, r2
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	440a      	add	r2, r1
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005a9c:	7dfb      	ldrb	r3, [r7, #23]
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	75fa      	strb	r2, [r7, #23]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e8      	bne.n	8005a86 <USBD_GetString+0x4e>
    }
  }
}
 8005ab4:	bf00      	nop
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005ac8:	e005      	b.n	8005ad6 <USBD_GetLen+0x1a>
  {
    len++;
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	3301      	adds	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f5      	bne.n	8005aca <USBD_GetLen+0xe>
  }

  return len;
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr

08005aea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	4613      	mov	r3, r2
 8005af6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005b00:	88fa      	ldrh	r2, [r7, #6]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005b06:	88fa      	ldrh	r2, [r7, #6]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b0c:	88fb      	ldrh	r3, [r7, #6]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	2100      	movs	r1, #0
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f003 fa30 	bl	8008f78 <USBD_LL_Transmit>

  return USBD_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b30:	88fb      	ldrh	r3, [r7, #6]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	2100      	movs	r1, #0
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f003 fa1e 	bl	8008f78 <USBD_LL_Transmit>

  return USBD_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b084      	sub	sp, #16
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	4613      	mov	r3, r2
 8005b52:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2203      	movs	r2, #3
 8005b58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005b5c:	88fa      	ldrh	r2, [r7, #6]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005b64:	88fa      	ldrh	r2, [r7, #6]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b6c:	88fb      	ldrh	r3, [r7, #6]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	2100      	movs	r1, #0
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f003 fa23 	bl	8008fbe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b90:	88fb      	ldrh	r3, [r7, #6]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	2100      	movs	r1, #0
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f003 fa11 	bl	8008fbe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2204      	movs	r2, #4
 8005bb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2100      	movs	r1, #0
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f003 f9db 	bl	8008f78 <USBD_LL_Transmit>

  return USBD_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2205      	movs	r2, #5
 8005bd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2200      	movs	r2, #0
 8005be0:	2100      	movs	r1, #0
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f003 f9eb 	bl	8008fbe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bfa:	f3ef 8305 	mrs	r3, IPSR
 8005bfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10f      	bne.n	8005c26 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c06:	f3ef 8310 	mrs	r3, PRIMASK
 8005c0a:	607b      	str	r3, [r7, #4]
  return(result);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <osKernelInitialize+0x32>
 8005c12:	4b10      	ldr	r3, [pc, #64]	; (8005c54 <osKernelInitialize+0x60>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d109      	bne.n	8005c2e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c1a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c1e:	603b      	str	r3, [r7, #0]
  return(result);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005c26:	f06f 0305 	mvn.w	r3, #5
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	e00c      	b.n	8005c48 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c2e:	4b09      	ldr	r3, [pc, #36]	; (8005c54 <osKernelInitialize+0x60>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d105      	bne.n	8005c42 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005c36:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <osKernelInitialize+0x60>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e002      	b.n	8005c48 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005c42:	f04f 33ff 	mov.w	r3, #4294967295
 8005c46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005c48:	68fb      	ldr	r3, [r7, #12]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr
 8005c54:	2000031c 	.word	0x2000031c

08005c58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c5e:	f3ef 8305 	mrs	r3, IPSR
 8005c62:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10f      	bne.n	8005c8a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c6e:	607b      	str	r3, [r7, #4]
  return(result);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <osKernelStart+0x32>
 8005c76:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <osKernelStart+0x64>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d109      	bne.n	8005c92 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c7e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c82:	603b      	str	r3, [r7, #0]
  return(result);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005c8a:	f06f 0305 	mvn.w	r3, #5
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e00e      	b.n	8005cb0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c92:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <osKernelStart+0x64>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d107      	bne.n	8005caa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005c9a:	4b08      	ldr	r3, [pc, #32]	; (8005cbc <osKernelStart+0x64>)
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005ca0:	f001 f92a 	bl	8006ef8 <vTaskStartScheduler>
      stat = osOK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	e002      	b.n	8005cb0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005caa:	f04f 33ff 	mov.w	r3, #4294967295
 8005cae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	2000031c 	.word	0x2000031c

08005cc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b092      	sub	sp, #72	; 0x48
 8005cc4:	af04      	add	r7, sp, #16
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cd0:	f3ef 8305 	mrs	r3, IPSR
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f040 8094 	bne.w	8005e06 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cde:	f3ef 8310 	mrs	r3, PRIMASK
 8005ce2:	623b      	str	r3, [r7, #32]
  return(result);
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f040 808d 	bne.w	8005e06 <osThreadNew+0x146>
 8005cec:	4b48      	ldr	r3, [pc, #288]	; (8005e10 <osThreadNew+0x150>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d106      	bne.n	8005d02 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cf4:	f3ef 8311 	mrs	r3, BASEPRI
 8005cf8:	61fb      	str	r3, [r7, #28]
  return(result);
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f040 8082 	bne.w	8005e06 <osThreadNew+0x146>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d07e      	beq.n	8005e06 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005d08:	2380      	movs	r3, #128	; 0x80
 8005d0a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005d0c:	2318      	movs	r3, #24
 8005d0e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005d10:	2300      	movs	r3, #0
 8005d12:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005d14:	f107 031b 	add.w	r3, r7, #27
 8005d18:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d1e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d045      	beq.n	8005db2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <osThreadNew+0x74>
        name = attr->name;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d008      	beq.n	8005d5a <osThreadNew+0x9a>
 8005d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4a:	2b38      	cmp	r3, #56	; 0x38
 8005d4c:	d805      	bhi.n	8005d5a <osThreadNew+0x9a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <osThreadNew+0x9e>
        return (NULL);
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e054      	b.n	8005e08 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	089b      	lsrs	r3, r3, #2
 8005d6c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00e      	beq.n	8005d94 <osThreadNew+0xd4>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	2bbb      	cmp	r3, #187	; 0xbb
 8005d7c:	d90a      	bls.n	8005d94 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d006      	beq.n	8005d94 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <osThreadNew+0xd4>
        mem = 1;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d92:	e010      	b.n	8005db6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10c      	bne.n	8005db6 <osThreadNew+0xf6>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d108      	bne.n	8005db6 <osThreadNew+0xf6>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d104      	bne.n	8005db6 <osThreadNew+0xf6>
          mem = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8005db0:	e001      	b.n	8005db6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005db2:	2300      	movs	r3, #0
 8005db4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d110      	bne.n	8005dde <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005dc4:	9202      	str	r2, [sp, #8]
 8005dc6:	9301      	str	r3, [sp, #4]
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 feac 	bl	8006b30 <xTaskCreateStatic>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	e013      	b.n	8005e06 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d110      	bne.n	8005e06 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	f107 0314 	add.w	r3, r7, #20
 8005dec:	9301      	str	r3, [sp, #4]
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 fef6 	bl	8006be8 <xTaskCreate>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d001      	beq.n	8005e06 <osThreadNew+0x146>
          hTask = NULL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e06:	697b      	ldr	r3, [r7, #20]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3738      	adds	r7, #56	; 0x38
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	2000031c 	.word	0x2000031c

08005e14 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e1c:	f3ef 8305 	mrs	r3, IPSR
 8005e20:	613b      	str	r3, [r7, #16]
  return(result);
 8005e22:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10f      	bne.n	8005e48 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e28:	f3ef 8310 	mrs	r3, PRIMASK
 8005e2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d109      	bne.n	8005e48 <osDelay+0x34>
 8005e34:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <osDelay+0x58>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d109      	bne.n	8005e50 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e3c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e40:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <osDelay+0x3c>
    stat = osErrorISR;
 8005e48:	f06f 0305 	mvn.w	r3, #5
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	e007      	b.n	8005e60 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f001 f818 	bl	8006e90 <vTaskDelay>
    }
  }

  return (stat);
 8005e60:	697b      	ldr	r3, [r7, #20]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	2000031c 	.word	0x2000031c

08005e70 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f002 f921 	bl	80080c0 <pvTimerGetTimerID>
 8005e7e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <TimerCallback+0x22>
    callb->func (callb->arg);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	6852      	ldr	r2, [r2, #4]
 8005e8e:	4610      	mov	r0, r2
 8005e90:	4798      	blx	r3
  }
}
 8005e92:	bf00      	nop
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08e      	sub	sp, #56	; 0x38
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	607a      	str	r2, [r7, #4]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005eac:	2300      	movs	r3, #0
 8005eae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eb0:	f3ef 8305 	mrs	r3, IPSR
 8005eb4:	61bb      	str	r3, [r7, #24]
  return(result);
 8005eb6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d16a      	bne.n	8005f92 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec0:	617b      	str	r3, [r7, #20]
  return(result);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d164      	bne.n	8005f92 <osTimerNew+0xf6>
 8005ec8:	4b34      	ldr	r3, [pc, #208]	; (8005f9c <osTimerNew+0x100>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d105      	bne.n	8005edc <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ed0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ed4:	613b      	str	r3, [r7, #16]
  return(result);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d15a      	bne.n	8005f92 <osTimerNew+0xf6>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d057      	beq.n	8005f92 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005ee2:	2008      	movs	r0, #8
 8005ee4:	f002 fafa 	bl	80084dc <pvPortMalloc>
 8005ee8:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d050      	beq.n	8005f92 <osTimerNew+0xf6>
      callb->func = func;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005efc:	7afb      	ldrb	r3, [r7, #11]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d102      	bne.n	8005f08 <osTimerNew+0x6c>
        reload = pdFALSE;
 8005f02:	2300      	movs	r3, #0
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
 8005f06:	e001      	b.n	8005f0c <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8005f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f10:	623b      	str	r3, [r7, #32]
      name = NULL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01c      	beq.n	8005f56 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <osTimerNew+0x8e>
          name = attr->name;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d006      	beq.n	8005f40 <osTimerNew+0xa4>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	2b2f      	cmp	r3, #47	; 0x2f
 8005f38:	d902      	bls.n	8005f40 <osTimerNew+0xa4>
          mem = 1;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	623b      	str	r3, [r7, #32]
 8005f3e:	e00c      	b.n	8005f5a <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d108      	bne.n	8005f5a <osTimerNew+0xbe>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d104      	bne.n	8005f5a <osTimerNew+0xbe>
            mem = 0;
 8005f50:	2300      	movs	r3, #0
 8005f52:	623b      	str	r3, [r7, #32]
 8005f54:	e001      	b.n	8005f5a <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d10c      	bne.n	8005f7a <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	4b0e      	ldr	r3, [pc, #56]	; (8005fa0 <osTimerNew+0x104>)
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6e:	2101      	movs	r1, #1
 8005f70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f72:	f001 fd6c 	bl	8007a4e <xTimerCreateStatic>
 8005f76:	62b8      	str	r0, [r7, #40]	; 0x28
 8005f78:	e00b      	b.n	8005f92 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d108      	bne.n	8005f92 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005f80:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <osTimerNew+0x104>)
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f88:	2101      	movs	r1, #1
 8005f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f8c:	f001 fd3e 	bl	8007a0c <xTimerCreate>
 8005f90:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3730      	adds	r7, #48	; 0x30
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	2000031c 	.word	0x2000031c
 8005fa0:	08005e71 	.word	0x08005e71

08005fa4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4a06      	ldr	r2, [pc, #24]	; (8005fcc <vApplicationGetIdleTaskMemory+0x28>)
 8005fb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	4a05      	ldr	r2, [pc, #20]	; (8005fd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005fba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2280      	movs	r2, #128	; 0x80
 8005fc0:	601a      	str	r2, [r3, #0]
}
 8005fc2:	bf00      	nop
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr
 8005fcc:	20000320 	.word	0x20000320
 8005fd0:	200003dc 	.word	0x200003dc

08005fd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4a07      	ldr	r2, [pc, #28]	; (8006000 <vApplicationGetTimerTaskMemory+0x2c>)
 8005fe4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	4a06      	ldr	r2, [pc, #24]	; (8006004 <vApplicationGetTimerTaskMemory+0x30>)
 8005fea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ff2:	601a      	str	r2, [r3, #0]
}
 8005ff4:	bf00      	nop
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bc80      	pop	{r7}
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	200005dc 	.word	0x200005dc
 8006004:	20000698 	.word	0x20000698

08006008 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f103 0208 	add.w	r2, r3, #8
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f04f 32ff 	mov.w	r2, #4294967295
 8006020:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f103 0208 	add.w	r2, r3, #8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f103 0208 	add.w	r2, r3, #8
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr

08006046 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr

0800605e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800605e:	b480      	push	{r7}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	601a      	str	r2, [r3, #0]
}
 800609a:	bf00      	nop
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr

080060a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ba:	d103      	bne.n	80060c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	e00c      	b.n	80060de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3308      	adds	r3, #8
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	e002      	b.n	80060d2 <vListInsert+0x2e>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d2f6      	bcs.n	80060cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	601a      	str	r2, [r3, #0]
}
 800610a:	bf00      	nop
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr

08006114 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6892      	ldr	r2, [r2, #8]
 800612a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6852      	ldr	r2, [r2, #4]
 8006134:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	429a      	cmp	r2, r3
 800613e:	d103      	bne.n	8006148 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	1e5a      	subs	r2, r3, #1
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr
	...

08006168 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10a      	bne.n	8006192 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800618e:	bf00      	nop
 8006190:	e7fe      	b.n	8006190 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006192:	f002 f8a3 	bl	80082dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619e:	68f9      	ldr	r1, [r7, #12]
 80061a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061a2:	fb01 f303 	mul.w	r3, r1, r3
 80061a6:	441a      	add	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c2:	3b01      	subs	r3, #1
 80061c4:	68f9      	ldr	r1, [r7, #12]
 80061c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061c8:	fb01 f303 	mul.w	r3, r1, r3
 80061cc:	441a      	add	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	22ff      	movs	r2, #255	; 0xff
 80061d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	22ff      	movs	r2, #255	; 0xff
 80061de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d114      	bne.n	8006212 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01a      	beq.n	8006226 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3310      	adds	r3, #16
 80061f4:	4618      	mov	r0, r3
 80061f6:	f001 f91b 	bl	8007430 <xTaskRemoveFromEventList>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d012      	beq.n	8006226 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006200:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <xQueueGenericReset+0xcc>)
 8006202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	e009      	b.n	8006226 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3310      	adds	r3, #16
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff fef6 	bl	8006008 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3324      	adds	r3, #36	; 0x24
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fef1 	bl	8006008 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006226:	f002 f889 	bl	800833c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800622a:	2301      	movs	r3, #1
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	e000ed04 	.word	0xe000ed04

08006238 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08e      	sub	sp, #56	; 0x38
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800625e:	bf00      	nop
 8006260:	e7fe      	b.n	8006260 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10a      	bne.n	800627e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
}
 800627a:	bf00      	nop
 800627c:	e7fe      	b.n	800627c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <xQueueGenericCreateStatic+0x52>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <xQueueGenericCreateStatic+0x56>
 800628a:	2301      	movs	r3, #1
 800628c:	e000      	b.n	8006290 <xQueueGenericCreateStatic+0x58>
 800628e:	2300      	movs	r3, #0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	623b      	str	r3, [r7, #32]
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d102      	bne.n	80062b6 <xQueueGenericCreateStatic+0x7e>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <xQueueGenericCreateStatic+0x82>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <xQueueGenericCreateStatic+0x84>
 80062ba:	2300      	movs	r3, #0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10a      	bne.n	80062d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	61fb      	str	r3, [r7, #28]
}
 80062d2:	bf00      	nop
 80062d4:	e7fe      	b.n	80062d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062d6:	2350      	movs	r3, #80	; 0x50
 80062d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b50      	cmp	r3, #80	; 0x50
 80062de:	d00a      	beq.n	80062f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	61bb      	str	r3, [r7, #24]
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80062fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00d      	beq.n	800631c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006308:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	4613      	mov	r3, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 f805 	bl	8006326 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800631e:	4618      	mov	r0, r3
 8006320:	3730      	adds	r7, #48	; 0x30
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b084      	sub	sp, #16
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	607a      	str	r2, [r7, #4]
 8006332:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d103      	bne.n	8006342 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	e002      	b.n	8006348 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006354:	2101      	movs	r1, #1
 8006356:	69b8      	ldr	r0, [r7, #24]
 8006358:	f7ff ff06 	bl	8006168 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	78fa      	ldrb	r2, [r7, #3]
 8006360:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006364:	bf00      	nop
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08e      	sub	sp, #56	; 0x38
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800637a:	2300      	movs	r3, #0
 800637c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <xQueueGenericSend+0x32>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800639a:	bf00      	nop
 800639c:	e7fe      	b.n	800639c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d103      	bne.n	80063ac <xQueueGenericSend+0x40>
 80063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <xQueueGenericSend+0x44>
 80063ac:	2301      	movs	r3, #1
 80063ae:	e000      	b.n	80063b2 <xQueueGenericSend+0x46>
 80063b0:	2300      	movs	r3, #0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10a      	bne.n	80063cc <xQueueGenericSend+0x60>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063c8:	bf00      	nop
 80063ca:	e7fe      	b.n	80063ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d103      	bne.n	80063da <xQueueGenericSend+0x6e>
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <xQueueGenericSend+0x72>
 80063da:	2301      	movs	r3, #1
 80063dc:	e000      	b.n	80063e0 <xQueueGenericSend+0x74>
 80063de:	2300      	movs	r3, #0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <xQueueGenericSend+0x8e>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	623b      	str	r3, [r7, #32]
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063fa:	f001 f9df 	bl	80077bc <xTaskGetSchedulerState>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d102      	bne.n	800640a <xQueueGenericSend+0x9e>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <xQueueGenericSend+0xa2>
 800640a:	2301      	movs	r3, #1
 800640c:	e000      	b.n	8006410 <xQueueGenericSend+0xa4>
 800640e:	2300      	movs	r3, #0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <xQueueGenericSend+0xbe>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	61fb      	str	r3, [r7, #28]
}
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800642a:	f001 ff57 	bl	80082dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	429a      	cmp	r2, r3
 8006438:	d302      	bcc.n	8006440 <xQueueGenericSend+0xd4>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b02      	cmp	r3, #2
 800643e:	d129      	bne.n	8006494 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006446:	f000 fa07 	bl	8006858 <prvCopyDataToQueue>
 800644a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	2b00      	cmp	r3, #0
 8006452:	d010      	beq.n	8006476 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	3324      	adds	r3, #36	; 0x24
 8006458:	4618      	mov	r0, r3
 800645a:	f000 ffe9 	bl	8007430 <xTaskRemoveFromEventList>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d013      	beq.n	800648c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006464:	4b3f      	ldr	r3, [pc, #252]	; (8006564 <xQueueGenericSend+0x1f8>)
 8006466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	e00a      	b.n	800648c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	2b00      	cmp	r3, #0
 800647a:	d007      	beq.n	800648c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800647c:	4b39      	ldr	r3, [pc, #228]	; (8006564 <xQueueGenericSend+0x1f8>)
 800647e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800648c:	f001 ff56 	bl	800833c <vPortExitCritical>
				return pdPASS;
 8006490:	2301      	movs	r3, #1
 8006492:	e063      	b.n	800655c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d103      	bne.n	80064a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800649a:	f001 ff4f 	bl	800833c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	e05c      	b.n	800655c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d106      	bne.n	80064b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064a8:	f107 0314 	add.w	r3, r7, #20
 80064ac:	4618      	mov	r0, r3
 80064ae:	f001 f823 	bl	80074f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064b2:	2301      	movs	r3, #1
 80064b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064b6:	f001 ff41 	bl	800833c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064ba:	f000 fd8d 	bl	8006fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064be:	f001 ff0d 	bl	80082dc <vPortEnterCritical>
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064c8:	b25b      	sxtb	r3, r3
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d103      	bne.n	80064d8 <xQueueGenericSend+0x16c>
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064de:	b25b      	sxtb	r3, r3
 80064e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e4:	d103      	bne.n	80064ee <xQueueGenericSend+0x182>
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064ee:	f001 ff25 	bl	800833c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064f2:	1d3a      	adds	r2, r7, #4
 80064f4:	f107 0314 	add.w	r3, r7, #20
 80064f8:	4611      	mov	r1, r2
 80064fa:	4618      	mov	r0, r3
 80064fc:	f001 f812 	bl	8007524 <xTaskCheckForTimeOut>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d124      	bne.n	8006550 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006506:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006508:	f000 fa9e 	bl	8006a48 <prvIsQueueFull>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d018      	beq.n	8006544 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	3310      	adds	r3, #16
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	4611      	mov	r1, r2
 800651a:	4618      	mov	r0, r3
 800651c:	f000 ff38 	bl	8007390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006522:	f000 fa29 	bl	8006978 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006526:	f000 fd65 	bl	8006ff4 <xTaskResumeAll>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	f47f af7c 	bne.w	800642a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006532:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <xQueueGenericSend+0x1f8>)
 8006534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	e772      	b.n	800642a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006546:	f000 fa17 	bl	8006978 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800654a:	f000 fd53 	bl	8006ff4 <xTaskResumeAll>
 800654e:	e76c      	b.n	800642a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006552:	f000 fa11 	bl	8006978 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006556:	f000 fd4d 	bl	8006ff4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800655a:	2300      	movs	r3, #0
		}
	}
}
 800655c:	4618      	mov	r0, r3
 800655e:	3738      	adds	r7, #56	; 0x38
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	e000ed04 	.word	0xe000ed04

08006568 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08e      	sub	sp, #56	; 0x38
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10a      	bne.n	8006596 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d103      	bne.n	80065a4 <xQueueGenericSendFromISR+0x3c>
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <xQueueGenericSendFromISR+0x40>
 80065a4:	2301      	movs	r3, #1
 80065a6:	e000      	b.n	80065aa <xQueueGenericSendFromISR+0x42>
 80065a8:	2300      	movs	r3, #0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10a      	bne.n	80065c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	623b      	str	r3, [r7, #32]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d103      	bne.n	80065d2 <xQueueGenericSendFromISR+0x6a>
 80065ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d101      	bne.n	80065d6 <xQueueGenericSendFromISR+0x6e>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <xQueueGenericSendFromISR+0x70>
 80065d6:	2300      	movs	r3, #0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	61fb      	str	r3, [r7, #28]
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065f2:	f001 ff35 	bl	8008460 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065f6:	f3ef 8211 	mrs	r2, BASEPRI
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	61ba      	str	r2, [r7, #24]
 800660c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800660e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006610:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800661a:	429a      	cmp	r2, r3
 800661c:	d302      	bcc.n	8006624 <xQueueGenericSendFromISR+0xbc>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b02      	cmp	r3, #2
 8006622:	d12c      	bne.n	800667e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800662a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006634:	f000 f910 	bl	8006858 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006638:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006640:	d112      	bne.n	8006668 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	2b00      	cmp	r3, #0
 8006648:	d016      	beq.n	8006678 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	3324      	adds	r3, #36	; 0x24
 800664e:	4618      	mov	r0, r3
 8006650:	f000 feee 	bl	8007430 <xTaskRemoveFromEventList>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00e      	beq.n	8006678 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00b      	beq.n	8006678 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	e007      	b.n	8006678 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006668:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800666c:	3301      	adds	r3, #1
 800666e:	b2db      	uxtb	r3, r3
 8006670:	b25a      	sxtb	r2, r3
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006678:	2301      	movs	r3, #1
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800667c:	e001      	b.n	8006682 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800667e:	2300      	movs	r3, #0
 8006680:	637b      	str	r3, [r7, #52]	; 0x34
 8006682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006684:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800668c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800668e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006690:	4618      	mov	r0, r3
 8006692:	3738      	adds	r7, #56	; 0x38
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08c      	sub	sp, #48	; 0x30
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066a4:	2300      	movs	r3, #0
 80066a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10a      	bne.n	80066c8 <xQueueReceive+0x30>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	623b      	str	r3, [r7, #32]
}
 80066c4:	bf00      	nop
 80066c6:	e7fe      	b.n	80066c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d103      	bne.n	80066d6 <xQueueReceive+0x3e>
 80066ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <xQueueReceive+0x42>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <xQueueReceive+0x44>
 80066da:	2300      	movs	r3, #0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10a      	bne.n	80066f6 <xQueueReceive+0x5e>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	61fb      	str	r3, [r7, #28]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066f6:	f001 f861 	bl	80077bc <xTaskGetSchedulerState>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d102      	bne.n	8006706 <xQueueReceive+0x6e>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <xQueueReceive+0x72>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <xQueueReceive+0x74>
 800670a:	2300      	movs	r3, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <xQueueReceive+0x8e>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	61bb      	str	r3, [r7, #24]
}
 8006722:	bf00      	nop
 8006724:	e7fe      	b.n	8006724 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006726:	f001 fdd9 	bl	80082dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01f      	beq.n	8006776 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006736:	68b9      	ldr	r1, [r7, #8]
 8006738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800673a:	f000 f8f7 	bl	800692c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	1e5a      	subs	r2, r3, #1
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00f      	beq.n	800676e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006750:	3310      	adds	r3, #16
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fe6c 	bl	8007430 <xTaskRemoveFromEventList>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d007      	beq.n	800676e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800675e:	4b3d      	ldr	r3, [pc, #244]	; (8006854 <xQueueReceive+0x1bc>)
 8006760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800676e:	f001 fde5 	bl	800833c <vPortExitCritical>
				return pdPASS;
 8006772:	2301      	movs	r3, #1
 8006774:	e069      	b.n	800684a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d103      	bne.n	8006784 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800677c:	f001 fdde 	bl	800833c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006780:	2300      	movs	r3, #0
 8006782:	e062      	b.n	800684a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d106      	bne.n	8006798 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800678a:	f107 0310 	add.w	r3, r7, #16
 800678e:	4618      	mov	r0, r3
 8006790:	f000 feb2 	bl	80074f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006794:	2301      	movs	r3, #1
 8006796:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006798:	f001 fdd0 	bl	800833c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800679c:	f000 fc1c 	bl	8006fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067a0:	f001 fd9c 	bl	80082dc <vPortEnterCritical>
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067aa:	b25b      	sxtb	r3, r3
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d103      	bne.n	80067ba <xQueueReceive+0x122>
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067c0:	b25b      	sxtb	r3, r3
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c6:	d103      	bne.n	80067d0 <xQueueReceive+0x138>
 80067c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067d0:	f001 fdb4 	bl	800833c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067d4:	1d3a      	adds	r2, r7, #4
 80067d6:	f107 0310 	add.w	r3, r7, #16
 80067da:	4611      	mov	r1, r2
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fea1 	bl	8007524 <xTaskCheckForTimeOut>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d123      	bne.n	8006830 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ea:	f000 f917 	bl	8006a1c <prvIsQueueEmpty>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d017      	beq.n	8006824 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	3324      	adds	r3, #36	; 0x24
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	4611      	mov	r1, r2
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 fdc7 	bl	8007390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006804:	f000 f8b8 	bl	8006978 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006808:	f000 fbf4 	bl	8006ff4 <xTaskResumeAll>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d189      	bne.n	8006726 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006812:	4b10      	ldr	r3, [pc, #64]	; (8006854 <xQueueReceive+0x1bc>)
 8006814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	e780      	b.n	8006726 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006826:	f000 f8a7 	bl	8006978 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800682a:	f000 fbe3 	bl	8006ff4 <xTaskResumeAll>
 800682e:	e77a      	b.n	8006726 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006832:	f000 f8a1 	bl	8006978 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006836:	f000 fbdd 	bl	8006ff4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800683a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800683c:	f000 f8ee 	bl	8006a1c <prvIsQueueEmpty>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	f43f af6f 	beq.w	8006726 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006848:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800684a:	4618      	mov	r0, r3
 800684c:	3730      	adds	r7, #48	; 0x30
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	e000ed04 	.word	0xe000ed04

08006858 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006864:	2300      	movs	r3, #0
 8006866:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10d      	bne.n	8006892 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d14d      	bne.n	800691a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	4618      	mov	r0, r3
 8006884:	f000 ffb8 	bl	80077f8 <xTaskPriorityDisinherit>
 8006888:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	605a      	str	r2, [r3, #4]
 8006890:	e043      	b.n	800691a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d119      	bne.n	80068cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6898      	ldr	r0, [r3, #8]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a0:	461a      	mov	r2, r3
 80068a2:	68b9      	ldr	r1, [r7, #8]
 80068a4:	f002 fc20 	bl	80090e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	441a      	add	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d32b      	bcc.n	800691a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	609a      	str	r2, [r3, #8]
 80068ca:	e026      	b.n	800691a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	68d8      	ldr	r0, [r3, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	461a      	mov	r2, r3
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	f002 fc06 	bl	80090e8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	425b      	negs	r3, r3
 80068e6:	441a      	add	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d207      	bcs.n	8006908 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	425b      	negs	r3, r3
 8006902:	441a      	add	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d105      	bne.n	800691a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	3b01      	subs	r3, #1
 8006918:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006922:	697b      	ldr	r3, [r7, #20]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	d018      	beq.n	8006970 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	441a      	add	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	429a      	cmp	r2, r3
 8006956:	d303      	bcc.n	8006960 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68d9      	ldr	r1, [r3, #12]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006968:	461a      	mov	r2, r3
 800696a:	6838      	ldr	r0, [r7, #0]
 800696c:	f002 fbbc 	bl	80090e8 <memcpy>
	}
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006980:	f001 fcac 	bl	80082dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800698a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800698c:	e011      	b.n	80069b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006992:	2b00      	cmp	r3, #0
 8006994:	d012      	beq.n	80069bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3324      	adds	r3, #36	; 0x24
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fd48 	bl	8007430 <xTaskRemoveFromEventList>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069a6:	f000 fe1f 	bl	80075e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	dce9      	bgt.n	800698e <prvUnlockQueue+0x16>
 80069ba:	e000      	b.n	80069be <prvUnlockQueue+0x46>
					break;
 80069bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	22ff      	movs	r2, #255	; 0xff
 80069c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069c6:	f001 fcb9 	bl	800833c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069ca:	f001 fc87 	bl	80082dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069d6:	e011      	b.n	80069fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d012      	beq.n	8006a06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3310      	adds	r3, #16
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fd23 	bl	8007430 <xTaskRemoveFromEventList>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069f0:	f000 fdfa 	bl	80075e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069f4:	7bbb      	ldrb	r3, [r7, #14]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	dce9      	bgt.n	80069d8 <prvUnlockQueue+0x60>
 8006a04:	e000      	b.n	8006a08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	22ff      	movs	r2, #255	; 0xff
 8006a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a10:	f001 fc94 	bl	800833c <vPortExitCritical>
}
 8006a14:	bf00      	nop
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a24:	f001 fc5a 	bl	80082dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d102      	bne.n	8006a36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a30:	2301      	movs	r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	e001      	b.n	8006a3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a36:	2300      	movs	r3, #0
 8006a38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a3a:	f001 fc7f 	bl	800833c <vPortExitCritical>

	return xReturn;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a50:	f001 fc44 	bl	80082dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d102      	bne.n	8006a66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a60:	2301      	movs	r3, #1
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	e001      	b.n	8006a6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a66:	2300      	movs	r3, #0
 8006a68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a6a:	f001 fc67 	bl	800833c <vPortExitCritical>

	return xReturn;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	e014      	b.n	8006ab2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a88:	4a0e      	ldr	r2, [pc, #56]	; (8006ac4 <vQueueAddToRegistry+0x4c>)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10b      	bne.n	8006aac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a94:	490b      	ldr	r1, [pc, #44]	; (8006ac4 <vQueueAddToRegistry+0x4c>)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a9e:	4a09      	ldr	r2, [pc, #36]	; (8006ac4 <vQueueAddToRegistry+0x4c>)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	4413      	add	r3, r2
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006aaa:	e006      	b.n	8006aba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b07      	cmp	r3, #7
 8006ab6:	d9e7      	bls.n	8006a88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ab8:	bf00      	nop
 8006aba:	bf00      	nop
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc80      	pop	{r7}
 8006ac2:	4770      	bx	lr
 8006ac4:	20000a98 	.word	0x20000a98

08006ac8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ad8:	f001 fc00 	bl	80082dc <vPortEnterCritical>
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ae2:	b25b      	sxtb	r3, r3
 8006ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae8:	d103      	bne.n	8006af2 <vQueueWaitForMessageRestricted+0x2a>
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006af8:	b25b      	sxtb	r3, r3
 8006afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afe:	d103      	bne.n	8006b08 <vQueueWaitForMessageRestricted+0x40>
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b08:	f001 fc18 	bl	800833c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d106      	bne.n	8006b22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	3324      	adds	r3, #36	; 0x24
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 fc5b 	bl	80073d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b22:	6978      	ldr	r0, [r7, #20]
 8006b24:	f7ff ff28 	bl	8006978 <prvUnlockQueue>
	}
 8006b28:	bf00      	nop
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b08e      	sub	sp, #56	; 0x38
 8006b34:	af04      	add	r7, sp, #16
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
 8006b3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	623b      	str	r3, [r7, #32]
}
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10a      	bne.n	8006b76 <xTaskCreateStatic+0x46>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	61fb      	str	r3, [r7, #28]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b76:	23bc      	movs	r3, #188	; 0xbc
 8006b78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	2bbc      	cmp	r3, #188	; 0xbc
 8006b7e:	d00a      	beq.n	8006b96 <xTaskCreateStatic+0x66>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	61bb      	str	r3, [r7, #24]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01e      	beq.n	8006bda <xTaskCreateStatic+0xaa>
 8006b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d01b      	beq.n	8006bda <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006baa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9303      	str	r3, [sp, #12]
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	9302      	str	r3, [sp, #8]
 8006bbc:	f107 0314 	add.w	r3, r7, #20
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	68b9      	ldr	r1, [r7, #8]
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f851 	bl	8006c74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bd4:	f000 f8ec 	bl	8006db0 <prvAddNewTaskToReadyList>
 8006bd8:	e001      	b.n	8006bde <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bde:	697b      	ldr	r3, [r7, #20]
	}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3728      	adds	r7, #40	; 0x28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08c      	sub	sp, #48	; 0x30
 8006bec:	af04      	add	r7, sp, #16
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bf8:	88fb      	ldrh	r3, [r7, #6]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f001 fc6d 	bl	80084dc <pvPortMalloc>
 8006c02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00e      	beq.n	8006c28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006c0a:	20bc      	movs	r0, #188	; 0xbc
 8006c0c:	f001 fc66 	bl	80084dc <pvPortMalloc>
 8006c10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	631a      	str	r2, [r3, #48]	; 0x30
 8006c1e:	e005      	b.n	8006c2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c20:	6978      	ldr	r0, [r7, #20]
 8006c22:	f001 fd1f 	bl	8008664 <vPortFree>
 8006c26:	e001      	b.n	8006c2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d017      	beq.n	8006c62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c3a:	88fa      	ldrh	r2, [r7, #6]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	9303      	str	r3, [sp, #12]
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	9302      	str	r3, [sp, #8]
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	68b9      	ldr	r1, [r7, #8]
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f80f 	bl	8006c74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c56:	69f8      	ldr	r0, [r7, #28]
 8006c58:	f000 f8aa 	bl	8006db0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	61bb      	str	r3, [r7, #24]
 8006c60:	e002      	b.n	8006c68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c62:	f04f 33ff 	mov.w	r3, #4294967295
 8006c66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c68:	69bb      	ldr	r3, [r7, #24]
	}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3720      	adds	r7, #32
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	21a5      	movs	r1, #165	; 0xa5
 8006c8e:	f002 fa39 	bl	8009104 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	f023 0307 	bic.w	r3, r3, #7
 8006caa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	f003 0307 	and.w	r3, r3, #7
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00a      	beq.n	8006ccc <prvInitialiseNewTask+0x58>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	617b      	str	r3, [r7, #20]
}
 8006cc8:	bf00      	nop
 8006cca:	e7fe      	b.n	8006cca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ccc:	2300      	movs	r3, #0
 8006cce:	61fb      	str	r3, [r7, #28]
 8006cd0:	e012      	b.n	8006cf8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	7819      	ldrb	r1, [r3, #0]
 8006cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	4413      	add	r3, r2
 8006ce0:	3334      	adds	r3, #52	; 0x34
 8006ce2:	460a      	mov	r2, r1
 8006ce4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	4413      	add	r3, r2
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d006      	beq.n	8006d00 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	2b0f      	cmp	r3, #15
 8006cfc:	d9e9      	bls.n	8006cd2 <prvInitialiseNewTask+0x5e>
 8006cfe:	e000      	b.n	8006d02 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006d00:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	2b37      	cmp	r3, #55	; 0x37
 8006d0e:	d901      	bls.n	8006d14 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d10:	2337      	movs	r3, #55	; 0x37
 8006d12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	2200      	movs	r2, #0
 8006d24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d28:	3304      	adds	r3, #4
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7ff f98b 	bl	8006046 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	3318      	adds	r3, #24
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7ff f986 	bl	8006046 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	3354      	adds	r3, #84	; 0x54
 8006d64:	2260      	movs	r2, #96	; 0x60
 8006d66:	2100      	movs	r1, #0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f002 f9cb 	bl	8009104 <memset>
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	4a0c      	ldr	r2, [pc, #48]	; (8006da4 <prvInitialiseNewTask+0x130>)
 8006d72:	659a      	str	r2, [r3, #88]	; 0x58
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	4a0c      	ldr	r2, [pc, #48]	; (8006da8 <prvInitialiseNewTask+0x134>)
 8006d78:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	4a0b      	ldr	r2, [pc, #44]	; (8006dac <prvInitialiseNewTask+0x138>)
 8006d7e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	68f9      	ldr	r1, [r7, #12]
 8006d84:	69b8      	ldr	r0, [r7, #24]
 8006d86:	f001 f9bb 	bl	8008100 <pxPortInitialiseStack>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d9c:	bf00      	nop
 8006d9e:	3720      	adds	r7, #32
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	080093fc 	.word	0x080093fc
 8006da8:	0800941c 	.word	0x0800941c
 8006dac:	080093dc 	.word	0x080093dc

08006db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006db8:	f001 fa90 	bl	80082dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006dbc:	4b2d      	ldr	r3, [pc, #180]	; (8006e74 <prvAddNewTaskToReadyList+0xc4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	4a2c      	ldr	r2, [pc, #176]	; (8006e74 <prvAddNewTaskToReadyList+0xc4>)
 8006dc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006dc6:	4b2c      	ldr	r3, [pc, #176]	; (8006e78 <prvAddNewTaskToReadyList+0xc8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d109      	bne.n	8006de2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006dce:	4a2a      	ldr	r2, [pc, #168]	; (8006e78 <prvAddNewTaskToReadyList+0xc8>)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dd4:	4b27      	ldr	r3, [pc, #156]	; (8006e74 <prvAddNewTaskToReadyList+0xc4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d110      	bne.n	8006dfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ddc:	f000 fc28 	bl	8007630 <prvInitialiseTaskLists>
 8006de0:	e00d      	b.n	8006dfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006de2:	4b26      	ldr	r3, [pc, #152]	; (8006e7c <prvAddNewTaskToReadyList+0xcc>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d109      	bne.n	8006dfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dea:	4b23      	ldr	r3, [pc, #140]	; (8006e78 <prvAddNewTaskToReadyList+0xc8>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d802      	bhi.n	8006dfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006df8:	4a1f      	ldr	r2, [pc, #124]	; (8006e78 <prvAddNewTaskToReadyList+0xc8>)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dfe:	4b20      	ldr	r3, [pc, #128]	; (8006e80 <prvAddNewTaskToReadyList+0xd0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3301      	adds	r3, #1
 8006e04:	4a1e      	ldr	r2, [pc, #120]	; (8006e80 <prvAddNewTaskToReadyList+0xd0>)
 8006e06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e08:	4b1d      	ldr	r3, [pc, #116]	; (8006e80 <prvAddNewTaskToReadyList+0xd0>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e14:	4b1b      	ldr	r3, [pc, #108]	; (8006e84 <prvAddNewTaskToReadyList+0xd4>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d903      	bls.n	8006e24 <prvAddNewTaskToReadyList+0x74>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	4a18      	ldr	r2, [pc, #96]	; (8006e84 <prvAddNewTaskToReadyList+0xd4>)
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4a15      	ldr	r2, [pc, #84]	; (8006e88 <prvAddNewTaskToReadyList+0xd8>)
 8006e32:	441a      	add	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	3304      	adds	r3, #4
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	f7ff f90f 	bl	800605e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e40:	f001 fa7c 	bl	800833c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e44:	4b0d      	ldr	r3, [pc, #52]	; (8006e7c <prvAddNewTaskToReadyList+0xcc>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00e      	beq.n	8006e6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e4c:	4b0a      	ldr	r3, [pc, #40]	; (8006e78 <prvAddNewTaskToReadyList+0xc8>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d207      	bcs.n	8006e6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e5a:	4b0c      	ldr	r3, [pc, #48]	; (8006e8c <prvAddNewTaskToReadyList+0xdc>)
 8006e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20000fac 	.word	0x20000fac
 8006e78:	20000ad8 	.word	0x20000ad8
 8006e7c:	20000fb8 	.word	0x20000fb8
 8006e80:	20000fc8 	.word	0x20000fc8
 8006e84:	20000fb4 	.word	0x20000fb4
 8006e88:	20000adc 	.word	0x20000adc
 8006e8c:	e000ed04 	.word	0xe000ed04

08006e90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d017      	beq.n	8006ed2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ea2:	4b13      	ldr	r3, [pc, #76]	; (8006ef0 <vTaskDelay+0x60>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <vTaskDelay+0x30>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	60bb      	str	r3, [r7, #8]
}
 8006ebc:	bf00      	nop
 8006ebe:	e7fe      	b.n	8006ebe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ec0:	f000 f88a 	bl	8006fd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fd04 	bl	80078d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ecc:	f000 f892 	bl	8006ff4 <xTaskResumeAll>
 8006ed0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d107      	bne.n	8006ee8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ed8:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <vTaskDelay+0x64>)
 8006eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ee8:	bf00      	nop
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20000fd4 	.word	0x20000fd4
 8006ef4:	e000ed04 	.word	0xe000ed04

08006ef8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	; 0x28
 8006efc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f06:	463a      	mov	r2, r7
 8006f08:	1d39      	adds	r1, r7, #4
 8006f0a:	f107 0308 	add.w	r3, r7, #8
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7ff f848 	bl	8005fa4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	9202      	str	r2, [sp, #8]
 8006f1c:	9301      	str	r3, [sp, #4]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	2300      	movs	r3, #0
 8006f24:	460a      	mov	r2, r1
 8006f26:	4924      	ldr	r1, [pc, #144]	; (8006fb8 <vTaskStartScheduler+0xc0>)
 8006f28:	4824      	ldr	r0, [pc, #144]	; (8006fbc <vTaskStartScheduler+0xc4>)
 8006f2a:	f7ff fe01 	bl	8006b30 <xTaskCreateStatic>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	4a23      	ldr	r2, [pc, #140]	; (8006fc0 <vTaskStartScheduler+0xc8>)
 8006f32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f34:	4b22      	ldr	r3, [pc, #136]	; (8006fc0 <vTaskStartScheduler+0xc8>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	e001      	b.n	8006f46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d102      	bne.n	8006f52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f4c:	f000 fd16 	bl	800797c <xTimerCreateTimerTask>
 8006f50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d11b      	bne.n	8006f90 <vTaskStartScheduler+0x98>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	613b      	str	r3, [r7, #16]
}
 8006f6a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f6c:	4b15      	ldr	r3, [pc, #84]	; (8006fc4 <vTaskStartScheduler+0xcc>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3354      	adds	r3, #84	; 0x54
 8006f72:	4a15      	ldr	r2, [pc, #84]	; (8006fc8 <vTaskStartScheduler+0xd0>)
 8006f74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f76:	4b15      	ldr	r3, [pc, #84]	; (8006fcc <vTaskStartScheduler+0xd4>)
 8006f78:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f7e:	4b14      	ldr	r3, [pc, #80]	; (8006fd0 <vTaskStartScheduler+0xd8>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006f84:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <vTaskStartScheduler+0xdc>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f8a:	f001 f935 	bl	80081f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f8e:	e00e      	b.n	8006fae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f96:	d10a      	bne.n	8006fae <vTaskStartScheduler+0xb6>
	__asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	60fb      	str	r3, [r7, #12]
}
 8006faa:	bf00      	nop
 8006fac:	e7fe      	b.n	8006fac <vTaskStartScheduler+0xb4>
}
 8006fae:	bf00      	nop
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	080092e4 	.word	0x080092e4
 8006fbc:	08007601 	.word	0x08007601
 8006fc0:	20000fd0 	.word	0x20000fd0
 8006fc4:	20000ad8 	.word	0x20000ad8
 8006fc8:	20000130 	.word	0x20000130
 8006fcc:	20000fcc 	.word	0x20000fcc
 8006fd0:	20000fb8 	.word	0x20000fb8
 8006fd4:	20000fb0 	.word	0x20000fb0

08006fd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006fdc:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <vTaskSuspendAll+0x18>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	4a03      	ldr	r2, [pc, #12]	; (8006ff0 <vTaskSuspendAll+0x18>)
 8006fe4:	6013      	str	r3, [r2, #0]
}
 8006fe6:	bf00      	nop
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bc80      	pop	{r7}
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	20000fd4 	.word	0x20000fd4

08006ff4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007002:	4b42      	ldr	r3, [pc, #264]	; (800710c <xTaskResumeAll+0x118>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <xTaskResumeAll+0x2c>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	603b      	str	r3, [r7, #0]
}
 800701c:	bf00      	nop
 800701e:	e7fe      	b.n	800701e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007020:	f001 f95c 	bl	80082dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007024:	4b39      	ldr	r3, [pc, #228]	; (800710c <xTaskResumeAll+0x118>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3b01      	subs	r3, #1
 800702a:	4a38      	ldr	r2, [pc, #224]	; (800710c <xTaskResumeAll+0x118>)
 800702c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800702e:	4b37      	ldr	r3, [pc, #220]	; (800710c <xTaskResumeAll+0x118>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d162      	bne.n	80070fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007036:	4b36      	ldr	r3, [pc, #216]	; (8007110 <xTaskResumeAll+0x11c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d05e      	beq.n	80070fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800703e:	e02f      	b.n	80070a0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007040:	4b34      	ldr	r3, [pc, #208]	; (8007114 <xTaskResumeAll+0x120>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3318      	adds	r3, #24
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff f861 	bl	8006114 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3304      	adds	r3, #4
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff f85c 	bl	8006114 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007060:	4b2d      	ldr	r3, [pc, #180]	; (8007118 <xTaskResumeAll+0x124>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d903      	bls.n	8007070 <xTaskResumeAll+0x7c>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	4a2a      	ldr	r2, [pc, #168]	; (8007118 <xTaskResumeAll+0x124>)
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4a27      	ldr	r2, [pc, #156]	; (800711c <xTaskResumeAll+0x128>)
 800707e:	441a      	add	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f7fe ffe9 	bl	800605e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007090:	4b23      	ldr	r3, [pc, #140]	; (8007120 <xTaskResumeAll+0x12c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	429a      	cmp	r2, r3
 8007098:	d302      	bcc.n	80070a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800709a:	4b22      	ldr	r3, [pc, #136]	; (8007124 <xTaskResumeAll+0x130>)
 800709c:	2201      	movs	r2, #1
 800709e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070a0:	4b1c      	ldr	r3, [pc, #112]	; (8007114 <xTaskResumeAll+0x120>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1cb      	bne.n	8007040 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070ae:	f000 fb61 	bl	8007774 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80070b2:	4b1d      	ldr	r3, [pc, #116]	; (8007128 <xTaskResumeAll+0x134>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d010      	beq.n	80070e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070be:	f000 f845 	bl	800714c <xTaskIncrementTick>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80070c8:	4b16      	ldr	r3, [pc, #88]	; (8007124 <xTaskResumeAll+0x130>)
 80070ca:	2201      	movs	r2, #1
 80070cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f1      	bne.n	80070be <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80070da:	4b13      	ldr	r3, [pc, #76]	; (8007128 <xTaskResumeAll+0x134>)
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070e0:	4b10      	ldr	r3, [pc, #64]	; (8007124 <xTaskResumeAll+0x130>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d009      	beq.n	80070fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070e8:	2301      	movs	r3, #1
 80070ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070ec:	4b0f      	ldr	r3, [pc, #60]	; (800712c <xTaskResumeAll+0x138>)
 80070ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070fc:	f001 f91e 	bl	800833c <vPortExitCritical>

	return xAlreadyYielded;
 8007100:	68bb      	ldr	r3, [r7, #8]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	20000fd4 	.word	0x20000fd4
 8007110:	20000fac 	.word	0x20000fac
 8007114:	20000f6c 	.word	0x20000f6c
 8007118:	20000fb4 	.word	0x20000fb4
 800711c:	20000adc 	.word	0x20000adc
 8007120:	20000ad8 	.word	0x20000ad8
 8007124:	20000fc0 	.word	0x20000fc0
 8007128:	20000fbc 	.word	0x20000fbc
 800712c:	e000ed04 	.word	0xe000ed04

08007130 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007136:	4b04      	ldr	r3, [pc, #16]	; (8007148 <xTaskGetTickCount+0x18>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800713c:	687b      	ldr	r3, [r7, #4]
}
 800713e:	4618      	mov	r0, r3
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	bc80      	pop	{r7}
 8007146:	4770      	bx	lr
 8007148:	20000fb0 	.word	0x20000fb0

0800714c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007152:	2300      	movs	r3, #0
 8007154:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007156:	4b51      	ldr	r3, [pc, #324]	; (800729c <xTaskIncrementTick+0x150>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	f040 808e 	bne.w	800727c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007160:	4b4f      	ldr	r3, [pc, #316]	; (80072a0 <xTaskIncrementTick+0x154>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3301      	adds	r3, #1
 8007166:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007168:	4a4d      	ldr	r2, [pc, #308]	; (80072a0 <xTaskIncrementTick+0x154>)
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d120      	bne.n	80071b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007174:	4b4b      	ldr	r3, [pc, #300]	; (80072a4 <xTaskIncrementTick+0x158>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <xTaskIncrementTick+0x48>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	603b      	str	r3, [r7, #0]
}
 8007190:	bf00      	nop
 8007192:	e7fe      	b.n	8007192 <xTaskIncrementTick+0x46>
 8007194:	4b43      	ldr	r3, [pc, #268]	; (80072a4 <xTaskIncrementTick+0x158>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	4b43      	ldr	r3, [pc, #268]	; (80072a8 <xTaskIncrementTick+0x15c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a41      	ldr	r2, [pc, #260]	; (80072a4 <xTaskIncrementTick+0x158>)
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	4a41      	ldr	r2, [pc, #260]	; (80072a8 <xTaskIncrementTick+0x15c>)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6013      	str	r3, [r2, #0]
 80071a8:	4b40      	ldr	r3, [pc, #256]	; (80072ac <xTaskIncrementTick+0x160>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3301      	adds	r3, #1
 80071ae:	4a3f      	ldr	r2, [pc, #252]	; (80072ac <xTaskIncrementTick+0x160>)
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	f000 fadf 	bl	8007774 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071b6:	4b3e      	ldr	r3, [pc, #248]	; (80072b0 <xTaskIncrementTick+0x164>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d34e      	bcc.n	800725e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071c0:	4b38      	ldr	r3, [pc, #224]	; (80072a4 <xTaskIncrementTick+0x158>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <xTaskIncrementTick+0x82>
 80071ca:	2301      	movs	r3, #1
 80071cc:	e000      	b.n	80071d0 <xTaskIncrementTick+0x84>
 80071ce:	2300      	movs	r3, #0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d004      	beq.n	80071de <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071d4:	4b36      	ldr	r3, [pc, #216]	; (80072b0 <xTaskIncrementTick+0x164>)
 80071d6:	f04f 32ff 	mov.w	r2, #4294967295
 80071da:	601a      	str	r2, [r3, #0]
					break;
 80071dc:	e03f      	b.n	800725e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80071de:	4b31      	ldr	r3, [pc, #196]	; (80072a4 <xTaskIncrementTick+0x158>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d203      	bcs.n	80071fe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071f6:	4a2e      	ldr	r2, [pc, #184]	; (80072b0 <xTaskIncrementTick+0x164>)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6013      	str	r3, [r2, #0]
						break;
 80071fc:	e02f      	b.n	800725e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	3304      	adds	r3, #4
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe ff86 	bl	8006114 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	3318      	adds	r3, #24
 8007214:	4618      	mov	r0, r3
 8007216:	f7fe ff7d 	bl	8006114 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721e:	4b25      	ldr	r3, [pc, #148]	; (80072b4 <xTaskIncrementTick+0x168>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d903      	bls.n	800722e <xTaskIncrementTick+0xe2>
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722a:	4a22      	ldr	r2, [pc, #136]	; (80072b4 <xTaskIncrementTick+0x168>)
 800722c:	6013      	str	r3, [r2, #0]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4a1f      	ldr	r2, [pc, #124]	; (80072b8 <xTaskIncrementTick+0x16c>)
 800723c:	441a      	add	r2, r3
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	3304      	adds	r3, #4
 8007242:	4619      	mov	r1, r3
 8007244:	4610      	mov	r0, r2
 8007246:	f7fe ff0a 	bl	800605e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724e:	4b1b      	ldr	r3, [pc, #108]	; (80072bc <xTaskIncrementTick+0x170>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	429a      	cmp	r2, r3
 8007256:	d3b3      	bcc.n	80071c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007258:	2301      	movs	r3, #1
 800725a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800725c:	e7b0      	b.n	80071c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800725e:	4b17      	ldr	r3, [pc, #92]	; (80072bc <xTaskIncrementTick+0x170>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007264:	4914      	ldr	r1, [pc, #80]	; (80072b8 <xTaskIncrementTick+0x16c>)
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d907      	bls.n	8007286 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007276:	2301      	movs	r3, #1
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	e004      	b.n	8007286 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800727c:	4b10      	ldr	r3, [pc, #64]	; (80072c0 <xTaskIncrementTick+0x174>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3301      	adds	r3, #1
 8007282:	4a0f      	ldr	r2, [pc, #60]	; (80072c0 <xTaskIncrementTick+0x174>)
 8007284:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007286:	4b0f      	ldr	r3, [pc, #60]	; (80072c4 <xTaskIncrementTick+0x178>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800728e:	2301      	movs	r3, #1
 8007290:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007292:	697b      	ldr	r3, [r7, #20]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	20000fd4 	.word	0x20000fd4
 80072a0:	20000fb0 	.word	0x20000fb0
 80072a4:	20000f64 	.word	0x20000f64
 80072a8:	20000f68 	.word	0x20000f68
 80072ac:	20000fc4 	.word	0x20000fc4
 80072b0:	20000fcc 	.word	0x20000fcc
 80072b4:	20000fb4 	.word	0x20000fb4
 80072b8:	20000adc 	.word	0x20000adc
 80072bc:	20000ad8 	.word	0x20000ad8
 80072c0:	20000fbc 	.word	0x20000fbc
 80072c4:	20000fc0 	.word	0x20000fc0

080072c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072ce:	4b2a      	ldr	r3, [pc, #168]	; (8007378 <vTaskSwitchContext+0xb0>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072d6:	4b29      	ldr	r3, [pc, #164]	; (800737c <vTaskSwitchContext+0xb4>)
 80072d8:	2201      	movs	r2, #1
 80072da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072dc:	e046      	b.n	800736c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80072de:	4b27      	ldr	r3, [pc, #156]	; (800737c <vTaskSwitchContext+0xb4>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80072e4:	4b26      	ldr	r3, [pc, #152]	; (8007380 <vTaskSwitchContext+0xb8>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	e010      	b.n	800730e <vTaskSwitchContext+0x46>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <vTaskSwitchContext+0x40>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	607b      	str	r3, [r7, #4]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <vTaskSwitchContext+0x3e>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3b01      	subs	r3, #1
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	491d      	ldr	r1, [pc, #116]	; (8007384 <vTaskSwitchContext+0xbc>)
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0e4      	beq.n	80072ec <vTaskSwitchContext+0x24>
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4a15      	ldr	r2, [pc, #84]	; (8007384 <vTaskSwitchContext+0xbc>)
 800732e:	4413      	add	r3, r2
 8007330:	60bb      	str	r3, [r7, #8]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	605a      	str	r2, [r3, #4]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	3308      	adds	r3, #8
 8007344:	429a      	cmp	r2, r3
 8007346:	d104      	bne.n	8007352 <vTaskSwitchContext+0x8a>
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	605a      	str	r2, [r3, #4]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	4a0b      	ldr	r2, [pc, #44]	; (8007388 <vTaskSwitchContext+0xc0>)
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	4a08      	ldr	r2, [pc, #32]	; (8007380 <vTaskSwitchContext+0xb8>)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007362:	4b09      	ldr	r3, [pc, #36]	; (8007388 <vTaskSwitchContext+0xc0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3354      	adds	r3, #84	; 0x54
 8007368:	4a08      	ldr	r2, [pc, #32]	; (800738c <vTaskSwitchContext+0xc4>)
 800736a:	6013      	str	r3, [r2, #0]
}
 800736c:	bf00      	nop
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	bc80      	pop	{r7}
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	20000fd4 	.word	0x20000fd4
 800737c:	20000fc0 	.word	0x20000fc0
 8007380:	20000fb4 	.word	0x20000fb4
 8007384:	20000adc 	.word	0x20000adc
 8007388:	20000ad8 	.word	0x20000ad8
 800738c:	20000130 	.word	0x20000130

08007390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10a      	bne.n	80073b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	60fb      	str	r3, [r7, #12]
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073b6:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <vTaskPlaceOnEventList+0x44>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3318      	adds	r3, #24
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7fe fe70 	bl	80060a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073c4:	2101      	movs	r1, #1
 80073c6:	6838      	ldr	r0, [r7, #0]
 80073c8:	f000 fa84 	bl	80078d4 <prvAddCurrentTaskToDelayedList>
}
 80073cc:	bf00      	nop
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20000ad8 	.word	0x20000ad8

080073d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	617b      	str	r3, [r7, #20]
}
 80073fc:	bf00      	nop
 80073fe:	e7fe      	b.n	80073fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007400:	4b0a      	ldr	r3, [pc, #40]	; (800742c <vTaskPlaceOnEventListRestricted+0x54>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3318      	adds	r3, #24
 8007406:	4619      	mov	r1, r3
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f7fe fe28 	bl	800605e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007414:	f04f 33ff 	mov.w	r3, #4294967295
 8007418:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	68b8      	ldr	r0, [r7, #8]
 800741e:	f000 fa59 	bl	80078d4 <prvAddCurrentTaskToDelayedList>
	}
 8007422:	bf00      	nop
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20000ad8 	.word	0x20000ad8

08007430 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10a      	bne.n	800745c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	60fb      	str	r3, [r7, #12]
}
 8007458:	bf00      	nop
 800745a:	e7fe      	b.n	800745a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	3318      	adds	r3, #24
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe fe57 	bl	8006114 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007466:	4b1e      	ldr	r3, [pc, #120]	; (80074e0 <xTaskRemoveFromEventList+0xb0>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d11d      	bne.n	80074aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	3304      	adds	r3, #4
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe fe4e 	bl	8006114 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747c:	4b19      	ldr	r3, [pc, #100]	; (80074e4 <xTaskRemoveFromEventList+0xb4>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d903      	bls.n	800748c <xTaskRemoveFromEventList+0x5c>
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007488:	4a16      	ldr	r2, [pc, #88]	; (80074e4 <xTaskRemoveFromEventList+0xb4>)
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007490:	4613      	mov	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4a13      	ldr	r2, [pc, #76]	; (80074e8 <xTaskRemoveFromEventList+0xb8>)
 800749a:	441a      	add	r2, r3
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	3304      	adds	r3, #4
 80074a0:	4619      	mov	r1, r3
 80074a2:	4610      	mov	r0, r2
 80074a4:	f7fe fddb 	bl	800605e <vListInsertEnd>
 80074a8:	e005      	b.n	80074b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	3318      	adds	r3, #24
 80074ae:	4619      	mov	r1, r3
 80074b0:	480e      	ldr	r0, [pc, #56]	; (80074ec <xTaskRemoveFromEventList+0xbc>)
 80074b2:	f7fe fdd4 	bl	800605e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ba:	4b0d      	ldr	r3, [pc, #52]	; (80074f0 <xTaskRemoveFromEventList+0xc0>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d905      	bls.n	80074d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80074c4:	2301      	movs	r3, #1
 80074c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074c8:	4b0a      	ldr	r3, [pc, #40]	; (80074f4 <xTaskRemoveFromEventList+0xc4>)
 80074ca:	2201      	movs	r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	e001      	b.n	80074d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80074d0:	2300      	movs	r3, #0
 80074d2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80074d4:	697b      	ldr	r3, [r7, #20]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	20000fd4 	.word	0x20000fd4
 80074e4:	20000fb4 	.word	0x20000fb4
 80074e8:	20000adc 	.word	0x20000adc
 80074ec:	20000f6c 	.word	0x20000f6c
 80074f0:	20000ad8 	.word	0x20000ad8
 80074f4:	20000fc0 	.word	0x20000fc0

080074f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007500:	4b06      	ldr	r3, [pc, #24]	; (800751c <vTaskInternalSetTimeOutState+0x24>)
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007508:	4b05      	ldr	r3, [pc, #20]	; (8007520 <vTaskInternalSetTimeOutState+0x28>)
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	605a      	str	r2, [r3, #4]
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	bc80      	pop	{r7}
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	20000fc4 	.word	0x20000fc4
 8007520:	20000fb0 	.word	0x20000fb0

08007524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	613b      	str	r3, [r7, #16]
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	60fb      	str	r3, [r7, #12]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007566:	f000 feb9 	bl	80082dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800756a:	4b1d      	ldr	r3, [pc, #116]	; (80075e0 <xTaskCheckForTimeOut+0xbc>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007582:	d102      	bne.n	800758a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007584:	2300      	movs	r3, #0
 8007586:	61fb      	str	r3, [r7, #28]
 8007588:	e023      	b.n	80075d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	4b15      	ldr	r3, [pc, #84]	; (80075e4 <xTaskCheckForTimeOut+0xc0>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	429a      	cmp	r2, r3
 8007594:	d007      	beq.n	80075a6 <xTaskCheckForTimeOut+0x82>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	429a      	cmp	r2, r3
 800759e:	d302      	bcc.n	80075a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80075a0:	2301      	movs	r3, #1
 80075a2:	61fb      	str	r3, [r7, #28]
 80075a4:	e015      	b.n	80075d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d20b      	bcs.n	80075c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	1ad2      	subs	r2, r2, r3
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7ff ff9b 	bl	80074f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80075c2:	2300      	movs	r3, #0
 80075c4:	61fb      	str	r3, [r7, #28]
 80075c6:	e004      	b.n	80075d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80075ce:	2301      	movs	r3, #1
 80075d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80075d2:	f000 feb3 	bl	800833c <vPortExitCritical>

	return xReturn;
 80075d6:	69fb      	ldr	r3, [r7, #28]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3720      	adds	r7, #32
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	20000fb0 	.word	0x20000fb0
 80075e4:	20000fc4 	.word	0x20000fc4

080075e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075e8:	b480      	push	{r7}
 80075ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075ec:	4b03      	ldr	r3, [pc, #12]	; (80075fc <vTaskMissedYield+0x14>)
 80075ee:	2201      	movs	r2, #1
 80075f0:	601a      	str	r2, [r3, #0]
}
 80075f2:	bf00      	nop
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bc80      	pop	{r7}
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	20000fc0 	.word	0x20000fc0

08007600 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007608:	f000 f852 	bl	80076b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800760c:	4b06      	ldr	r3, [pc, #24]	; (8007628 <prvIdleTask+0x28>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d9f9      	bls.n	8007608 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007614:	4b05      	ldr	r3, [pc, #20]	; (800762c <prvIdleTask+0x2c>)
 8007616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007624:	e7f0      	b.n	8007608 <prvIdleTask+0x8>
 8007626:	bf00      	nop
 8007628:	20000adc 	.word	0x20000adc
 800762c:	e000ed04 	.word	0xe000ed04

08007630 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007636:	2300      	movs	r3, #0
 8007638:	607b      	str	r3, [r7, #4]
 800763a:	e00c      	b.n	8007656 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	4613      	mov	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4a12      	ldr	r2, [pc, #72]	; (8007690 <prvInitialiseTaskLists+0x60>)
 8007648:	4413      	add	r3, r2
 800764a:	4618      	mov	r0, r3
 800764c:	f7fe fcdc 	bl	8006008 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3301      	adds	r3, #1
 8007654:	607b      	str	r3, [r7, #4]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b37      	cmp	r3, #55	; 0x37
 800765a:	d9ef      	bls.n	800763c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800765c:	480d      	ldr	r0, [pc, #52]	; (8007694 <prvInitialiseTaskLists+0x64>)
 800765e:	f7fe fcd3 	bl	8006008 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007662:	480d      	ldr	r0, [pc, #52]	; (8007698 <prvInitialiseTaskLists+0x68>)
 8007664:	f7fe fcd0 	bl	8006008 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007668:	480c      	ldr	r0, [pc, #48]	; (800769c <prvInitialiseTaskLists+0x6c>)
 800766a:	f7fe fccd 	bl	8006008 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800766e:	480c      	ldr	r0, [pc, #48]	; (80076a0 <prvInitialiseTaskLists+0x70>)
 8007670:	f7fe fcca 	bl	8006008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007674:	480b      	ldr	r0, [pc, #44]	; (80076a4 <prvInitialiseTaskLists+0x74>)
 8007676:	f7fe fcc7 	bl	8006008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800767a:	4b0b      	ldr	r3, [pc, #44]	; (80076a8 <prvInitialiseTaskLists+0x78>)
 800767c:	4a05      	ldr	r2, [pc, #20]	; (8007694 <prvInitialiseTaskLists+0x64>)
 800767e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007680:	4b0a      	ldr	r3, [pc, #40]	; (80076ac <prvInitialiseTaskLists+0x7c>)
 8007682:	4a05      	ldr	r2, [pc, #20]	; (8007698 <prvInitialiseTaskLists+0x68>)
 8007684:	601a      	str	r2, [r3, #0]
}
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20000adc 	.word	0x20000adc
 8007694:	20000f3c 	.word	0x20000f3c
 8007698:	20000f50 	.word	0x20000f50
 800769c:	20000f6c 	.word	0x20000f6c
 80076a0:	20000f80 	.word	0x20000f80
 80076a4:	20000f98 	.word	0x20000f98
 80076a8:	20000f64 	.word	0x20000f64
 80076ac:	20000f68 	.word	0x20000f68

080076b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076b6:	e019      	b.n	80076ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80076b8:	f000 fe10 	bl	80082dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80076bc:	4b10      	ldr	r3, [pc, #64]	; (8007700 <prvCheckTasksWaitingTermination+0x50>)
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3304      	adds	r3, #4
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fe fd23 	bl	8006114 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076ce:	4b0d      	ldr	r3, [pc, #52]	; (8007704 <prvCheckTasksWaitingTermination+0x54>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	4a0b      	ldr	r2, [pc, #44]	; (8007704 <prvCheckTasksWaitingTermination+0x54>)
 80076d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076d8:	4b0b      	ldr	r3, [pc, #44]	; (8007708 <prvCheckTasksWaitingTermination+0x58>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3b01      	subs	r3, #1
 80076de:	4a0a      	ldr	r2, [pc, #40]	; (8007708 <prvCheckTasksWaitingTermination+0x58>)
 80076e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076e2:	f000 fe2b 	bl	800833c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f810 	bl	800770c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076ec:	4b06      	ldr	r3, [pc, #24]	; (8007708 <prvCheckTasksWaitingTermination+0x58>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e1      	bne.n	80076b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000f80 	.word	0x20000f80
 8007704:	20000fac 	.word	0x20000fac
 8007708:	20000f94 	.word	0x20000f94

0800770c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3354      	adds	r3, #84	; 0x54
 8007718:	4618      	mov	r0, r3
 800771a:	f001 fd09 	bl	8009130 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007724:	2b00      	cmp	r3, #0
 8007726:	d108      	bne.n	800773a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772c:	4618      	mov	r0, r3
 800772e:	f000 ff99 	bl	8008664 <vPortFree>
				vPortFree( pxTCB );
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 ff96 	bl	8008664 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007738:	e018      	b.n	800776c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007740:	2b01      	cmp	r3, #1
 8007742:	d103      	bne.n	800774c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 ff8d 	bl	8008664 <vPortFree>
	}
 800774a:	e00f      	b.n	800776c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007752:	2b02      	cmp	r3, #2
 8007754:	d00a      	beq.n	800776c <prvDeleteTCB+0x60>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	60fb      	str	r3, [r7, #12]
}
 8007768:	bf00      	nop
 800776a:	e7fe      	b.n	800776a <prvDeleteTCB+0x5e>
	}
 800776c:	bf00      	nop
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800777a:	4b0e      	ldr	r3, [pc, #56]	; (80077b4 <prvResetNextTaskUnblockTime+0x40>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <prvResetNextTaskUnblockTime+0x14>
 8007784:	2301      	movs	r3, #1
 8007786:	e000      	b.n	800778a <prvResetNextTaskUnblockTime+0x16>
 8007788:	2300      	movs	r3, #0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d004      	beq.n	8007798 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800778e:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <prvResetNextTaskUnblockTime+0x44>)
 8007790:	f04f 32ff 	mov.w	r2, #4294967295
 8007794:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007796:	e008      	b.n	80077aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007798:	4b06      	ldr	r3, [pc, #24]	; (80077b4 <prvResetNextTaskUnblockTime+0x40>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	4a04      	ldr	r2, [pc, #16]	; (80077b8 <prvResetNextTaskUnblockTime+0x44>)
 80077a8:	6013      	str	r3, [r2, #0]
}
 80077aa:	bf00      	nop
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bc80      	pop	{r7}
 80077b2:	4770      	bx	lr
 80077b4:	20000f64 	.word	0x20000f64
 80077b8:	20000fcc 	.word	0x20000fcc

080077bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80077c2:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <xTaskGetSchedulerState+0x34>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d102      	bne.n	80077d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077ca:	2301      	movs	r3, #1
 80077cc:	607b      	str	r3, [r7, #4]
 80077ce:	e008      	b.n	80077e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077d0:	4b08      	ldr	r3, [pc, #32]	; (80077f4 <xTaskGetSchedulerState+0x38>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d102      	bne.n	80077de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80077d8:	2302      	movs	r3, #2
 80077da:	607b      	str	r3, [r7, #4]
 80077dc:	e001      	b.n	80077e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077de:	2300      	movs	r3, #0
 80077e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077e2:	687b      	ldr	r3, [r7, #4]
	}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc80      	pop	{r7}
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	20000fb8 	.word	0x20000fb8
 80077f4:	20000fd4 	.word	0x20000fd4

080077f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007804:	2300      	movs	r3, #0
 8007806:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d056      	beq.n	80078bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800780e:	4b2e      	ldr	r3, [pc, #184]	; (80078c8 <xTaskPriorityDisinherit+0xd0>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	429a      	cmp	r2, r3
 8007816:	d00a      	beq.n	800782e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781c:	f383 8811 	msr	BASEPRI, r3
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	60fb      	str	r3, [r7, #12]
}
 800782a:	bf00      	nop
 800782c:	e7fe      	b.n	800782c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10a      	bne.n	800784c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	60bb      	str	r3, [r7, #8]
}
 8007848:	bf00      	nop
 800784a:	e7fe      	b.n	800784a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007850:	1e5a      	subs	r2, r3, #1
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800785e:	429a      	cmp	r2, r3
 8007860:	d02c      	beq.n	80078bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007866:	2b00      	cmp	r3, #0
 8007868:	d128      	bne.n	80078bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	3304      	adds	r3, #4
 800786e:	4618      	mov	r0, r3
 8007870:	f7fe fc50 	bl	8006114 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007880:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788c:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <xTaskPriorityDisinherit+0xd4>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	429a      	cmp	r2, r3
 8007892:	d903      	bls.n	800789c <xTaskPriorityDisinherit+0xa4>
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	4a0c      	ldr	r2, [pc, #48]	; (80078cc <xTaskPriorityDisinherit+0xd4>)
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a0:	4613      	mov	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4a09      	ldr	r2, [pc, #36]	; (80078d0 <xTaskPriorityDisinherit+0xd8>)
 80078aa:	441a      	add	r2, r3
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	3304      	adds	r3, #4
 80078b0:	4619      	mov	r1, r3
 80078b2:	4610      	mov	r0, r2
 80078b4:	f7fe fbd3 	bl	800605e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078b8:	2301      	movs	r3, #1
 80078ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078bc:	697b      	ldr	r3, [r7, #20]
	}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20000ad8 	.word	0x20000ad8
 80078cc:	20000fb4 	.word	0x20000fb4
 80078d0:	20000adc 	.word	0x20000adc

080078d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078de:	4b21      	ldr	r3, [pc, #132]	; (8007964 <prvAddCurrentTaskToDelayedList+0x90>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078e4:	4b20      	ldr	r3, [pc, #128]	; (8007968 <prvAddCurrentTaskToDelayedList+0x94>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3304      	adds	r3, #4
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fe fc12 	bl	8006114 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f6:	d10a      	bne.n	800790e <prvAddCurrentTaskToDelayedList+0x3a>
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d007      	beq.n	800790e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078fe:	4b1a      	ldr	r3, [pc, #104]	; (8007968 <prvAddCurrentTaskToDelayedList+0x94>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3304      	adds	r3, #4
 8007904:	4619      	mov	r1, r3
 8007906:	4819      	ldr	r0, [pc, #100]	; (800796c <prvAddCurrentTaskToDelayedList+0x98>)
 8007908:	f7fe fba9 	bl	800605e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800790c:	e026      	b.n	800795c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4413      	add	r3, r2
 8007914:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007916:	4b14      	ldr	r3, [pc, #80]	; (8007968 <prvAddCurrentTaskToDelayedList+0x94>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	429a      	cmp	r2, r3
 8007924:	d209      	bcs.n	800793a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007926:	4b12      	ldr	r3, [pc, #72]	; (8007970 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	4b0f      	ldr	r3, [pc, #60]	; (8007968 <prvAddCurrentTaskToDelayedList+0x94>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3304      	adds	r3, #4
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f7fe fbb6 	bl	80060a4 <vListInsert>
}
 8007938:	e010      	b.n	800795c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800793a:	4b0e      	ldr	r3, [pc, #56]	; (8007974 <prvAddCurrentTaskToDelayedList+0xa0>)
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	4b0a      	ldr	r3, [pc, #40]	; (8007968 <prvAddCurrentTaskToDelayedList+0x94>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3304      	adds	r3, #4
 8007944:	4619      	mov	r1, r3
 8007946:	4610      	mov	r0, r2
 8007948:	f7fe fbac 	bl	80060a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800794c:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <prvAddCurrentTaskToDelayedList+0xa4>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	429a      	cmp	r2, r3
 8007954:	d202      	bcs.n	800795c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007956:	4a08      	ldr	r2, [pc, #32]	; (8007978 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	6013      	str	r3, [r2, #0]
}
 800795c:	bf00      	nop
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20000fb0 	.word	0x20000fb0
 8007968:	20000ad8 	.word	0x20000ad8
 800796c:	20000f98 	.word	0x20000f98
 8007970:	20000f68 	.word	0x20000f68
 8007974:	20000f64 	.word	0x20000f64
 8007978:	20000fcc 	.word	0x20000fcc

0800797c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b08a      	sub	sp, #40	; 0x28
 8007980:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007982:	2300      	movs	r3, #0
 8007984:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007986:	f000 fb5b 	bl	8008040 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800798a:	4b1c      	ldr	r3, [pc, #112]	; (80079fc <xTimerCreateTimerTask+0x80>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d021      	beq.n	80079d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007996:	2300      	movs	r3, #0
 8007998:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800799a:	1d3a      	adds	r2, r7, #4
 800799c:	f107 0108 	add.w	r1, r7, #8
 80079a0:	f107 030c 	add.w	r3, r7, #12
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fe fb15 	bl	8005fd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80079aa:	6879      	ldr	r1, [r7, #4]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	9202      	str	r2, [sp, #8]
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	2302      	movs	r3, #2
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	2300      	movs	r3, #0
 80079ba:	460a      	mov	r2, r1
 80079bc:	4910      	ldr	r1, [pc, #64]	; (8007a00 <xTimerCreateTimerTask+0x84>)
 80079be:	4811      	ldr	r0, [pc, #68]	; (8007a04 <xTimerCreateTimerTask+0x88>)
 80079c0:	f7ff f8b6 	bl	8006b30 <xTaskCreateStatic>
 80079c4:	4603      	mov	r3, r0
 80079c6:	4a10      	ldr	r2, [pc, #64]	; (8007a08 <xTimerCreateTimerTask+0x8c>)
 80079c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80079ca:	4b0f      	ldr	r3, [pc, #60]	; (8007a08 <xTimerCreateTimerTask+0x8c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80079d2:	2301      	movs	r3, #1
 80079d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10a      	bne.n	80079f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	613b      	str	r3, [r7, #16]
}
 80079ee:	bf00      	nop
 80079f0:	e7fe      	b.n	80079f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80079f2:	697b      	ldr	r3, [r7, #20]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20001008 	.word	0x20001008
 8007a00:	080092ec 	.word	0x080092ec
 8007a04:	08007c49 	.word	0x08007c49
 8007a08:	2000100c 	.word	0x2000100c

08007a0c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af02      	add	r7, sp, #8
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007a1a:	2030      	movs	r0, #48	; 0x30
 8007a1c:	f000 fd5e 	bl	80084dc <pvPortMalloc>
 8007a20:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00d      	beq.n	8007a44 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	9301      	str	r3, [sp, #4]
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	68b9      	ldr	r1, [r7, #8]
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 f846 	bl	8007ac8 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007a44:	697b      	ldr	r3, [r7, #20]
	}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b08a      	sub	sp, #40	; 0x28
 8007a52:	af02      	add	r7, sp, #8
 8007a54:	60f8      	str	r0, [r7, #12]
 8007a56:	60b9      	str	r1, [r7, #8]
 8007a58:	607a      	str	r2, [r7, #4]
 8007a5a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007a5c:	2330      	movs	r3, #48	; 0x30
 8007a5e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	2b30      	cmp	r3, #48	; 0x30
 8007a64:	d00a      	beq.n	8007a7c <xTimerCreateStatic+0x2e>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	61bb      	str	r3, [r7, #24]
}
 8007a78:	bf00      	nop
 8007a7a:	e7fe      	b.n	8007a7a <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <xTimerCreateStatic+0x4a>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	617b      	str	r3, [r7, #20]
}
 8007a94:	bf00      	nop
 8007a96:	e7fe      	b.n	8007a96 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9a:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00d      	beq.n	8007abe <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	68b9      	ldr	r1, [r7, #8]
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 f809 	bl	8007ac8 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8007abe:	69fb      	ldr	r3, [r7, #28]
	}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3720      	adds	r7, #32
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	617b      	str	r3, [r7, #20]
}
 8007aee:	bf00      	nop
 8007af0:	e7fe      	b.n	8007af0 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d015      	beq.n	8007b24 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007af8:	f000 faa2 	bl	8008040 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	6a3a      	ldr	r2, [r7, #32]
 8007b18:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe fa91 	bl	8006046 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007b24:	bf00      	nop
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08a      	sub	sp, #40	; 0x28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10a      	bne.n	8007b5a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	623b      	str	r3, [r7, #32]
}
 8007b56:	bf00      	nop
 8007b58:	e7fe      	b.n	8007b58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007b5a:	4b1a      	ldr	r3, [pc, #104]	; (8007bc4 <xTimerGenericCommand+0x98>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d02a      	beq.n	8007bb8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2b05      	cmp	r3, #5
 8007b72:	dc18      	bgt.n	8007ba6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b74:	f7ff fe22 	bl	80077bc <xTaskGetSchedulerState>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d109      	bne.n	8007b92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b7e:	4b11      	ldr	r3, [pc, #68]	; (8007bc4 <xTimerGenericCommand+0x98>)
 8007b80:	6818      	ldr	r0, [r3, #0]
 8007b82:	f107 0110 	add.w	r1, r7, #16
 8007b86:	2300      	movs	r3, #0
 8007b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b8a:	f7fe fbef 	bl	800636c <xQueueGenericSend>
 8007b8e:	6278      	str	r0, [r7, #36]	; 0x24
 8007b90:	e012      	b.n	8007bb8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b92:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <xTimerGenericCommand+0x98>)
 8007b94:	6818      	ldr	r0, [r3, #0]
 8007b96:	f107 0110 	add.w	r1, r7, #16
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f7fe fbe5 	bl	800636c <xQueueGenericSend>
 8007ba2:	6278      	str	r0, [r7, #36]	; 0x24
 8007ba4:	e008      	b.n	8007bb8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ba6:	4b07      	ldr	r3, [pc, #28]	; (8007bc4 <xTimerGenericCommand+0x98>)
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	f107 0110 	add.w	r1, r7, #16
 8007bae:	2300      	movs	r3, #0
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	f7fe fcd9 	bl	8006568 <xQueueGenericSendFromISR>
 8007bb6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3728      	adds	r7, #40	; 0x28
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20001008 	.word	0x20001008

08007bc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b088      	sub	sp, #32
 8007bcc:	af02      	add	r7, sp, #8
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bd2:	4b1c      	ldr	r3, [pc, #112]	; (8007c44 <prvProcessExpiredTimer+0x7c>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	3304      	adds	r3, #4
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe fa97 	bl	8006114 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d122      	bne.n	8007c34 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	699a      	ldr	r2, [r3, #24]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	18d1      	adds	r1, r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	6978      	ldr	r0, [r7, #20]
 8007bfc:	f000 f8c8 	bl	8007d90 <prvInsertTimerInActiveList>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d016      	beq.n	8007c34 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c06:	2300      	movs	r3, #0
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	2100      	movs	r1, #0
 8007c10:	6978      	ldr	r0, [r7, #20]
 8007c12:	f7ff ff8b 	bl	8007b2c <xTimerGenericCommand>
 8007c16:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	60fb      	str	r3, [r7, #12]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c38:	6978      	ldr	r0, [r7, #20]
 8007c3a:	4798      	blx	r3
}
 8007c3c:	bf00      	nop
 8007c3e:	3718      	adds	r7, #24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	20001000 	.word	0x20001000

08007c48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c50:	f107 0308 	add.w	r3, r7, #8
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 f857 	bl	8007d08 <prvGetNextExpireTime>
 8007c5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 f803 	bl	8007c6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c66:	f000 f8d5 	bl	8007e14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c6a:	e7f1      	b.n	8007c50 <prvTimerTask+0x8>

08007c6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c76:	f7ff f9af 	bl	8006fd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c7a:	f107 0308 	add.w	r3, r7, #8
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 f866 	bl	8007d50 <prvSampleTimeNow>
 8007c84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d130      	bne.n	8007cee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10a      	bne.n	8007ca8 <prvProcessTimerOrBlockTask+0x3c>
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d806      	bhi.n	8007ca8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c9a:	f7ff f9ab 	bl	8006ff4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c9e:	68f9      	ldr	r1, [r7, #12]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff ff91 	bl	8007bc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ca6:	e024      	b.n	8007cf2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d008      	beq.n	8007cc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007cae:	4b13      	ldr	r3, [pc, #76]	; (8007cfc <prvProcessTimerOrBlockTask+0x90>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	bf0c      	ite	eq
 8007cb8:	2301      	moveq	r3, #1
 8007cba:	2300      	movne	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007cc0:	4b0f      	ldr	r3, [pc, #60]	; (8007d00 <prvProcessTimerOrBlockTask+0x94>)
 8007cc2:	6818      	ldr	r0, [r3, #0]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	f7fe fefb 	bl	8006ac8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007cd2:	f7ff f98f 	bl	8006ff4 <xTaskResumeAll>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007cdc:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <prvProcessTimerOrBlockTask+0x98>)
 8007cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	f3bf 8f6f 	isb	sy
}
 8007cec:	e001      	b.n	8007cf2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007cee:	f7ff f981 	bl	8006ff4 <xTaskResumeAll>
}
 8007cf2:	bf00      	nop
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20001004 	.word	0x20001004
 8007d00:	20001008 	.word	0x20001008
 8007d04:	e000ed04 	.word	0xe000ed04

08007d08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007d10:	4b0e      	ldr	r3, [pc, #56]	; (8007d4c <prvGetNextExpireTime+0x44>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	bf0c      	ite	eq
 8007d1a:	2301      	moveq	r3, #1
 8007d1c:	2300      	movne	r3, #0
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	461a      	mov	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d105      	bne.n	8007d3a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d2e:	4b07      	ldr	r3, [pc, #28]	; (8007d4c <prvGetNextExpireTime+0x44>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	e001      	b.n	8007d3e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bc80      	pop	{r7}
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	20001000 	.word	0x20001000

08007d50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d58:	f7ff f9ea 	bl	8007130 <xTaskGetTickCount>
 8007d5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d5e:	4b0b      	ldr	r3, [pc, #44]	; (8007d8c <prvSampleTimeNow+0x3c>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d205      	bcs.n	8007d74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d68:	f000 f908 	bl	8007f7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	e002      	b.n	8007d7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d7a:	4a04      	ldr	r2, [pc, #16]	; (8007d8c <prvSampleTimeNow+0x3c>)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d80:	68fb      	ldr	r3, [r7, #12]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20001010 	.word	0x20001010

08007d90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d812      	bhi.n	8007ddc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	1ad2      	subs	r2, r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d302      	bcc.n	8007dca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	617b      	str	r3, [r7, #20]
 8007dc8:	e01b      	b.n	8007e02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007dca:	4b10      	ldr	r3, [pc, #64]	; (8007e0c <prvInsertTimerInActiveList+0x7c>)
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3304      	adds	r3, #4
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	f7fe f965 	bl	80060a4 <vListInsert>
 8007dda:	e012      	b.n	8007e02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d206      	bcs.n	8007df2 <prvInsertTimerInActiveList+0x62>
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d302      	bcc.n	8007df2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007dec:	2301      	movs	r3, #1
 8007dee:	617b      	str	r3, [r7, #20]
 8007df0:	e007      	b.n	8007e02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007df2:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <prvInsertTimerInActiveList+0x80>)
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	3304      	adds	r3, #4
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	f7fe f951 	bl	80060a4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007e02:	697b      	ldr	r3, [r7, #20]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3718      	adds	r7, #24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	20001004 	.word	0x20001004
 8007e10:	20001000 	.word	0x20001000

08007e14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b08e      	sub	sp, #56	; 0x38
 8007e18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e1a:	e09d      	b.n	8007f58 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	da18      	bge.n	8007e54 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007e22:	1d3b      	adds	r3, r7, #4
 8007e24:	3304      	adds	r3, #4
 8007e26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10a      	bne.n	8007e44 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	61fb      	str	r3, [r7, #28]
}
 8007e40:	bf00      	nop
 8007e42:	e7fe      	b.n	8007e42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e4a:	6850      	ldr	r0, [r2, #4]
 8007e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e4e:	6892      	ldr	r2, [r2, #8]
 8007e50:	4611      	mov	r1, r2
 8007e52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	db7d      	blt.n	8007f56 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d004      	beq.n	8007e70 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	3304      	adds	r3, #4
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe f952 	bl	8006114 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e70:	463b      	mov	r3, r7
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff ff6c 	bl	8007d50 <prvSampleTimeNow>
 8007e78:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b09      	cmp	r3, #9
 8007e7e:	d86b      	bhi.n	8007f58 <prvProcessReceivedCommands+0x144>
 8007e80:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <prvProcessReceivedCommands+0x74>)
 8007e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e86:	bf00      	nop
 8007e88:	08007eb1 	.word	0x08007eb1
 8007e8c:	08007eb1 	.word	0x08007eb1
 8007e90:	08007eb1 	.word	0x08007eb1
 8007e94:	08007f59 	.word	0x08007f59
 8007e98:	08007f0d 	.word	0x08007f0d
 8007e9c:	08007f45 	.word	0x08007f45
 8007ea0:	08007eb1 	.word	0x08007eb1
 8007ea4:	08007eb1 	.word	0x08007eb1
 8007ea8:	08007f59 	.word	0x08007f59
 8007eac:	08007f0d 	.word	0x08007f0d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	18d1      	adds	r1, r2, r3
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ebe:	f7ff ff67 	bl	8007d90 <prvInsertTimerInActiveList>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d047      	beq.n	8007f58 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ece:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d13f      	bne.n	8007f58 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	441a      	add	r2, r3
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eea:	f7ff fe1f 	bl	8007b2c <xTimerGenericCommand>
 8007eee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d130      	bne.n	8007f58 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	61bb      	str	r3, [r7, #24]
}
 8007f08:	bf00      	nop
 8007f0a:	e7fe      	b.n	8007f0a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10a      	bne.n	8007f30 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	617b      	str	r3, [r7, #20]
}
 8007f2c:	bf00      	nop
 8007f2e:	e7fe      	b.n	8007f2e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	699a      	ldr	r2, [r3, #24]
 8007f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f36:	18d1      	adds	r1, r2, r3
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f3e:	f7ff ff27 	bl	8007d90 <prvInsertTimerInActiveList>
					break;
 8007f42:	e009      	b.n	8007f58 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d104      	bne.n	8007f58 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f50:	f000 fb88 	bl	8008664 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f54:	e000      	b.n	8007f58 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007f56:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f58:	4b07      	ldr	r3, [pc, #28]	; (8007f78 <prvProcessReceivedCommands+0x164>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	1d39      	adds	r1, r7, #4
 8007f5e:	2200      	movs	r2, #0
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7fe fb99 	bl	8006698 <xQueueReceive>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f47f af57 	bne.w	8007e1c <prvProcessReceivedCommands+0x8>
	}
}
 8007f6e:	bf00      	nop
 8007f70:	bf00      	nop
 8007f72:	3730      	adds	r7, #48	; 0x30
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	20001008 	.word	0x20001008

08007f7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b088      	sub	sp, #32
 8007f80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f82:	e045      	b.n	8008010 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f84:	4b2c      	ldr	r3, [pc, #176]	; (8008038 <prvSwitchTimerLists+0xbc>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f8e:	4b2a      	ldr	r3, [pc, #168]	; (8008038 <prvSwitchTimerLists+0xbc>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fe f8b9 	bl	8006114 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d12e      	bne.n	8008010 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	4413      	add	r3, r2
 8007fba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d90e      	bls.n	8007fe2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007fd0:	4b19      	ldr	r3, [pc, #100]	; (8008038 <prvSwitchTimerLists+0xbc>)
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4610      	mov	r0, r2
 8007fdc:	f7fe f862 	bl	80060a4 <vListInsert>
 8007fe0:	e016      	b.n	8008010 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	2100      	movs	r1, #0
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f7ff fd9d 	bl	8007b2c <xTimerGenericCommand>
 8007ff2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10a      	bne.n	8008010 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	603b      	str	r3, [r7, #0]
}
 800800c:	bf00      	nop
 800800e:	e7fe      	b.n	800800e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008010:	4b09      	ldr	r3, [pc, #36]	; (8008038 <prvSwitchTimerLists+0xbc>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1b4      	bne.n	8007f84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800801a:	4b07      	ldr	r3, [pc, #28]	; (8008038 <prvSwitchTimerLists+0xbc>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008020:	4b06      	ldr	r3, [pc, #24]	; (800803c <prvSwitchTimerLists+0xc0>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a04      	ldr	r2, [pc, #16]	; (8008038 <prvSwitchTimerLists+0xbc>)
 8008026:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008028:	4a04      	ldr	r2, [pc, #16]	; (800803c <prvSwitchTimerLists+0xc0>)
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	6013      	str	r3, [r2, #0]
}
 800802e:	bf00      	nop
 8008030:	3718      	adds	r7, #24
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20001000 	.word	0x20001000
 800803c:	20001004 	.word	0x20001004

08008040 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008046:	f000 f949 	bl	80082dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800804a:	4b15      	ldr	r3, [pc, #84]	; (80080a0 <prvCheckForValidListAndQueue+0x60>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d120      	bne.n	8008094 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008052:	4814      	ldr	r0, [pc, #80]	; (80080a4 <prvCheckForValidListAndQueue+0x64>)
 8008054:	f7fd ffd8 	bl	8006008 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008058:	4813      	ldr	r0, [pc, #76]	; (80080a8 <prvCheckForValidListAndQueue+0x68>)
 800805a:	f7fd ffd5 	bl	8006008 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800805e:	4b13      	ldr	r3, [pc, #76]	; (80080ac <prvCheckForValidListAndQueue+0x6c>)
 8008060:	4a10      	ldr	r2, [pc, #64]	; (80080a4 <prvCheckForValidListAndQueue+0x64>)
 8008062:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008064:	4b12      	ldr	r3, [pc, #72]	; (80080b0 <prvCheckForValidListAndQueue+0x70>)
 8008066:	4a10      	ldr	r2, [pc, #64]	; (80080a8 <prvCheckForValidListAndQueue+0x68>)
 8008068:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800806a:	2300      	movs	r3, #0
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	4b11      	ldr	r3, [pc, #68]	; (80080b4 <prvCheckForValidListAndQueue+0x74>)
 8008070:	4a11      	ldr	r2, [pc, #68]	; (80080b8 <prvCheckForValidListAndQueue+0x78>)
 8008072:	2110      	movs	r1, #16
 8008074:	200a      	movs	r0, #10
 8008076:	f7fe f8df 	bl	8006238 <xQueueGenericCreateStatic>
 800807a:	4603      	mov	r3, r0
 800807c:	4a08      	ldr	r2, [pc, #32]	; (80080a0 <prvCheckForValidListAndQueue+0x60>)
 800807e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008080:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <prvCheckForValidListAndQueue+0x60>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d005      	beq.n	8008094 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008088:	4b05      	ldr	r3, [pc, #20]	; (80080a0 <prvCheckForValidListAndQueue+0x60>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	490b      	ldr	r1, [pc, #44]	; (80080bc <prvCheckForValidListAndQueue+0x7c>)
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe fcf2 	bl	8006a78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008094:	f000 f952 	bl	800833c <vPortExitCritical>
}
 8008098:	bf00      	nop
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	20001008 	.word	0x20001008
 80080a4:	20000fd8 	.word	0x20000fd8
 80080a8:	20000fec 	.word	0x20000fec
 80080ac:	20001000 	.word	0x20001000
 80080b0:	20001004 	.word	0x20001004
 80080b4:	200010b4 	.word	0x200010b4
 80080b8:	20001014 	.word	0x20001014
 80080bc:	080092f4 	.word	0x080092f4

080080c0 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10a      	bne.n	80080e8 <pvTimerGetTimerID+0x28>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	60fb      	str	r3, [r7, #12]
}
 80080e4:	bf00      	nop
 80080e6:	e7fe      	b.n	80080e6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80080e8:	f000 f8f8 	bl	80082dc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80080f2:	f000 f923 	bl	800833c <vPortExitCritical>

	return pvReturn;
 80080f6:	693b      	ldr	r3, [r7, #16]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	3b04      	subs	r3, #4
 8008110:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3b04      	subs	r3, #4
 800811e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	f023 0201 	bic.w	r2, r3, #1
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3b04      	subs	r3, #4
 800812e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008130:	4a08      	ldr	r2, [pc, #32]	; (8008154 <pxPortInitialiseStack+0x54>)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3b14      	subs	r3, #20
 800813a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3b20      	subs	r3, #32
 8008146:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008148:	68fb      	ldr	r3, [r7, #12]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	bc80      	pop	{r7}
 8008152:	4770      	bx	lr
 8008154:	08008159 	.word	0x08008159

08008158 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800815e:	2300      	movs	r3, #0
 8008160:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008162:	4b12      	ldr	r3, [pc, #72]	; (80081ac <prvTaskExitError+0x54>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816a:	d00a      	beq.n	8008182 <prvTaskExitError+0x2a>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	60fb      	str	r3, [r7, #12]
}
 800817e:	bf00      	nop
 8008180:	e7fe      	b.n	8008180 <prvTaskExitError+0x28>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	60bb      	str	r3, [r7, #8]
}
 8008194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008196:	bf00      	nop
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0fc      	beq.n	8008198 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800819e:	bf00      	nop
 80081a0:	bf00      	nop
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc80      	pop	{r7}
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	200000c0 	.word	0x200000c0

080081b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081b0:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <pxCurrentTCBConst2>)
 80081b2:	6819      	ldr	r1, [r3, #0]
 80081b4:	6808      	ldr	r0, [r1, #0]
 80081b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80081ba:	f380 8809 	msr	PSP, r0
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f380 8811 	msr	BASEPRI, r0
 80081ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80081ce:	4770      	bx	lr

080081d0 <pxCurrentTCBConst2>:
 80081d0:	20000ad8 	.word	0x20000ad8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop

080081d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80081d8:	4806      	ldr	r0, [pc, #24]	; (80081f4 <prvPortStartFirstTask+0x1c>)
 80081da:	6800      	ldr	r0, [r0, #0]
 80081dc:	6800      	ldr	r0, [r0, #0]
 80081de:	f380 8808 	msr	MSP, r0
 80081e2:	b662      	cpsie	i
 80081e4:	b661      	cpsie	f
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	df00      	svc	0
 80081f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081f2:	bf00      	nop
 80081f4:	e000ed08 	.word	0xe000ed08

080081f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081fe:	4b32      	ldr	r3, [pc, #200]	; (80082c8 <xPortStartScheduler+0xd0>)
 8008200:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	22ff      	movs	r2, #255	; 0xff
 800820e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	b2db      	uxtb	r3, r3
 8008216:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008218:	78fb      	ldrb	r3, [r7, #3]
 800821a:	b2db      	uxtb	r3, r3
 800821c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008220:	b2da      	uxtb	r2, r3
 8008222:	4b2a      	ldr	r3, [pc, #168]	; (80082cc <xPortStartScheduler+0xd4>)
 8008224:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008226:	4b2a      	ldr	r3, [pc, #168]	; (80082d0 <xPortStartScheduler+0xd8>)
 8008228:	2207      	movs	r2, #7
 800822a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800822c:	e009      	b.n	8008242 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800822e:	4b28      	ldr	r3, [pc, #160]	; (80082d0 <xPortStartScheduler+0xd8>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3b01      	subs	r3, #1
 8008234:	4a26      	ldr	r2, [pc, #152]	; (80082d0 <xPortStartScheduler+0xd8>)
 8008236:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	b2db      	uxtb	r3, r3
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	b2db      	uxtb	r3, r3
 8008240:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008242:	78fb      	ldrb	r3, [r7, #3]
 8008244:	b2db      	uxtb	r3, r3
 8008246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824a:	2b80      	cmp	r3, #128	; 0x80
 800824c:	d0ef      	beq.n	800822e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800824e:	4b20      	ldr	r3, [pc, #128]	; (80082d0 <xPortStartScheduler+0xd8>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f1c3 0307 	rsb	r3, r3, #7
 8008256:	2b04      	cmp	r3, #4
 8008258:	d00a      	beq.n	8008270 <xPortStartScheduler+0x78>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	60bb      	str	r3, [r7, #8]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008270:	4b17      	ldr	r3, [pc, #92]	; (80082d0 <xPortStartScheduler+0xd8>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	021b      	lsls	r3, r3, #8
 8008276:	4a16      	ldr	r2, [pc, #88]	; (80082d0 <xPortStartScheduler+0xd8>)
 8008278:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800827a:	4b15      	ldr	r3, [pc, #84]	; (80082d0 <xPortStartScheduler+0xd8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008282:	4a13      	ldr	r2, [pc, #76]	; (80082d0 <xPortStartScheduler+0xd8>)
 8008284:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	b2da      	uxtb	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800828e:	4b11      	ldr	r3, [pc, #68]	; (80082d4 <xPortStartScheduler+0xdc>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a10      	ldr	r2, [pc, #64]	; (80082d4 <xPortStartScheduler+0xdc>)
 8008294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008298:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800829a:	4b0e      	ldr	r3, [pc, #56]	; (80082d4 <xPortStartScheduler+0xdc>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a0d      	ldr	r2, [pc, #52]	; (80082d4 <xPortStartScheduler+0xdc>)
 80082a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082a6:	f000 f8b9 	bl	800841c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082aa:	4b0b      	ldr	r3, [pc, #44]	; (80082d8 <xPortStartScheduler+0xe0>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082b0:	f7ff ff92 	bl	80081d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082b4:	f7ff f808 	bl	80072c8 <vTaskSwitchContext>
	prvTaskExitError();
 80082b8:	f7ff ff4e 	bl	8008158 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	e000e400 	.word	0xe000e400
 80082cc:	20001104 	.word	0x20001104
 80082d0:	20001108 	.word	0x20001108
 80082d4:	e000ed20 	.word	0xe000ed20
 80082d8:	200000c0 	.word	0x200000c0

080082dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
	__asm volatile
 80082e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	607b      	str	r3, [r7, #4]
}
 80082f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082f6:	4b0f      	ldr	r3, [pc, #60]	; (8008334 <vPortEnterCritical+0x58>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3301      	adds	r3, #1
 80082fc:	4a0d      	ldr	r2, [pc, #52]	; (8008334 <vPortEnterCritical+0x58>)
 80082fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008300:	4b0c      	ldr	r3, [pc, #48]	; (8008334 <vPortEnterCritical+0x58>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d10f      	bne.n	8008328 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008308:	4b0b      	ldr	r3, [pc, #44]	; (8008338 <vPortEnterCritical+0x5c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00a      	beq.n	8008328 <vPortEnterCritical+0x4c>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	603b      	str	r3, [r7, #0]
}
 8008324:	bf00      	nop
 8008326:	e7fe      	b.n	8008326 <vPortEnterCritical+0x4a>
	}
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	bc80      	pop	{r7}
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	200000c0 	.word	0x200000c0
 8008338:	e000ed04 	.word	0xe000ed04

0800833c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008342:	4b11      	ldr	r3, [pc, #68]	; (8008388 <vPortExitCritical+0x4c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10a      	bne.n	8008360 <vPortExitCritical+0x24>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	607b      	str	r3, [r7, #4]
}
 800835c:	bf00      	nop
 800835e:	e7fe      	b.n	800835e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008360:	4b09      	ldr	r3, [pc, #36]	; (8008388 <vPortExitCritical+0x4c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3b01      	subs	r3, #1
 8008366:	4a08      	ldr	r2, [pc, #32]	; (8008388 <vPortExitCritical+0x4c>)
 8008368:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800836a:	4b07      	ldr	r3, [pc, #28]	; (8008388 <vPortExitCritical+0x4c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d105      	bne.n	800837e <vPortExitCritical+0x42>
 8008372:	2300      	movs	r3, #0
 8008374:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	f383 8811 	msr	BASEPRI, r3
}
 800837c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	bc80      	pop	{r7}
 8008386:	4770      	bx	lr
 8008388:	200000c0 	.word	0x200000c0
 800838c:	00000000 	.word	0x00000000

08008390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008390:	f3ef 8009 	mrs	r0, PSP
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	4b0d      	ldr	r3, [pc, #52]	; (80083d0 <pxCurrentTCBConst>)
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80083a0:	6010      	str	r0, [r2, #0]
 80083a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80083a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80083aa:	f380 8811 	msr	BASEPRI, r0
 80083ae:	f7fe ff8b 	bl	80072c8 <vTaskSwitchContext>
 80083b2:	f04f 0000 	mov.w	r0, #0
 80083b6:	f380 8811 	msr	BASEPRI, r0
 80083ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80083be:	6819      	ldr	r1, [r3, #0]
 80083c0:	6808      	ldr	r0, [r1, #0]
 80083c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80083c6:	f380 8809 	msr	PSP, r0
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	4770      	bx	lr

080083d0 <pxCurrentTCBConst>:
 80083d0:	20000ad8 	.word	0x20000ad8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop

080083d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	607b      	str	r3, [r7, #4]
}
 80083f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083f2:	f7fe feab 	bl	800714c <xTaskIncrementTick>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083fc:	4b06      	ldr	r3, [pc, #24]	; (8008418 <SysTick_Handler+0x40>)
 80083fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	2300      	movs	r3, #0
 8008406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	f383 8811 	msr	BASEPRI, r3
}
 800840e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008410:	bf00      	nop
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	e000ed04 	.word	0xe000ed04

0800841c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008420:	4b0a      	ldr	r3, [pc, #40]	; (800844c <vPortSetupTimerInterrupt+0x30>)
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008426:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <vPortSetupTimerInterrupt+0x34>)
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800842c:	4b09      	ldr	r3, [pc, #36]	; (8008454 <vPortSetupTimerInterrupt+0x38>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a09      	ldr	r2, [pc, #36]	; (8008458 <vPortSetupTimerInterrupt+0x3c>)
 8008432:	fba2 2303 	umull	r2, r3, r2, r3
 8008436:	099b      	lsrs	r3, r3, #6
 8008438:	4a08      	ldr	r2, [pc, #32]	; (800845c <vPortSetupTimerInterrupt+0x40>)
 800843a:	3b01      	subs	r3, #1
 800843c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800843e:	4b03      	ldr	r3, [pc, #12]	; (800844c <vPortSetupTimerInterrupt+0x30>)
 8008440:	2207      	movs	r2, #7
 8008442:	601a      	str	r2, [r3, #0]
}
 8008444:	bf00      	nop
 8008446:	46bd      	mov	sp, r7
 8008448:	bc80      	pop	{r7}
 800844a:	4770      	bx	lr
 800844c:	e000e010 	.word	0xe000e010
 8008450:	e000e018 	.word	0xe000e018
 8008454:	20000000 	.word	0x20000000
 8008458:	10624dd3 	.word	0x10624dd3
 800845c:	e000e014 	.word	0xe000e014

08008460 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008466:	f3ef 8305 	mrs	r3, IPSR
 800846a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2b0f      	cmp	r3, #15
 8008470:	d914      	bls.n	800849c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008472:	4a16      	ldr	r2, [pc, #88]	; (80084cc <vPortValidateInterruptPriority+0x6c>)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4413      	add	r3, r2
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800847c:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <vPortValidateInterruptPriority+0x70>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	7afa      	ldrb	r2, [r7, #11]
 8008482:	429a      	cmp	r2, r3
 8008484:	d20a      	bcs.n	800849c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	607b      	str	r3, [r7, #4]
}
 8008498:	bf00      	nop
 800849a:	e7fe      	b.n	800849a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800849c:	4b0d      	ldr	r3, [pc, #52]	; (80084d4 <vPortValidateInterruptPriority+0x74>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80084a4:	4b0c      	ldr	r3, [pc, #48]	; (80084d8 <vPortValidateInterruptPriority+0x78>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d90a      	bls.n	80084c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	603b      	str	r3, [r7, #0]
}
 80084be:	bf00      	nop
 80084c0:	e7fe      	b.n	80084c0 <vPortValidateInterruptPriority+0x60>
	}
 80084c2:	bf00      	nop
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bc80      	pop	{r7}
 80084ca:	4770      	bx	lr
 80084cc:	e000e3f0 	.word	0xe000e3f0
 80084d0:	20001104 	.word	0x20001104
 80084d4:	e000ed0c 	.word	0xe000ed0c
 80084d8:	20001108 	.word	0x20001108

080084dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08a      	sub	sp, #40	; 0x28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084e4:	2300      	movs	r3, #0
 80084e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084e8:	f7fe fd76 	bl	8006fd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084ec:	4b58      	ldr	r3, [pc, #352]	; (8008650 <pvPortMalloc+0x174>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084f4:	f000 f910 	bl	8008718 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084f8:	4b56      	ldr	r3, [pc, #344]	; (8008654 <pvPortMalloc+0x178>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4013      	ands	r3, r2
 8008500:	2b00      	cmp	r3, #0
 8008502:	f040 808e 	bne.w	8008622 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d01d      	beq.n	8008548 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800850c:	2208      	movs	r2, #8
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4413      	add	r3, r2
 8008512:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	2b00      	cmp	r3, #0
 800851c:	d014      	beq.n	8008548 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f023 0307 	bic.w	r3, r3, #7
 8008524:	3308      	adds	r3, #8
 8008526:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f003 0307 	and.w	r3, r3, #7
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00a      	beq.n	8008548 <pvPortMalloc+0x6c>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	617b      	str	r3, [r7, #20]
}
 8008544:	bf00      	nop
 8008546:	e7fe      	b.n	8008546 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d069      	beq.n	8008622 <pvPortMalloc+0x146>
 800854e:	4b42      	ldr	r3, [pc, #264]	; (8008658 <pvPortMalloc+0x17c>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	429a      	cmp	r2, r3
 8008556:	d864      	bhi.n	8008622 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008558:	4b40      	ldr	r3, [pc, #256]	; (800865c <pvPortMalloc+0x180>)
 800855a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800855c:	4b3f      	ldr	r3, [pc, #252]	; (800865c <pvPortMalloc+0x180>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008562:	e004      	b.n	800856e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	429a      	cmp	r2, r3
 8008576:	d903      	bls.n	8008580 <pvPortMalloc+0xa4>
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1f1      	bne.n	8008564 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008580:	4b33      	ldr	r3, [pc, #204]	; (8008650 <pvPortMalloc+0x174>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008586:	429a      	cmp	r2, r3
 8008588:	d04b      	beq.n	8008622 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2208      	movs	r2, #8
 8008590:	4413      	add	r3, r2
 8008592:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	1ad2      	subs	r2, r2, r3
 80085a4:	2308      	movs	r3, #8
 80085a6:	005b      	lsls	r3, r3, #1
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d91f      	bls.n	80085ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4413      	add	r3, r2
 80085b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <pvPortMalloc+0xf8>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	613b      	str	r3, [r7, #16]
}
 80085d0:	bf00      	nop
 80085d2:	e7fe      	b.n	80085d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	1ad2      	subs	r2, r2, r3
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085e6:	69b8      	ldr	r0, [r7, #24]
 80085e8:	f000 f8f8 	bl	80087dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085ec:	4b1a      	ldr	r3, [pc, #104]	; (8008658 <pvPortMalloc+0x17c>)
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	4a18      	ldr	r2, [pc, #96]	; (8008658 <pvPortMalloc+0x17c>)
 80085f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085fa:	4b17      	ldr	r3, [pc, #92]	; (8008658 <pvPortMalloc+0x17c>)
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	4b18      	ldr	r3, [pc, #96]	; (8008660 <pvPortMalloc+0x184>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	429a      	cmp	r2, r3
 8008604:	d203      	bcs.n	800860e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008606:	4b14      	ldr	r3, [pc, #80]	; (8008658 <pvPortMalloc+0x17c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a15      	ldr	r2, [pc, #84]	; (8008660 <pvPortMalloc+0x184>)
 800860c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	685a      	ldr	r2, [r3, #4]
 8008612:	4b10      	ldr	r3, [pc, #64]	; (8008654 <pvPortMalloc+0x178>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	431a      	orrs	r2, r3
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	2200      	movs	r2, #0
 8008620:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008622:	f7fe fce7 	bl	8006ff4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	f003 0307 	and.w	r3, r3, #7
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00a      	beq.n	8008646 <pvPortMalloc+0x16a>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	60fb      	str	r3, [r7, #12]
}
 8008642:	bf00      	nop
 8008644:	e7fe      	b.n	8008644 <pvPortMalloc+0x168>
	return pvReturn;
 8008646:	69fb      	ldr	r3, [r7, #28]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3728      	adds	r7, #40	; 0x28
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20002514 	.word	0x20002514
 8008654:	20002520 	.word	0x20002520
 8008658:	20002518 	.word	0x20002518
 800865c:	2000250c 	.word	0x2000250c
 8008660:	2000251c 	.word	0x2000251c

08008664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d048      	beq.n	8008708 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008676:	2308      	movs	r3, #8
 8008678:	425b      	negs	r3, r3
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	4413      	add	r3, r2
 800867e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	4b21      	ldr	r3, [pc, #132]	; (8008710 <vPortFree+0xac>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4013      	ands	r3, r2
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10a      	bne.n	80086a8 <vPortFree+0x44>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	60fb      	str	r3, [r7, #12]
}
 80086a4:	bf00      	nop
 80086a6:	e7fe      	b.n	80086a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00a      	beq.n	80086c6 <vPortFree+0x62>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	60bb      	str	r3, [r7, #8]
}
 80086c2:	bf00      	nop
 80086c4:	e7fe      	b.n	80086c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	4b11      	ldr	r3, [pc, #68]	; (8008710 <vPortFree+0xac>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4013      	ands	r3, r2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d019      	beq.n	8008708 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d115      	bne.n	8008708 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <vPortFree+0xac>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	43db      	mvns	r3, r3
 80086e6:	401a      	ands	r2, r3
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086ec:	f7fe fc74 	bl	8006fd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	4b07      	ldr	r3, [pc, #28]	; (8008714 <vPortFree+0xb0>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4413      	add	r3, r2
 80086fa:	4a06      	ldr	r2, [pc, #24]	; (8008714 <vPortFree+0xb0>)
 80086fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086fe:	6938      	ldr	r0, [r7, #16]
 8008700:	f000 f86c 	bl	80087dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008704:	f7fe fc76 	bl	8006ff4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008708:	bf00      	nop
 800870a:	3718      	adds	r7, #24
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20002520 	.word	0x20002520
 8008714:	20002518 	.word	0x20002518

08008718 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800871e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008722:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008724:	4b27      	ldr	r3, [pc, #156]	; (80087c4 <prvHeapInit+0xac>)
 8008726:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f003 0307 	and.w	r3, r3, #7
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00c      	beq.n	800874c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3307      	adds	r3, #7
 8008736:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 0307 	bic.w	r3, r3, #7
 800873e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	4a1f      	ldr	r2, [pc, #124]	; (80087c4 <prvHeapInit+0xac>)
 8008748:	4413      	add	r3, r2
 800874a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008750:	4a1d      	ldr	r2, [pc, #116]	; (80087c8 <prvHeapInit+0xb0>)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008756:	4b1c      	ldr	r3, [pc, #112]	; (80087c8 <prvHeapInit+0xb0>)
 8008758:	2200      	movs	r2, #0
 800875a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	4413      	add	r3, r2
 8008762:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008764:	2208      	movs	r2, #8
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	1a9b      	subs	r3, r3, r2
 800876a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 0307 	bic.w	r3, r3, #7
 8008772:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4a15      	ldr	r2, [pc, #84]	; (80087cc <prvHeapInit+0xb4>)
 8008778:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800877a:	4b14      	ldr	r3, [pc, #80]	; (80087cc <prvHeapInit+0xb4>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2200      	movs	r2, #0
 8008780:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008782:	4b12      	ldr	r3, [pc, #72]	; (80087cc <prvHeapInit+0xb4>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2200      	movs	r2, #0
 8008788:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	1ad2      	subs	r2, r2, r3
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008798:	4b0c      	ldr	r3, [pc, #48]	; (80087cc <prvHeapInit+0xb4>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	4a0a      	ldr	r2, [pc, #40]	; (80087d0 <prvHeapInit+0xb8>)
 80087a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	4a09      	ldr	r2, [pc, #36]	; (80087d4 <prvHeapInit+0xbc>)
 80087ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087b0:	4b09      	ldr	r3, [pc, #36]	; (80087d8 <prvHeapInit+0xc0>)
 80087b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087b6:	601a      	str	r2, [r3, #0]
}
 80087b8:	bf00      	nop
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	2000110c 	.word	0x2000110c
 80087c8:	2000250c 	.word	0x2000250c
 80087cc:	20002514 	.word	0x20002514
 80087d0:	2000251c 	.word	0x2000251c
 80087d4:	20002518 	.word	0x20002518
 80087d8:	20002520 	.word	0x20002520

080087dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087e4:	4b27      	ldr	r3, [pc, #156]	; (8008884 <prvInsertBlockIntoFreeList+0xa8>)
 80087e6:	60fb      	str	r3, [r7, #12]
 80087e8:	e002      	b.n	80087f0 <prvInsertBlockIntoFreeList+0x14>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d8f7      	bhi.n	80087ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	4413      	add	r3, r2
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	429a      	cmp	r2, r3
 800880a:	d108      	bne.n	800881e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	441a      	add	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	441a      	add	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d118      	bne.n	8008864 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	4b14      	ldr	r3, [pc, #80]	; (8008888 <prvInsertBlockIntoFreeList+0xac>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	429a      	cmp	r2, r3
 800883c:	d00d      	beq.n	800885a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	441a      	add	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	e008      	b.n	800886c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800885a:	4b0b      	ldr	r3, [pc, #44]	; (8008888 <prvInsertBlockIntoFreeList+0xac>)
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	e003      	b.n	800886c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	429a      	cmp	r2, r3
 8008872:	d002      	beq.n	800887a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800887a:	bf00      	nop
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	bc80      	pop	{r7}
 8008882:	4770      	bx	lr
 8008884:	2000250c 	.word	0x2000250c
 8008888:	20002514 	.word	0x20002514

0800888c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008890:	2200      	movs	r2, #0
 8008892:	4912      	ldr	r1, [pc, #72]	; (80088dc <MX_USB_DEVICE_Init+0x50>)
 8008894:	4812      	ldr	r0, [pc, #72]	; (80088e0 <MX_USB_DEVICE_Init+0x54>)
 8008896:	f7fc f913 	bl	8004ac0 <USBD_Init>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088a0:	f7f7 fe96 	bl	80005d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 80088a4:	490f      	ldr	r1, [pc, #60]	; (80088e4 <MX_USB_DEVICE_Init+0x58>)
 80088a6:	480e      	ldr	r0, [pc, #56]	; (80088e0 <MX_USB_DEVICE_Init+0x54>)
 80088a8:	f7fc f935 	bl	8004b16 <USBD_RegisterClass>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d001      	beq.n	80088b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80088b2:	f7f7 fe8d 	bl	80005d0 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 80088b6:	490c      	ldr	r1, [pc, #48]	; (80088e8 <MX_USB_DEVICE_Init+0x5c>)
 80088b8:	4809      	ldr	r0, [pc, #36]	; (80088e0 <MX_USB_DEVICE_Init+0x54>)
 80088ba:	f7fc f8ef 	bl	8004a9c <USBD_AUDIO_RegisterInterface>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088c4:	f7f7 fe84 	bl	80005d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088c8:	4805      	ldr	r0, [pc, #20]	; (80088e0 <MX_USB_DEVICE_Init+0x54>)
 80088ca:	f7fc f93d 	bl	8004b48 <USBD_Start>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80088d4:	f7f7 fe7c 	bl	80005d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80088d8:	bf00      	nop
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	200000e0 	.word	0x200000e0
 80088e0:	20002524 	.word	0x20002524
 80088e4:	2000000c 	.word	0x2000000c
 80088e8:	200000c4 	.word	0x200000c4

080088ec <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 80088f8:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	bc80      	pop	{r7}
 8008902:	4770      	bx	lr

08008904 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800890c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800890e:	4618      	mov	r0, r3
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	bc80      	pop	{r7}
 8008916:	4770      	bx	lr

08008918 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	4613      	mov	r3, r2
 8008924:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 8008926:	79fb      	ldrb	r3, [r7, #7]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d001      	beq.n	8008930 <AUDIO_AudioCmd_FS+0x18>
 800892c:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800892e:	e000      	b.n	8008932 <AUDIO_AudioCmd_FS+0x1a>
    break;
 8008930:	bf00      	nop
  }
  return (USBD_OK);
 8008932:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	bc80      	pop	{r7}
 800893c:	4770      	bx	lr

0800893e <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	4603      	mov	r3, r0
 8008946:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8008948:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800894a:	4618      	mov	r0, r3
 800894c:	370c      	adds	r7, #12
 800894e:	46bd      	mov	sp, r7
 8008950:	bc80      	pop	{r7}
 8008952:	4770      	bx	lr

08008954 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	4603      	mov	r3, r0
 800895c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800895e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008960:	4618      	mov	r0, r3
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	bc80      	pop	{r7}
 8008968:	4770      	bx	lr

0800896a <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t cmd)
{
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	4603      	mov	r3, r0
 8008972:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008974:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008976:	4618      	mov	r0, r3
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	bc80      	pop	{r7}
 800897e:	4770      	bx	lr

08008980 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 8008980:	b480      	push	{r7}
 8008982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8008984:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008986:	4618      	mov	r0, r3
 8008988:	46bd      	mov	sp, r7
 800898a:	bc80      	pop	{r7}
 800898c:	4770      	bx	lr
	...

08008990 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	4603      	mov	r3, r0
 8008998:	6039      	str	r1, [r7, #0]
 800899a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	2212      	movs	r2, #18
 80089a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80089a2:	4b03      	ldr	r3, [pc, #12]	; (80089b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bc80      	pop	{r7}
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	200000fc 	.word	0x200000fc

080089b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	4603      	mov	r3, r0
 80089bc:	6039      	str	r1, [r7, #0]
 80089be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	2204      	movs	r2, #4
 80089c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80089c6:	4b03      	ldr	r3, [pc, #12]	; (80089d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bc80      	pop	{r7}
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	20000110 	.word	0x20000110

080089d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	6039      	str	r1, [r7, #0]
 80089e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d105      	bne.n	80089f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	4907      	ldr	r1, [pc, #28]	; (8008a0c <USBD_FS_ProductStrDescriptor+0x34>)
 80089ee:	4808      	ldr	r0, [pc, #32]	; (8008a10 <USBD_FS_ProductStrDescriptor+0x38>)
 80089f0:	f7fd f822 	bl	8005a38 <USBD_GetString>
 80089f4:	e004      	b.n	8008a00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	4904      	ldr	r1, [pc, #16]	; (8008a0c <USBD_FS_ProductStrDescriptor+0x34>)
 80089fa:	4805      	ldr	r0, [pc, #20]	; (8008a10 <USBD_FS_ProductStrDescriptor+0x38>)
 80089fc:	f7fd f81c 	bl	8005a38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a00:	4b02      	ldr	r3, [pc, #8]	; (8008a0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	200027e8 	.word	0x200027e8
 8008a10:	080092fc 	.word	0x080092fc

08008a14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	6039      	str	r1, [r7, #0]
 8008a1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	4904      	ldr	r1, [pc, #16]	; (8008a34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a24:	4804      	ldr	r0, [pc, #16]	; (8008a38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a26:	f7fd f807 	bl	8005a38 <USBD_GetString>
  return USBD_StrDesc;
 8008a2a:	4b02      	ldr	r3, [pc, #8]	; (8008a34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	200027e8 	.word	0x200027e8
 8008a38:	08009314 	.word	0x08009314

08008a3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	4603      	mov	r3, r0
 8008a44:	6039      	str	r1, [r7, #0]
 8008a46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	221a      	movs	r2, #26
 8008a4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a4e:	f000 f843 	bl	8008ad8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a52:	4b02      	ldr	r3, [pc, #8]	; (8008a5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	20000114 	.word	0x20000114

08008a60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	6039      	str	r1, [r7, #0]
 8008a6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a6c:	79fb      	ldrb	r3, [r7, #7]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d105      	bne.n	8008a7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	4907      	ldr	r1, [pc, #28]	; (8008a94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a76:	4808      	ldr	r0, [pc, #32]	; (8008a98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a78:	f7fc ffde 	bl	8005a38 <USBD_GetString>
 8008a7c:	e004      	b.n	8008a88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	4904      	ldr	r1, [pc, #16]	; (8008a94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a82:	4805      	ldr	r0, [pc, #20]	; (8008a98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a84:	f7fc ffd8 	bl	8005a38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a88:	4b02      	ldr	r3, [pc, #8]	; (8008a94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	200027e8 	.word	0x200027e8
 8008a98:	08009328 	.word	0x08009328

08008a9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	6039      	str	r1, [r7, #0]
 8008aa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008aa8:	79fb      	ldrb	r3, [r7, #7]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d105      	bne.n	8008aba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	4907      	ldr	r1, [pc, #28]	; (8008ad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ab2:	4808      	ldr	r0, [pc, #32]	; (8008ad4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ab4:	f7fc ffc0 	bl	8005a38 <USBD_GetString>
 8008ab8:	e004      	b.n	8008ac4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	4904      	ldr	r1, [pc, #16]	; (8008ad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008abe:	4805      	ldr	r0, [pc, #20]	; (8008ad4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ac0:	f7fc ffba 	bl	8005a38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ac4:	4b02      	ldr	r3, [pc, #8]	; (8008ad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	200027e8 	.word	0x200027e8
 8008ad4:	08009338 	.word	0x08009338

08008ad8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ade:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <Get_SerialNum+0x44>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ae4:	4b0e      	ldr	r3, [pc, #56]	; (8008b20 <Get_SerialNum+0x48>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008aea:	4b0e      	ldr	r3, [pc, #56]	; (8008b24 <Get_SerialNum+0x4c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4413      	add	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d009      	beq.n	8008b12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008afe:	2208      	movs	r2, #8
 8008b00:	4909      	ldr	r1, [pc, #36]	; (8008b28 <Get_SerialNum+0x50>)
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 f814 	bl	8008b30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b08:	2204      	movs	r2, #4
 8008b0a:	4908      	ldr	r1, [pc, #32]	; (8008b2c <Get_SerialNum+0x54>)
 8008b0c:	68b8      	ldr	r0, [r7, #8]
 8008b0e:	f000 f80f 	bl	8008b30 <IntToUnicode>
  }
}
 8008b12:	bf00      	nop
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	1ffff7e8 	.word	0x1ffff7e8
 8008b20:	1ffff7ec 	.word	0x1ffff7ec
 8008b24:	1ffff7f0 	.word	0x1ffff7f0
 8008b28:	20000116 	.word	0x20000116
 8008b2c:	20000126 	.word	0x20000126

08008b30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b42:	2300      	movs	r3, #0
 8008b44:	75fb      	strb	r3, [r7, #23]
 8008b46:	e027      	b.n	8008b98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	0f1b      	lsrs	r3, r3, #28
 8008b4c:	2b09      	cmp	r3, #9
 8008b4e:	d80b      	bhi.n	8008b68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	0f1b      	lsrs	r3, r3, #28
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	440b      	add	r3, r1
 8008b60:	3230      	adds	r2, #48	; 0x30
 8008b62:	b2d2      	uxtb	r2, r2
 8008b64:	701a      	strb	r2, [r3, #0]
 8008b66:	e00a      	b.n	8008b7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	0f1b      	lsrs	r3, r3, #28
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	4619      	mov	r1, r3
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	440b      	add	r3, r1
 8008b78:	3237      	adds	r2, #55	; 0x37
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	011b      	lsls	r3, r3, #4
 8008b82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	3301      	adds	r3, #1
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b92:	7dfb      	ldrb	r3, [r7, #23]
 8008b94:	3301      	adds	r3, #1
 8008b96:	75fb      	strb	r3, [r7, #23]
 8008b98:	7dfa      	ldrb	r2, [r7, #23]
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d3d3      	bcc.n	8008b48 <IntToUnicode+0x18>
  }
}
 8008ba0:	bf00      	nop
 8008ba2:	bf00      	nop
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bc80      	pop	{r7}
 8008baa:	4770      	bx	lr

08008bac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a11      	ldr	r2, [pc, #68]	; (8008c00 <HAL_PCD_MspInit+0x54>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d11b      	bne.n	8008bf6 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008bbe:	4b11      	ldr	r3, [pc, #68]	; (8008c04 <HAL_PCD_MspInit+0x58>)
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	4a10      	ldr	r2, [pc, #64]	; (8008c04 <HAL_PCD_MspInit+0x58>)
 8008bc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008bc8:	61d3      	str	r3, [r2, #28]
 8008bca:	4b0e      	ldr	r3, [pc, #56]	; (8008c04 <HAL_PCD_MspInit+0x58>)
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2105      	movs	r1, #5
 8008bda:	2013      	movs	r0, #19
 8008bdc:	f7f7 ffe7 	bl	8000bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8008be0:	2013      	movs	r0, #19
 8008be2:	f7f8 f800 	bl	8000be6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8008be6:	2200      	movs	r2, #0
 8008be8:	2105      	movs	r1, #5
 8008bea:	2014      	movs	r0, #20
 8008bec:	f7f7 ffdf 	bl	8000bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008bf0:	2014      	movs	r0, #20
 8008bf2:	f7f7 fff8 	bl	8000be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008bf6:	bf00      	nop
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	40005c00 	.word	0x40005c00
 8008c04:	40021000 	.word	0x40021000

08008c08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f7fb ffda 	bl	8004bd8 <USBD_LL_SetupStage>
}
 8008c24:	bf00      	nop
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8008c3e:	78fb      	ldrb	r3, [r7, #3]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	015b      	lsls	r3, r3, #5
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	78fb      	ldrb	r3, [r7, #3]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	f7fc f80f 	bl	8004c72 <USBD_LL_DataOutStage>
}
 8008c54:	bf00      	nop
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8008c6e:	78fb      	ldrb	r3, [r7, #3]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	015b      	lsls	r3, r3, #5
 8008c74:	4413      	add	r3, r2
 8008c76:	333c      	adds	r3, #60	; 0x3c
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	78fb      	ldrb	r3, [r7, #3]
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	f7fc f869 	bl	8004d54 <USBD_LL_DataInStage>
}
 8008c82:	bf00      	nop
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b082      	sub	sp, #8
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fc f979 	bl	8004f90 <USBD_LL_SOF>
}
 8008c9e:	bf00      	nop
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b084      	sub	sp, #16
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d001      	beq.n	8008cbe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008cba:	f7f7 fc89 	bl	80005d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008cc4:	7bfa      	ldrb	r2, [r7, #15]
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fc f929 	bl	8004f20 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fc f8e2 	bl	8004e9e <USBD_LL_Reset>
}
 8008cda:	bf00      	nop
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
	...

08008ce4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fc f923 	bl	8004f3e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d005      	beq.n	8008d0c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d00:	4b04      	ldr	r3, [pc, #16]	; (8008d14 <HAL_PCD_SuspendCallback+0x30>)
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	4a03      	ldr	r2, [pc, #12]	; (8008d14 <HAL_PCD_SuspendCallback+0x30>)
 8008d06:	f043 0306 	orr.w	r3, r3, #6
 8008d0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d0c:	bf00      	nop
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	e000ed00 	.word	0xe000ed00

08008d18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fc f91d 	bl	8004f66 <USBD_LL_Resume>
}
 8008d2c:	bf00      	nop
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008d3c:	4a1b      	ldr	r2, [pc, #108]	; (8008dac <USBD_LL_Init+0x78>)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a19      	ldr	r2, [pc, #100]	; (8008dac <USBD_LL_Init+0x78>)
 8008d48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008d4c:	4b17      	ldr	r3, [pc, #92]	; (8008dac <USBD_LL_Init+0x78>)
 8008d4e:	4a18      	ldr	r2, [pc, #96]	; (8008db0 <USBD_LL_Init+0x7c>)
 8008d50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008d52:	4b16      	ldr	r3, [pc, #88]	; (8008dac <USBD_LL_Init+0x78>)
 8008d54:	2208      	movs	r2, #8
 8008d56:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008d58:	4b14      	ldr	r3, [pc, #80]	; (8008dac <USBD_LL_Init+0x78>)
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008d5e:	4b13      	ldr	r3, [pc, #76]	; (8008dac <USBD_LL_Init+0x78>)
 8008d60:	2200      	movs	r2, #0
 8008d62:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008d64:	4b11      	ldr	r3, [pc, #68]	; (8008dac <USBD_LL_Init+0x78>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008d6a:	4b10      	ldr	r3, [pc, #64]	; (8008dac <USBD_LL_Init+0x78>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008d70:	480e      	ldr	r0, [pc, #56]	; (8008dac <USBD_LL_Init+0x78>)
 8008d72:	f7f8 fa2f 	bl	80011d4 <HAL_PCD_Init>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008d7c:	f7f7 fc28 	bl	80005d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d86:	2318      	movs	r3, #24
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	f7f9 f8b6 	bl	8001efc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d96:	2358      	movs	r3, #88	; 0x58
 8008d98:	2200      	movs	r2, #0
 8008d9a:	2180      	movs	r1, #128	; 0x80
 8008d9c:	f7f9 f8ae 	bl	8001efc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	200029e8 	.word	0x200029e8
 8008db0:	40005c00 	.word	0x40005c00

08008db4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7f8 fae3 	bl	8001396 <HAL_PCD_Start>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 f934 	bl	8009044 <USBD_Get_USB_Status>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	4608      	mov	r0, r1
 8008df4:	4611      	mov	r1, r2
 8008df6:	461a      	mov	r2, r3
 8008df8:	4603      	mov	r3, r0
 8008dfa:	70fb      	strb	r3, [r7, #3]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	70bb      	strb	r3, [r7, #2]
 8008e00:	4613      	mov	r3, r2
 8008e02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e12:	78bb      	ldrb	r3, [r7, #2]
 8008e14:	883a      	ldrh	r2, [r7, #0]
 8008e16:	78f9      	ldrb	r1, [r7, #3]
 8008e18:	f7f8 fc16 	bl	8001648 <HAL_PCD_EP_Open>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 f90e 	bl	8009044 <USBD_Get_USB_Status>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b084      	sub	sp, #16
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e50:	78fa      	ldrb	r2, [r7, #3]
 8008e52:	4611      	mov	r1, r2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7f8 fc57 	bl	8001708 <HAL_PCD_EP_Close>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 f8ef 	bl	8009044 <USBD_Get_USB_Status>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7f8 fced 	bl	8001872 <HAL_PCD_EP_SetStall>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 f8d0 	bl	8009044 <USBD_Get_USB_Status>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ea8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b084      	sub	sp, #16
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	460b      	mov	r3, r1
 8008ebc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ecc:	78fa      	ldrb	r2, [r7, #3]
 8008ece:	4611      	mov	r1, r2
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7f8 fd28 	bl	8001926 <HAL_PCD_EP_ClrStall>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 f8b1 	bl	8009044 <USBD_Get_USB_Status>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	da08      	bge.n	8008f1e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f0c:	78fb      	ldrb	r3, [r7, #3]
 8008f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	015b      	lsls	r3, r3, #5
 8008f16:	4413      	add	r3, r2
 8008f18:	332a      	adds	r3, #42	; 0x2a
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	e008      	b.n	8008f30 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f1e:	78fb      	ldrb	r3, [r7, #3]
 8008f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	015b      	lsls	r3, r3, #5
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008f2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bc80      	pop	{r7}
 8008f38:	4770      	bx	lr

08008f3a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f54:	78fa      	ldrb	r2, [r7, #3]
 8008f56:	4611      	mov	r1, r2
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7f8 fb50 	bl	80015fe <HAL_PCD_SetAddress>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 f86d 	bl	8009044 <USBD_Get_USB_Status>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	607a      	str	r2, [r7, #4]
 8008f82:	461a      	mov	r2, r3
 8008f84:	460b      	mov	r3, r1
 8008f86:	72fb      	strb	r3, [r7, #11]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f9a:	893b      	ldrh	r3, [r7, #8]
 8008f9c:	7af9      	ldrb	r1, [r7, #11]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	f7f8 fc2e 	bl	8001800 <HAL_PCD_EP_Transmit>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa8:	7dfb      	ldrb	r3, [r7, #23]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 f84a 	bl	8009044 <USBD_Get_USB_Status>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008fb4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3718      	adds	r7, #24
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b086      	sub	sp, #24
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	461a      	mov	r2, r3
 8008fca:	460b      	mov	r3, r1
 8008fcc:	72fb      	strb	r3, [r7, #11]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008fe0:	893b      	ldrh	r3, [r7, #8]
 8008fe2:	7af9      	ldrb	r1, [r7, #11]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	f7f8 fbd1 	bl	800178c <HAL_PCD_EP_Receive>
 8008fea:	4603      	mov	r3, r0
 8008fec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 f827 	bl	8009044 <USBD_Get_USB_Status>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ffa:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
    that it is an even number and higher than 3
	AUDIO_OUT_PACKET_NUM = 80
  */
  static uint8_t mem[512];
  /* USER CODE END 4 */
  return mem;
 800900c:	4b02      	ldr	r3, [pc, #8]	; (8009018 <USBD_static_malloc+0x14>)
}
 800900e:	4618      	mov	r0, r3
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	bc80      	pop	{r7}
 8009016:	4770      	bx	lr
 8009018:	20002c54 	.word	0x20002c54

0800901c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]

}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	bc80      	pop	{r7}
 800902c:	4770      	bx	lr

0800902e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800902e:	b480      	push	{r7}
 8009030:	b083      	sub	sp, #12
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	460b      	mov	r3, r1
 8009038:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800903a:	bf00      	nop
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	bc80      	pop	{r7}
 8009042:	4770      	bx	lr

08009044 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	4603      	mov	r3, r0
 800904c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009052:	79fb      	ldrb	r3, [r7, #7]
 8009054:	2b03      	cmp	r3, #3
 8009056:	d817      	bhi.n	8009088 <USBD_Get_USB_Status+0x44>
 8009058:	a201      	add	r2, pc, #4	; (adr r2, 8009060 <USBD_Get_USB_Status+0x1c>)
 800905a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905e:	bf00      	nop
 8009060:	08009071 	.word	0x08009071
 8009064:	08009077 	.word	0x08009077
 8009068:	0800907d 	.word	0x0800907d
 800906c:	08009083 	.word	0x08009083
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	73fb      	strb	r3, [r7, #15]
    break;
 8009074:	e00b      	b.n	800908e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009076:	2302      	movs	r3, #2
 8009078:	73fb      	strb	r3, [r7, #15]
    break;
 800907a:	e008      	b.n	800908e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800907c:	2301      	movs	r3, #1
 800907e:	73fb      	strb	r3, [r7, #15]
    break;
 8009080:	e005      	b.n	800908e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009082:	2302      	movs	r3, #2
 8009084:	73fb      	strb	r3, [r7, #15]
    break;
 8009086:	e002      	b.n	800908e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009088:	2302      	movs	r3, #2
 800908a:	73fb      	strb	r3, [r7, #15]
    break;
 800908c:	bf00      	nop
  }
  return usb_status;
 800908e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3714      	adds	r7, #20
 8009094:	46bd      	mov	sp, r7
 8009096:	bc80      	pop	{r7}
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop

0800909c <__libc_init_array>:
 800909c:	b570      	push	{r4, r5, r6, lr}
 800909e:	2600      	movs	r6, #0
 80090a0:	4d0c      	ldr	r5, [pc, #48]	; (80090d4 <__libc_init_array+0x38>)
 80090a2:	4c0d      	ldr	r4, [pc, #52]	; (80090d8 <__libc_init_array+0x3c>)
 80090a4:	1b64      	subs	r4, r4, r5
 80090a6:	10a4      	asrs	r4, r4, #2
 80090a8:	42a6      	cmp	r6, r4
 80090aa:	d109      	bne.n	80090c0 <__libc_init_array+0x24>
 80090ac:	f000 f8f0 	bl	8009290 <_init>
 80090b0:	2600      	movs	r6, #0
 80090b2:	4d0a      	ldr	r5, [pc, #40]	; (80090dc <__libc_init_array+0x40>)
 80090b4:	4c0a      	ldr	r4, [pc, #40]	; (80090e0 <__libc_init_array+0x44>)
 80090b6:	1b64      	subs	r4, r4, r5
 80090b8:	10a4      	asrs	r4, r4, #2
 80090ba:	42a6      	cmp	r6, r4
 80090bc:	d105      	bne.n	80090ca <__libc_init_array+0x2e>
 80090be:	bd70      	pop	{r4, r5, r6, pc}
 80090c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c4:	4798      	blx	r3
 80090c6:	3601      	adds	r6, #1
 80090c8:	e7ee      	b.n	80090a8 <__libc_init_array+0xc>
 80090ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80090ce:	4798      	blx	r3
 80090d0:	3601      	adds	r6, #1
 80090d2:	e7f2      	b.n	80090ba <__libc_init_array+0x1e>
 80090d4:	0800943c 	.word	0x0800943c
 80090d8:	0800943c 	.word	0x0800943c
 80090dc:	0800943c 	.word	0x0800943c
 80090e0:	08009440 	.word	0x08009440

080090e4 <__retarget_lock_acquire_recursive>:
 80090e4:	4770      	bx	lr

080090e6 <__retarget_lock_release_recursive>:
 80090e6:	4770      	bx	lr

080090e8 <memcpy>:
 80090e8:	440a      	add	r2, r1
 80090ea:	4291      	cmp	r1, r2
 80090ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80090f0:	d100      	bne.n	80090f4 <memcpy+0xc>
 80090f2:	4770      	bx	lr
 80090f4:	b510      	push	{r4, lr}
 80090f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090fa:	4291      	cmp	r1, r2
 80090fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009100:	d1f9      	bne.n	80090f6 <memcpy+0xe>
 8009102:	bd10      	pop	{r4, pc}

08009104 <memset>:
 8009104:	4603      	mov	r3, r0
 8009106:	4402      	add	r2, r0
 8009108:	4293      	cmp	r3, r2
 800910a:	d100      	bne.n	800910e <memset+0xa>
 800910c:	4770      	bx	lr
 800910e:	f803 1b01 	strb.w	r1, [r3], #1
 8009112:	e7f9      	b.n	8009108 <memset+0x4>

08009114 <cleanup_glue>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	460c      	mov	r4, r1
 8009118:	6809      	ldr	r1, [r1, #0]
 800911a:	4605      	mov	r5, r0
 800911c:	b109      	cbz	r1, 8009122 <cleanup_glue+0xe>
 800911e:	f7ff fff9 	bl	8009114 <cleanup_glue>
 8009122:	4621      	mov	r1, r4
 8009124:	4628      	mov	r0, r5
 8009126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800912a:	f000 b869 	b.w	8009200 <_free_r>
	...

08009130 <_reclaim_reent>:
 8009130:	4b2c      	ldr	r3, [pc, #176]	; (80091e4 <_reclaim_reent+0xb4>)
 8009132:	b570      	push	{r4, r5, r6, lr}
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4604      	mov	r4, r0
 8009138:	4283      	cmp	r3, r0
 800913a:	d051      	beq.n	80091e0 <_reclaim_reent+0xb0>
 800913c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800913e:	b143      	cbz	r3, 8009152 <_reclaim_reent+0x22>
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d14a      	bne.n	80091dc <_reclaim_reent+0xac>
 8009146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009148:	6819      	ldr	r1, [r3, #0]
 800914a:	b111      	cbz	r1, 8009152 <_reclaim_reent+0x22>
 800914c:	4620      	mov	r0, r4
 800914e:	f000 f857 	bl	8009200 <_free_r>
 8009152:	6961      	ldr	r1, [r4, #20]
 8009154:	b111      	cbz	r1, 800915c <_reclaim_reent+0x2c>
 8009156:	4620      	mov	r0, r4
 8009158:	f000 f852 	bl	8009200 <_free_r>
 800915c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800915e:	b111      	cbz	r1, 8009166 <_reclaim_reent+0x36>
 8009160:	4620      	mov	r0, r4
 8009162:	f000 f84d 	bl	8009200 <_free_r>
 8009166:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009168:	b111      	cbz	r1, 8009170 <_reclaim_reent+0x40>
 800916a:	4620      	mov	r0, r4
 800916c:	f000 f848 	bl	8009200 <_free_r>
 8009170:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009172:	b111      	cbz	r1, 800917a <_reclaim_reent+0x4a>
 8009174:	4620      	mov	r0, r4
 8009176:	f000 f843 	bl	8009200 <_free_r>
 800917a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800917c:	b111      	cbz	r1, 8009184 <_reclaim_reent+0x54>
 800917e:	4620      	mov	r0, r4
 8009180:	f000 f83e 	bl	8009200 <_free_r>
 8009184:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009186:	b111      	cbz	r1, 800918e <_reclaim_reent+0x5e>
 8009188:	4620      	mov	r0, r4
 800918a:	f000 f839 	bl	8009200 <_free_r>
 800918e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009190:	b111      	cbz	r1, 8009198 <_reclaim_reent+0x68>
 8009192:	4620      	mov	r0, r4
 8009194:	f000 f834 	bl	8009200 <_free_r>
 8009198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800919a:	b111      	cbz	r1, 80091a2 <_reclaim_reent+0x72>
 800919c:	4620      	mov	r0, r4
 800919e:	f000 f82f 	bl	8009200 <_free_r>
 80091a2:	69a3      	ldr	r3, [r4, #24]
 80091a4:	b1e3      	cbz	r3, 80091e0 <_reclaim_reent+0xb0>
 80091a6:	4620      	mov	r0, r4
 80091a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80091aa:	4798      	blx	r3
 80091ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80091ae:	b1b9      	cbz	r1, 80091e0 <_reclaim_reent+0xb0>
 80091b0:	4620      	mov	r0, r4
 80091b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091b6:	f7ff bfad 	b.w	8009114 <cleanup_glue>
 80091ba:	5949      	ldr	r1, [r1, r5]
 80091bc:	b941      	cbnz	r1, 80091d0 <_reclaim_reent+0xa0>
 80091be:	3504      	adds	r5, #4
 80091c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091c2:	2d80      	cmp	r5, #128	; 0x80
 80091c4:	68d9      	ldr	r1, [r3, #12]
 80091c6:	d1f8      	bne.n	80091ba <_reclaim_reent+0x8a>
 80091c8:	4620      	mov	r0, r4
 80091ca:	f000 f819 	bl	8009200 <_free_r>
 80091ce:	e7ba      	b.n	8009146 <_reclaim_reent+0x16>
 80091d0:	680e      	ldr	r6, [r1, #0]
 80091d2:	4620      	mov	r0, r4
 80091d4:	f000 f814 	bl	8009200 <_free_r>
 80091d8:	4631      	mov	r1, r6
 80091da:	e7ef      	b.n	80091bc <_reclaim_reent+0x8c>
 80091dc:	2500      	movs	r5, #0
 80091de:	e7ef      	b.n	80091c0 <_reclaim_reent+0x90>
 80091e0:	bd70      	pop	{r4, r5, r6, pc}
 80091e2:	bf00      	nop
 80091e4:	20000130 	.word	0x20000130

080091e8 <__malloc_lock>:
 80091e8:	4801      	ldr	r0, [pc, #4]	; (80091f0 <__malloc_lock+0x8>)
 80091ea:	f7ff bf7b 	b.w	80090e4 <__retarget_lock_acquire_recursive>
 80091ee:	bf00      	nop
 80091f0:	20002e54 	.word	0x20002e54

080091f4 <__malloc_unlock>:
 80091f4:	4801      	ldr	r0, [pc, #4]	; (80091fc <__malloc_unlock+0x8>)
 80091f6:	f7ff bf76 	b.w	80090e6 <__retarget_lock_release_recursive>
 80091fa:	bf00      	nop
 80091fc:	20002e54 	.word	0x20002e54

08009200 <_free_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	4605      	mov	r5, r0
 8009204:	2900      	cmp	r1, #0
 8009206:	d040      	beq.n	800928a <_free_r+0x8a>
 8009208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800920c:	1f0c      	subs	r4, r1, #4
 800920e:	2b00      	cmp	r3, #0
 8009210:	bfb8      	it	lt
 8009212:	18e4      	addlt	r4, r4, r3
 8009214:	f7ff ffe8 	bl	80091e8 <__malloc_lock>
 8009218:	4a1c      	ldr	r2, [pc, #112]	; (800928c <_free_r+0x8c>)
 800921a:	6813      	ldr	r3, [r2, #0]
 800921c:	b933      	cbnz	r3, 800922c <_free_r+0x2c>
 800921e:	6063      	str	r3, [r4, #4]
 8009220:	6014      	str	r4, [r2, #0]
 8009222:	4628      	mov	r0, r5
 8009224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009228:	f7ff bfe4 	b.w	80091f4 <__malloc_unlock>
 800922c:	42a3      	cmp	r3, r4
 800922e:	d908      	bls.n	8009242 <_free_r+0x42>
 8009230:	6820      	ldr	r0, [r4, #0]
 8009232:	1821      	adds	r1, r4, r0
 8009234:	428b      	cmp	r3, r1
 8009236:	bf01      	itttt	eq
 8009238:	6819      	ldreq	r1, [r3, #0]
 800923a:	685b      	ldreq	r3, [r3, #4]
 800923c:	1809      	addeq	r1, r1, r0
 800923e:	6021      	streq	r1, [r4, #0]
 8009240:	e7ed      	b.n	800921e <_free_r+0x1e>
 8009242:	461a      	mov	r2, r3
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	b10b      	cbz	r3, 800924c <_free_r+0x4c>
 8009248:	42a3      	cmp	r3, r4
 800924a:	d9fa      	bls.n	8009242 <_free_r+0x42>
 800924c:	6811      	ldr	r1, [r2, #0]
 800924e:	1850      	adds	r0, r2, r1
 8009250:	42a0      	cmp	r0, r4
 8009252:	d10b      	bne.n	800926c <_free_r+0x6c>
 8009254:	6820      	ldr	r0, [r4, #0]
 8009256:	4401      	add	r1, r0
 8009258:	1850      	adds	r0, r2, r1
 800925a:	4283      	cmp	r3, r0
 800925c:	6011      	str	r1, [r2, #0]
 800925e:	d1e0      	bne.n	8009222 <_free_r+0x22>
 8009260:	6818      	ldr	r0, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	4401      	add	r1, r0
 8009266:	6011      	str	r1, [r2, #0]
 8009268:	6053      	str	r3, [r2, #4]
 800926a:	e7da      	b.n	8009222 <_free_r+0x22>
 800926c:	d902      	bls.n	8009274 <_free_r+0x74>
 800926e:	230c      	movs	r3, #12
 8009270:	602b      	str	r3, [r5, #0]
 8009272:	e7d6      	b.n	8009222 <_free_r+0x22>
 8009274:	6820      	ldr	r0, [r4, #0]
 8009276:	1821      	adds	r1, r4, r0
 8009278:	428b      	cmp	r3, r1
 800927a:	bf01      	itttt	eq
 800927c:	6819      	ldreq	r1, [r3, #0]
 800927e:	685b      	ldreq	r3, [r3, #4]
 8009280:	1809      	addeq	r1, r1, r0
 8009282:	6021      	streq	r1, [r4, #0]
 8009284:	6063      	str	r3, [r4, #4]
 8009286:	6054      	str	r4, [r2, #4]
 8009288:	e7cb      	b.n	8009222 <_free_r+0x22>
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	20002e58 	.word	0x20002e58

08009290 <_init>:
 8009290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009292:	bf00      	nop
 8009294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009296:	bc08      	pop	{r3}
 8009298:	469e      	mov	lr, r3
 800929a:	4770      	bx	lr

0800929c <_fini>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	bf00      	nop
 80092a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a2:	bc08      	pop	{r3}
 80092a4:	469e      	mov	lr, r3
 80092a6:	4770      	bx	lr
